
USB_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08001ed8  08001ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020a0  080020a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080020a0  080020a0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020a0  080020a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020a4  080020a4  000120a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080020a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000080  08002128  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002128  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a41  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000093e  00000000  00000000  00022af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f0  00000000  00000000  00023430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00023620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002143f  00000000  00000000  000237b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e89  00000000  00000000  00044bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5d80  00000000  00000000  00046a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f10  00000000  00000000  000fc87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  000fd78c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000fd810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001ec0 	.word	0x08001ec0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08001ec0 	.word	0x08001ec0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d005      	beq.n	8000338 <_get_log_level_string+0x1c>
 800032c:	2b02      	cmp	r3, #2
 800032e:	d005      	beq.n	800033c <_get_log_level_string+0x20>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d105      	bne.n	8000340 <_get_log_level_string+0x24>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <_get_log_level_string+0x30>)
 8000336:	e003      	b.n	8000340 <_get_log_level_string+0x24>
        case LOG_LEVEL_INFORMATION:
            return "INFO";
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <_get_log_level_string+0x34>)
 800033a:	e001      	b.n	8000340 <_get_log_level_string+0x24>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <_get_log_level_string+0x38>)
 800033e:	e7ff      	b.n	8000340 <_get_log_level_string+0x24>
    }
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	08001ed8 	.word	0x08001ed8
 8000350:	08001ee0 	.word	0x08001ee0
 8000354:	08001ee8 	.word	0x08001ee8

08000358 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level)
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <_log+0x4c>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	7bfa      	ldrb	r2, [r7, #15]
 800036c:	429a      	cmp	r2, r3
 800036e:	d814      	bhi.n	800039a <_log+0x42>
        return;

	printf("[%s] ", _get_log_level_string(log_level));
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffd2 	bl	800031c <_get_log_level_string>
 8000378:	4603      	mov	r3, r0
 800037a:	4619      	mov	r1, r3
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <_log+0x50>)
 800037e:	f001 f89f 	bl	80014c0 <iprintf>
	vfprintf(stdout, format, args);
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <_log+0x54>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	68b9      	ldr	r1, [r7, #8]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 ff05 	bl	800119c <vfiprintf>
	printf("\n");
 8000392:	200a      	movs	r0, #10
 8000394:	f001 f8ac 	bl	80014f0 <putchar>
 8000398:	e000      	b.n	800039c <_log+0x44>
        return;
 800039a:	bf00      	nop
}
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	08001ef0 	.word	0x08001ef0
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003b0:	b40f      	push	{r0, r1, r2, r3}
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	6939      	ldr	r1, [r7, #16]
 80003c2:	2001      	movs	r0, #1
 80003c4:	f7ff ffc8 	bl	8000358 <_log>
    va_end(args);
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003d2:	b004      	add	sp, #16
 80003d4:	4770      	bx	lr
	...

080003d8 <log_debug_array>:
 * \param label The label of the array.
 * \param array Pointer to the array.
 * \param len The length of data in bytes.
 */
void log_debug_array(char const * const label, void const *array, uint16_t const len)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	4613      	mov	r3, r2
 80003e4:	80fb      	strh	r3, [r7, #6]
    if (LOG_LEVEL_DEBUG > system_log_level)
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <log_debug_array+0x70>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d928      	bls.n	8000440 <log_debug_array+0x68>
        return;
        
	printf("[%s] %s[%d]: {", _get_log_level_string(LOG_LEVEL_DEBUG), label, len);
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff94 	bl	800031c <_get_log_level_string>
 80003f4:	4601      	mov	r1, r0
 80003f6:	88fb      	ldrh	r3, [r7, #6]
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <log_debug_array+0x74>)
 80003fc:	f001 f860 	bl	80014c0 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8000400:	2300      	movs	r3, #0
 8000402:	82fb      	strh	r3, [r7, #22]
 8000404:	e014      	b.n	8000430 <log_debug_array+0x58>
    {
    	uint8_t val = *((uint8_t *)(array + i));
 8000406:	8afb      	ldrh	r3, [r7, #22]
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	757b      	strb	r3, [r7, #21]
    	printf("0x%02X", val);
 8000410:	7d7b      	ldrb	r3, [r7, #21]
 8000412:	4619      	mov	r1, r3
 8000414:	480e      	ldr	r0, [pc, #56]	; (8000450 <log_debug_array+0x78>)
 8000416:	f001 f853 	bl	80014c0 <iprintf>
    	
    	// Add ", " after all elements except the last one.
    	if (i < len - 1)
 800041a:	8afa      	ldrh	r2, [r7, #22]
 800041c:	88fb      	ldrh	r3, [r7, #6]
 800041e:	3b01      	subs	r3, #1
 8000420:	429a      	cmp	r2, r3
 8000422:	da02      	bge.n	800042a <log_debug_array+0x52>
    	{
    	    printf(", ");
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <log_debug_array+0x7c>)
 8000426:	f001 f84b 	bl	80014c0 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 800042a:	8afb      	ldrh	r3, [r7, #22]
 800042c:	3301      	adds	r3, #1
 800042e:	82fb      	strh	r3, [r7, #22]
 8000430:	8afa      	ldrh	r2, [r7, #22]
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	429a      	cmp	r2, r3
 8000436:	d3e6      	bcc.n	8000406 <log_debug_array+0x2e>
    	}
    }
	printf("}\n");
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <log_debug_array+0x80>)
 800043a:	f001 f8c9 	bl	80015d0 <puts>
 800043e:	e000      	b.n	8000442 <log_debug_array+0x6a>
        return;
 8000440:	bf00      	nop
}
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000000 	.word	0x20000000
 800044c:	08001ef8 	.word	0x08001ef8
 8000450:	08001f08 	.word	0x08001f08
 8000454:	08001f10 	.word	0x08001f10
 8000458:	08001f14 	.word	0x08001f14

0800045c <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	log_info("Program entrypoint");
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <main+0x1c>)
 8000462:	f7ff ffa5 	bl	80003b0 <log_info>

	usb_device.ptr_out_buffer = &buffer;
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <main+0x20>)
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <main+0x24>)
 800046a:	605a      	str	r2, [r3, #4]

	usbd_initialize(&usb_device);
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <main+0x20>)
 800046e:	f000 fc43 	bl	8000cf8 <usbd_initialize>
	for(;;)
	{
		usbd_poll();
 8000472:	f000 fcaf 	bl	8000dd4 <usbd_poll>
 8000476:	e7fc      	b.n	8000472 <main+0x16>
 8000478:	08001f18 	.word	0x08001f18
 800047c:	200000ac 	.word	0x200000ac
 8000480:	200000c0 	.word	0x200000c0

08000484 <configure_clock>:
LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 72000000; // 72 MHz


 static void configure_clock()
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	 MODIFY_REG(FLASH->ACR,
 8000488:	4b25      	ldr	r3, [pc, #148]	; (8000520 <configure_clock+0x9c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f023 030f 	bic.w	r3, r3, #15
 8000490:	4a23      	ldr	r2, [pc, #140]	; (8000520 <configure_clock+0x9c>)
 8000492:	f043 0302 	orr.w	r3, r3, #2
 8000496:	6013      	str	r3, [r2, #0]
			 FLASH_ACR_LATENCY,
			 _VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //bit-shift left by val; <<
			 );

	 //Enable HSE (RESET & CLOCK CONTROL REG)
	 SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000498:	4b22      	ldr	r3, [pc, #136]	; (8000524 <configure_clock+0xa0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a21      	ldr	r2, [pc, #132]	; (8000524 <configure_clock+0xa0>)
 800049e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a2:	6013      	str	r3, [r2, #0]

	 //wait until HSE is stable and ready
	 while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 80004a4:	bf00      	nop
 80004a6:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <configure_clock+0xa0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <configure_clock+0x22>

	 //Configure PLL: source = HSE, SYSCLK = 72MHz
	 MODIFY_REG(RCC->PLLCFGR,
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <configure_clock+0xa0>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <configure_clock+0xa4>)
 80004b8:	401a      	ands	r2, r3
 80004ba:	491a      	ldr	r1, [pc, #104]	; (8000524 <configure_clock+0xa0>)
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <configure_clock+0xa8>)
 80004be:	4313      	orrs	r3, r2
 80004c0:	604b      	str	r3, [r1, #4]
			 RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
			 _VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | _VAL2FLD(RCC_PLLCFGR_PLLSRC, 1)
			 );

	 //Enable PLL module
	 SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <configure_clock+0xa0>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <configure_clock+0xa0>)
 80004c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004cc:	6013      	str	r3, [r2, #0]

	 //wait until PLL is stable
	 while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 80004ce:	bf00      	nop
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <configure_clock+0xa0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f9      	beq.n	80004d0 <configure_clock+0x4c>

	 //switch system clock to PLL
	 MODIFY_REG(RCC->CFGR,
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <configure_clock+0xa0>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f023 0303 	bic.w	r3, r3, #3
 80004e4:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <configure_clock+0xa0>)
 80004e6:	f043 0302 	orr.w	r3, r3, #2
 80004ea:	6093      	str	r3, [r2, #8]
			 RCC_CFGR_SW,
			 _VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
			 );

	 //configure the PPRE1
	 MODIFY_REG(RCC->CFGR,
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <configure_clock+0xa0>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <configure_clock+0xa0>)
 80004f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004fa:	6093      	str	r3, [r2, #8]
			 RCC_CFGR_PPRE1,
			 _VAL2FLD(RCC_CFGR_PPRE1, 4)
			 );

	//wait until PLL is used
	 while( READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80004fc:	bf00      	nop
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <configure_clock+0xa0>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f003 030c 	and.w	r3, r3, #12
 8000506:	2b08      	cmp	r3, #8
 8000508:	d1f9      	bne.n	80004fe <configure_clock+0x7a>

	 CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <configure_clock+0xa0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <configure_clock+0xa0>)
 8000510:	f023 0301 	bic.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	40023c00 	.word	0x40023c00
 8000524:	40023800 	.word	0x40023800
 8000528:	f0bc8000 	.word	0xf0bc8000
 800052c:	03401204 	.word	0x03401204

08000530 <configure_mco1>:

 void configure_mco1()
 {
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	 //Configures MCO1: source = PLLCLK, MCO1PRE = 2
	 MODIFY_REG(RCC->CFGR,
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <configure_mco1+0x4c>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <configure_mco1+0x4c>)
 800053e:	f043 638c 	orr.w	r3, r3, #73400320	; 0x4600000
 8000542:	6093      	str	r3, [r2, #8]
			 RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE,
			 _VAL2FLD(RCC_CFGR_MCO1, 3) | _VAL2FLD(RCC_CFGR_MCO1PRE,4)
	 );

	 //Enable GPIOA (MCO1 is connected to PA8);
	 SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <configure_mco1+0x4c>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <configure_mco1+0x4c>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6313      	str	r3, [r2, #48]	; 0x30

	 //Medium Speed
	 MODIFY_REG(GPIOA->OSPEEDR,
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <configure_mco1+0x50>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <configure_mco1+0x50>)
 800055a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800055e:	6093      	str	r3, [r2, #8]
			 GPIO_OSPEEDR_OSPEED8,
			 _VAL2FLD(GPIO_OSPEEDR_OSPEED8, 1)
	 );

	 //Configure PA8 to work in alternate function mode
	 MODIFY_REG(GPIOA->MODER,
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <configure_mco1+0x50>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000568:	4a05      	ldr	r2, [pc, #20]	; (8000580 <configure_mco1+0x50>)
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	6013      	str	r3, [r2, #0]
			 GPIO_MODER_MODER8,
			 _VAL2FLD(GPIO_MODER_MODER8, 2)
	 );
 }
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800
 8000580:	40020000 	.word	0x40020000

08000584 <SystemInit>:

void SystemInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	configure_mco1();
 8000588:	f7ff ffd2 	bl	8000530 <configure_mco1>
	configure_clock();
 800058c:	f7ff ff7a 	bl	8000484 <configure_clock>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <IN_ENDPOINT>:
#define USB_OTG_HS_DEVICE ((USB_OTG_DeviceTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_DEVICE_BASE))
#define USB_OTG_HS_PCGCCTL ((uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_PCGCCTL_BASE))

//return structure containing the regs of a specific IN endpoint
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	015b      	lsls	r3, r3, #5
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <IN_ENDPOINT+0x20>)
 80005a6:	4413      	add	r3, r2
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40040900 	.word	0x40040900

080005b8 <OUT_ENDPOINT>:

//return structure containing the regs of a specific OUT endpoint
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number *0x20));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	015b      	lsls	r3, r3, #5
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <OUT_ENDPOINT+0x20>)
 80005ca:	4413      	add	r3, r2
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40040b00 	.word	0x40040b00

080005dc <FIFO>:

inline static volatile uint32_t *FIFO(uint8_t endpoint_number)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	return (volatile uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	031b      	lsls	r3, r3, #12
 80005ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <initialize_gpio_pins>:


//These functions in the driver should not be called, except from the framework.

static void initialize_gpio_pins()
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	//Enable clock for GPIOB
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <initialize_gpio_pins+0x3c>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <initialize_gpio_pins+0x3c>)
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	6313      	str	r3, [r2, #48]	; 0x30

	//Sets alternate function 12 for: PB14 (-) and PB15 (+)
	MODIFY_REG(GPIOB->AFR[1],
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <initialize_gpio_pins+0x40>)
 8000612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000618:	4a09      	ldr	r2, [pc, #36]	; (8000640 <initialize_gpio_pins+0x40>)
 800061a:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 800061e:	6253      	str	r3, [r2, #36]	; 0x24
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14, 0xC) | _VAL2FLD(GPIO_AFRH_AFSEL15, 0xC) //12 in hex
	);

	//Configure USB pins (GPIOB) to work in alternate function mode
	MODIFY_REG(GPIOB-> MODER,
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <initialize_gpio_pins+0x40>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000628:	4a05      	ldr	r2, [pc, #20]	; (8000640 <initialize_gpio_pins+0x40>)
 800062a:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800062e:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15,
			_VAL2FLD(GPIO_MODER_MODER14, 2) | _VAL2FLD(GPIO_MODER_MODER15, 2)
	);

}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400

08000644 <initialize_core>:

static void initialize_core()
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	//Enable the clock for USB core
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <initialize_core+0x84>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <initialize_core+0x84>)
 800064e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000652:	6313      	str	r3, [r2, #48]	; 0x30

	//Configure USB core to run in device mode, and use embedded full-speed PHY
	MODIFY_REG(USB_OTG_HS -> GUSBCFG,
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <initialize_core+0x88>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800065c:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 8000660:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <initialize_core+0x88>)
 8000662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000666:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 800066a:	60d3      	str	r3, [r2, #12]
			USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
			USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09) //9 is only supported option for this micro-controller
	);

	//Configure device to run in full speed mode
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <initialize_core+0x8c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <initialize_core+0x8c>)
 8000672:	f043 0303 	orr.w	r3, r3, #3
 8000676:	6013      	str	r3, [r2, #0]
			_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	//Enable VBUS sensing device
	//SET_BIT(USB_OTG_HS->GCCFG,USB_OTG_GCCFG_VBUSBSEN);
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_VBDEN);
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <initialize_core+0x88>)
 800067a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <initialize_core+0x88>)
 800067e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000682:	6393      	str	r3, [r2, #56]	; 0x38


	//Unmasks the main USB core interrupts
	SET_BIT(USB_OTG_HS->GINTMSK,
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <initialize_core+0x88>)
 8000686:	699a      	ldr	r2, [r3, #24]
 8000688:	4910      	ldr	r1, [pc, #64]	; (80006cc <initialize_core+0x88>)
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <initialize_core+0x90>)
 800068c:	4313      	orrs	r3, r2
 800068e:	618b      	str	r3, [r1, #24]
			USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
			USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	//Clear all pending core interrupts
	WRITE_REG(USB_OTG_HS-> GINTSTS, 0xFFFFFFFF);
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <initialize_core+0x88>)
 8000692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000696:	615a      	str	r2, [r3, #20]

	//Unmasks USB global interrupt
	SET_BIT(USB_OTG_HS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <initialize_core+0x88>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <initialize_core+0x88>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6093      	str	r3, [r2, #8]

	//Unmasks transfer completed interrupt for all endpoints
	SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <initialize_core+0x8c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <initialize_core+0x8c>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK, USB_OTG_DOEPMSK_XFRCM);
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <initialize_core+0x8c>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <initialize_core+0x8c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6113      	str	r3, [r2, #16]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40040000 	.word	0x40040000
 80006d0:	40040800 	.word	0x40040800
 80006d4:	800c3818 	.word	0x800c3818

080006d8 <connect>:

static void connect()
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	//Power the transceivers on
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <connect+0x28>)
 80006de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <connect+0x28>)
 80006e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e6:	6393      	str	r3, [r2, #56]	; 0x38

	//Connect the device to bus
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS); //soft-connect
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <connect+0x2c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <connect+0x2c>)
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	6053      	str	r3, [r2, #4]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40040000 	.word	0x40040000
 8000704:	40040800 	.word	0x40040800

08000708 <disconnect>:


static void disconnect()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	//Disconnect device from bus
	SET_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <disconnect+0x28>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <disconnect+0x28>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6053      	str	r3, [r2, #4]

	//Power transceivers off
	CLEAR_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <disconnect+0x2c>)
 800071a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <disconnect+0x2c>)
 800071e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000722:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40040800 	.word	0x40040800
 8000734:	40040000 	.word	0x40040000

08000738 <set_device_address>:


static void set_device_address(uint8_t addr)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <set_device_address+0x2c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000752:	4904      	ldr	r1, [pc, #16]	; (8000764 <set_device_address+0x2c>)
 8000754:	4313      	orrs	r3, r2
 8000756:	600b      	str	r3, [r1, #0]
			USB_OTG_HS_DEVICE->DCFG,
			USB_OTG_DCFG_DAD,
			_VAL2FLD(USB_OTG_DCFG_DAD, addr)
	);
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40040800 	.word	0x40040800

08000768 <read_packet>:

//Pops data from the RxFIFO and stores it in the buffer
//buffer is pointer to the buffer in which the popped data will be stored
static void read_packet(void *buffer, uint16_t size)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	807b      	strh	r3, [r7, #2]
	//Note: there is only one RxFIFO
	uint32_t *fifo = FIFO(0); //popped data would be lost if not stored
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff31 	bl	80005dc <FIFO>
 800077a:	6138      	str	r0, [r7, #16]

	for(; size >= 4; size -=4, buffer += 4) //shift buffer by 4, otherwise data will be lost each cycle (FIFO structure uses 32-bit words)
 800077c:	e00b      	b.n	8000796 <read_packet+0x2e>
	{
		//pops one 32-bit word of data (until there is less than one word remaining)
		uint32_t data = *fifo;
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	60fb      	str	r3, [r7, #12]
		//store data in buffer, dereference the buffer pointer
		*((uint32_t*)buffer) = data;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	601a      	str	r2, [r3, #0]
	for(; size >= 4; size -=4, buffer += 4) //shift buffer by 4, otherwise data will be lost each cycle (FIFO structure uses 32-bit words)
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	3b04      	subs	r3, #4
 800078e:	807b      	strh	r3, [r7, #2]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3304      	adds	r3, #4
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d8f0      	bhi.n	800077e <read_packet+0x16>
	}
	if(size > 0)
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <read_packet+0x62>
	{
		//pops remaining last bytes (less than a word)
		uint32_t data = *fifo;
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data>>= 8)
 80007a8:	e00c      	b.n	80007c4 <read_packet+0x5c>
		{
			//store data in the buffer with correct alignment
			*((uint8_t*)buffer) = 0xFF & data;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data>>= 8)
 80007b2:	887b      	ldrh	r3, [r7, #2]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	807b      	strh	r3, [r7, #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1ef      	bne.n	80007aa <read_packet+0x42>
		}
	}
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <write_packet>:


static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	6039      	str	r1, [r7, #0]
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	4613      	mov	r3, r2
 80007e0:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fef9 	bl	80005dc <FIFO>
 80007ea:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fed0 	bl	8000594 <IN_ENDPOINT>
 80007f4:	60b8      	str	r0, [r7, #8]

	//configure the transmission (1 packet that has size bytes)
	MODIFY_REG(in_endpoint->DIEPTSIZ,
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	611a      	str	r2, [r3, #16]
			USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
			_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);

	//enable the transmission after clearing both STALL and NAK of the endpoint
	MODIFY_REG(in_endpoint->DIEPCTL,
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000816:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	601a      	str	r2, [r3, #0]
			USB_OTG_DIEPCTL_STALL,
			USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
	);

	//get the size in terms of 32-bit words
	size = (size + 3) / 4;
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	3303      	adds	r3, #3
 8000822:	2b00      	cmp	r3, #0
 8000824:	da00      	bge.n	8000828 <write_packet+0x56>
 8000826:	3303      	adds	r3, #3
 8000828:	109b      	asrs	r3, r3, #2
 800082a:	80bb      	strh	r3, [r7, #4]

	for(; size > 0; size--, buffer += 4)
 800082c:	e009      	b.n	8000842 <write_packet+0x70>
	{
		//pushes data to the TxFIFO
		*fifo = *((uint32_t *)buffer);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	601a      	str	r2, [r3, #0]
	for(; size > 0; size--, buffer += 4)
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	3b01      	subs	r3, #1
 800083a:	80bb      	strh	r3, [r7, #4]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f2      	bne.n	800082e <write_packet+0x5c>
	}
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <refresh_fifo_start_addresses>:

//Update the start addresses of all FIFOs according to size of each FIFO
static void refresh_fifo_start_addresses()
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
	//First changeable start address begins after the region of RxFIFO
	uint16_t start_addr = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_HS->GRXFSIZ) * 4; //must be aligned with a 32-bit location/word
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 8000858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085a:	b29b      	uxth	r3, r3
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	80fb      	strh	r3, [r7, #6]

	//Update the start of TxFIFO0
	MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 8000862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000864:	0c1b      	lsrs	r3, r3, #16
 8000866:	041b      	lsls	r3, r3, #16
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	491c      	ldr	r1, [pc, #112]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 800086c:	4313      	orrs	r3, r2
 800086e:	628b      	str	r3, [r1, #40]	; 0x28
			USB_OTG_TX0FSA,
			_VAL2FLD(USB_OTG_TX0FSA, start_addr)
	);

	//Next start address is after where the last TxFIFO ends
	start_addr += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_HS->DIEPTXF0_HNPTXFSIZ) * 4; //must be aligned with a 32-bit location/word
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 8000872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	b29b      	uxth	r3, r3
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	b29a      	uxth	r2, r3
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4413      	add	r3, r2
 8000880:	80fb      	strh	r3, [r7, #6]

	//update the start address of the remaining TxFIFO
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT -1; txfifo_number++)
 8000882:	2300      	movs	r3, #0
 8000884:	717b      	strb	r3, [r7, #5]
 8000886:	e020      	b.n	80008ca <refresh_fifo_start_addresses+0x7a>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[txfifo_number],
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	3340      	adds	r3, #64	; 0x40
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	0c1b      	lsrs	r3, r3, #16
 8000896:	041b      	lsls	r3, r3, #16
 8000898:	88fa      	ldrh	r2, [r7, #6]
 800089a:	4810      	ldr	r0, [pc, #64]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 800089c:	7979      	ldrb	r1, [r7, #5]
 800089e:	431a      	orrs	r2, r3
 80008a0:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	605a      	str	r2, [r3, #4]
				USB_OTG_NPTXFSA,
				_VAL2FLD(USB_OTG_NPTXFSA, start_addr)
		);

		start_addr += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_HS->DIEPTXF[txfifo_number]) * 4;
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <refresh_fifo_start_addresses+0x8c>)
 80008ac:	797b      	ldrb	r3, [r7, #5]
 80008ae:	3340      	adds	r3, #64	; 0x40
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	b29a      	uxth	r2, r3
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	4413      	add	r3, r2
 80008c2:	80fb      	strh	r3, [r7, #6]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT -1; txfifo_number++)
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	3301      	adds	r3, #1
 80008c8:	717b      	strb	r3, [r7, #5]
 80008ca:	797b      	ldrb	r3, [r7, #5]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d9db      	bls.n	8000888 <refresh_fifo_start_addresses+0x38>
	}
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40040000 	.word	0x40040000

080008e0 <configure_rxfifo_size>:


//Configure RxFIFO of all OUT endpoints, size of largest OUT endpoints in bytes.
//Shared between all OUT endpoints
static void configure_rxfifo_size(uint16_t size)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
	//Consider the space required to save status packets in RxFIFO and get size in term of 32-bit words.
	size = 10 + (2 * ((size / 4) + 1));
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	3306      	adds	r3, #6
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	80fb      	strh	r3, [r7, #6]

	MODIFY_REG(USB_OTG_HS->GRXFSIZ,
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <configure_rxfifo_size+0x34>)
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	041b      	lsls	r3, r3, #16
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	4904      	ldr	r1, [pc, #16]	; (8000914 <configure_rxfifo_size+0x34>)
 8000904:	4313      	orrs	r3, r2
 8000906:	624b      	str	r3, [r1, #36]	; 0x24
		USB_OTG_GRXFSIZ_RXFD,
		_VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 8000908:	f7ff ffa2 	bl	8000850 <refresh_fifo_start_addresses>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40040000 	.word	0x40040000

08000918 <configure_txfifo_size>:

//Configure TxFIFO of all IN endpoints, the size of IN endpoint in bytes
//Any change on any FIFO will update the registers of all TxFIFOs to adapt the start offsets
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	80bb      	strh	r3, [r7, #4]
	//Get FIFO size in term of 32-bit words
	size = (size + 3) / 4;
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	3303      	adds	r3, #3
 800092c:	2b00      	cmp	r3, #0
 800092e:	da00      	bge.n	8000932 <configure_txfifo_size+0x1a>
 8000930:	3303      	adds	r3, #3
 8000932:	109b      	asrs	r3, r3, #2
 8000934:	80bb      	strh	r3, [r7, #4]

	//configure the depth of the TxFIFO
	if(endpoint_number == 0)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d108      	bne.n	800094e <configure_txfifo_size+0x36>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <configure_txfifo_size+0x68>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	b29a      	uxth	r2, r3
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	041b      	lsls	r3, r3, #16
 8000946:	490e      	ldr	r1, [pc, #56]	; (8000980 <configure_txfifo_size+0x68>)
 8000948:	4313      	orrs	r3, r2
 800094a:	628b      	str	r3, [r1, #40]	; 0x28
 800094c:	e011      	b.n	8000972 <configure_txfifo_size+0x5a>
				_VAL2FLD(USB_OTG_TX0FD,size)
		);
	}
	else
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[endpoint_number - 1],
 800094e:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <configure_txfifo_size+0x68>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3b01      	subs	r3, #1
 8000954:	3340      	adds	r3, #64	; 0x40
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	b299      	uxth	r1, r3
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	041a      	lsls	r2, r3, #16
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <configure_txfifo_size+0x68>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	3b01      	subs	r3, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	3340      	adds	r3, #64	; 0x40
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4403      	add	r3, r0
 8000970:	605a      	str	r2, [r3, #4]
				USB_OTG_NPTXFD,
				_VAL2FLD(USB_OTG_NPTXFD, size)
		);

	}
	refresh_fifo_start_addresses();
 8000972:	f7ff ff6d 	bl	8000850 <refresh_fifo_start_addresses>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40040000 	.word	0x40040000

08000984 <flush_rxfifo>:


//Flush the RxFIFO of all OUT endpoints
static void flush_rxfifo()
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_HS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <flush_rxfifo+0x1c>)
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <flush_rxfifo+0x1c>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6113      	str	r3, [r2, #16]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40040000 	.word	0x40040000

080009a4 <flush_txfifo>:


//flush the TxFIFO of an IN endpoint
static void flush_txfifo(uint8_t endpoint_number)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	//Sets the number of TxFIFO to be flushed and then triggers the flush
	MODIFY_REG(USB_OTG_HS->GRSTCTL,
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <flush_txfifo+0x30>)
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80009be:	4313      	orrs	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <flush_txfifo+0x30>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6113      	str	r3, [r2, #16]
			USB_OTG_GRSTCTL_TXFNUM,
			_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40040000 	.word	0x40040000

080009d8 <configure_endpoint0>:


static void configure_endpoint0(uint16_t endpoint_size)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
	//Unmask all interrupts of IN and OUT endpoint0
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <configure_endpoint0+0x6c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <configure_endpoint0+0x6c>)
 80009e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80009ec:	61d3      	str	r3, [r2, #28]

	//Configure the maximum packet size, activate endpoint and NAK the endpoint
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fdd0 	bl	8000594 <IN_ENDPOINT>
 80009f4:	4603      	mov	r3, r0
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80009fc:	f023 0307 	bic.w	r3, r3, #7
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a06:	ea43 0402 	orr.w	r4, r3, r2
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fdc2 	bl	8000594 <IN_ENDPOINT>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 8000a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1a:	6013      	str	r3, [r2, #0]
			USB_OTG_DIEPCTL_MPSIZ,
			USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK
	);

	//Clear NAK and enable endpoint data transmission
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fdcb 	bl	80005b8 <OUT_ENDPOINT>
 8000a22:	4603      	mov	r3, r0
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000a2a:	601a      	str	r2, [r3, #0]
			USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK
			);

	//Note: 64 bytes is the maximum packet size for full speed USB devices
	configure_rxfifo_size(64);
 8000a2c:	2040      	movs	r0, #64	; 0x40
 8000a2e:	f7ff ff57 	bl	80008e0 <configure_rxfifo_size>
	configure_txfifo_size(0, endpoint_size);
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4619      	mov	r1, r3
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff ff6e 	bl	8000918 <configure_txfifo_size>
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	40040800 	.word	0x40040800

08000a48 <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	460b      	mov	r3, r1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	4613      	mov	r3, r2
 8000a58:	80bb      	strh	r3, [r7, #4]
	//Unmask all interrupts of the targeted IN endpoint
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << endpoint_number);
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <configure_in_endpoint+0x7c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4611      	mov	r1, r2
 8000a68:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <configure_in_endpoint+0x7c>)
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	61d3      	str	r3, [r2, #28]

	//Activate endpoint and set endpoint handshake to NAK.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd8f 	bl	8000594 <IN_ENDPOINT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <configure_in_endpoint+0x80>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	88ba      	ldrh	r2, [r7, #4]
 8000a80:	f3c2 010a 	ubfx	r1, r2, #0, #11
 8000a84:	79ba      	ldrb	r2, [r7, #6]
 8000a86:	0492      	lsls	r2, r2, #18
 8000a88:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000a8c:	4311      	orrs	r1, r2
 8000a8e:	79fa      	ldrb	r2, [r7, #7]
 8000a90:	0592      	lsls	r2, r2, #22
 8000a92:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 8000a96:	430a      	orrs	r2, r1
 8000a98:	ea43 0402 	orr.w	r4, r3, r2
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd78 	bl	8000594 <IN_ENDPOINT>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aae:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
		_VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type) | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 8000ab0:	88ba      	ldrh	r2, [r7, #4]
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff2e 	bl	8000918 <configure_txfifo_size>
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	40040800 	.word	0x40040800
 8000ac8:	fff3f800 	.word	0xfff3f800

08000acc <deconfigure_endpoint>:

static void deconfigure_endpoint(uint8_t endpoint_number)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd5b 	bl	8000594 <IN_ENDPOINT>
 8000ade:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fd68 	bl	80005b8 <OUT_ENDPOINT>
 8000ae8:	60b8      	str	r0, [r7, #8]

	//masks all interrupts of targeted in and out endpoints
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK,
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <deconfigure_endpoint+0xb8>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	2101      	movs	r1, #1
 8000af2:	4091      	lsls	r1, r2
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	430a      	orrs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <deconfigure_endpoint+0xb8>)
 8000b06:	400b      	ands	r3, r1
 8000b08:	61d3      	str	r3, [r2, #28]
			(1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	//Clears all interrupts of the endpoint
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000b12:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x71FF);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f443 43e3 	orr.w	r3, r3, #29056	; 0x7180
 8000b22:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	6093      	str	r3, [r2, #8]

	//disable endpoints if possible
	if(in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da05      	bge.n	8000b3e <deconfigure_endpoint+0x72>
	{
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	601a      	str	r2, [r3, #0]
	}

	//deactivate endpoint
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]

	if(endpoint_number != 0) //0 endpoint must be active/enabled.
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00f      	beq.n	8000b70 <deconfigure_endpoint+0xa4>
	{
		if(out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da05      	bge.n	8000b64 <deconfigure_endpoint+0x98>
		{
			//Disable endpoint transmission
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	601a      	str	r2, [r3, #0]
		}

		//deactivate the endpoint
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	601a      	str	r2, [r3, #0]
	}

	//Flush the FIFOs
	flush_txfifo(endpoint_number);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff16 	bl	80009a4 <flush_txfifo>
	flush_rxfifo();
 8000b78:	f7ff ff04 	bl	8000984 <flush_rxfifo>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40040800 	.word	0x40040800

08000b88 <usbrst_handler>:




static void usbrst_handler()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	log_info("USB reset singal was detected");
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <usbrst_handler+0x34>)
 8000b90:	f7ff fc0e 	bl	80003b0 <log_info>
	for(uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e006      	b.n	8000ba8 <usbrst_handler+0x20>
	{
		deconfigure_endpoint(i);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff95 	bl	8000acc <deconfigure_endpoint>
	for(uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d9f5      	bls.n	8000b9a <usbrst_handler+0x12>
	}

	usb_events.on_usb_reset_received();
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <usbrst_handler+0x38>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4798      	blx	r3
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	08001f2c 	.word	0x08001f2c
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <enumdne_handler>:

static void enumdne_handler()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done");
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <enumdne_handler+0x14>)
 8000bca:	f7ff fbf1 	bl	80003b0 <log_info>
	configure_endpoint0(8);
 8000bce:	2008      	movs	r0, #8
 8000bd0:	f7ff ff02 	bl	80009d8 <configure_endpoint0>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	08001f4c 	.word	0x08001f4c

08000bdc <rxflvl_handler>:

static void rxflvl_handler()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
	//Pop the status information word from RxFIFO
	uint32_t receive_status = USB_OTG_HS_GLOBAL->GRXSTSP;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <rxflvl_handler+0x90>)
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	60fb      	str	r3, [r7, #12]

	//endpoint that receives the data
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	72fb      	strb	r3, [r7, #11]
	//count of bytes in received packet
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	091b      	lsrs	r3, r3, #4
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bfc:	813b      	strh	r3, [r7, #8]
	//status of received packet
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	0c5b      	lsrs	r3, r3, #17
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	80fb      	strh	r3, [r7, #6]

	switch(pktsts)
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	3b02      	subs	r3, #2
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d828      	bhi.n	8000c64 <rxflvl_handler+0x88>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <rxflvl_handler+0x3c>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c63 	.word	0x08000c63
 8000c1c:	08000c4f 	.word	0x08000c4f
 8000c20:	08000c3b 	.word	0x08000c3b
 8000c24:	08000c65 	.word	0x08000c65
 8000c28:	08000c2d 	.word	0x08000c2d
	{
	case 0x06: //SETUP packet (includes data)
		usb_events.on_setup_data_received(endpoint_number, bcnt);
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <rxflvl_handler+0x94>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	8939      	ldrh	r1, [r7, #8]
 8000c32:	7afa      	ldrb	r2, [r7, #11]
 8000c34:	4610      	mov	r0, r2
 8000c36:	4798      	blx	r3
		break;
 8000c38:	e014      	b.n	8000c64 <rxflvl_handler+0x88>
	case 0x02: //OUT packet
		break;
	case 0x04: //SETUP stage has completed
		//re-enable the transmission on the endpoint
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000c3a:	7afb      	ldrb	r3, [r7, #11]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fcbb 	bl	80005b8 <OUT_ENDPOINT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000c4a:	601a      	str	r2, [r3, #0]
				USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
		);
		break;
 8000c4c:	e00a      	b.n	8000c64 <rxflvl_handler+0x88>
	case 0x03: //OUT transfer has completed
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fcb1 	bl	80005b8 <OUT_ENDPOINT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000c5e:	601a      	str	r2, [r3, #0]
				USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
		);
		break;
 8000c60:	e000      	b.n	8000c64 <rxflvl_handler+0x88>
		break;
 8000c62:	bf00      	nop
	}

}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40040000 	.word	0x40040000
 8000c70:	20000004 	.word	0x20000004

08000c74 <gintsts_handler>:

static void gintsts_handler()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_HS_GLOBAL->GINTSTS;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <gintsts_handler+0x7c>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	607b      	str	r3, [r7, #4]

	if(gintsts & USB_OTG_GINTSTS_USBRST)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d008      	beq.n	8000c9c <gintsts_handler+0x28>
	{
		usbrst_handler();
 8000c8a:	f7ff ff7d 	bl	8000b88 <usbrst_handler>
		//Clear interrupt to avoid global interrupt persistence
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <gintsts_handler+0x7c>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <gintsts_handler+0x7c>)
 8000c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	e021      	b.n	8000ce0 <gintsts_handler+0x6c>
	}
	else if (gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d008      	beq.n	8000cb8 <gintsts_handler+0x44>
	{
		enumdne_handler();
 8000ca6:	f7ff ff8d 	bl	8000bc4 <enumdne_handler>
		//Clear interrupt after handling
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <gintsts_handler+0x7c>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <gintsts_handler+0x7c>)
 8000cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	e013      	b.n	8000ce0 <gintsts_handler+0x6c>
	}
	else if (gintsts & USB_OTG_GINTSTS_RXFLVL) //interrupt occurs when RxFIFO data is not empty
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <gintsts_handler+0x60>
	{
		rxflvl_handler();
 8000cc2:	f7ff ff8b 	bl	8000bdc <rxflvl_handler>
		//clear interrupt after handling
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <gintsts_handler+0x7c>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <gintsts_handler+0x7c>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	e005      	b.n	8000ce0 <gintsts_handler+0x6c>

	}
	else if (gintsts & USB_OTG_GINTSTS_IEPINT)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d100      	bne.n	8000ce0 <gintsts_handler+0x6c>
	{

	}
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
 8000cde:	687b      	ldr	r3, [r7, #4]
	{

	}
	usb_events.on_usb_polled();
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <gintsts_handler+0x80>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4798      	blx	r3
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40040000 	.word	0x40040000
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <usbd_initialize>:
#include "usbd_descriptors.h"

static UsbDevice *usbd_handle;

void usbd_initialize(UsbDevice *usb_device)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	usbd_handle = usb_device;
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <usbd_initialize+0x28>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
	usb_driver.initialize_gpio_pins();
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <usbd_initialize+0x2c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4798      	blx	r3
	usb_driver.initialize_core();
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <usbd_initialize+0x2c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4798      	blx	r3
	usb_driver.connect();
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <usbd_initialize+0x2c>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	4798      	blx	r3
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000009c 	.word	0x2000009c
 8000d24:	08001fdc 	.word	0x08001fdc

08000d28 <process_request>:
		break;
	}
}

static void process_request()
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
	UsbRequest const *request = usbd_handle->ptr_out_buffer; //receiving a request, so need out buffer
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <process_request+0x28>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	607b      	str	r3, [r7, #4]

	//type of request can be standard and need to gather from recipient
	switch(request->bmRequestType & (USB_BM_REQUEST_TYPE_TYPE_MASK | USB_BM_REQUEST_TYPE_RECIPIENT_MASK))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	f003 0363 	and.w	r3, r3, #99	; 0x63
 8000d3e:	2b00      	cmp	r3, #0
	{
		case USB_BM_REQUEST_TYPE_TYPE_STANDARD | USB_BM_REQUEST_TYPE_RECIPIENT_DEVICE:
			//process_standard_device_request();
			break;
 8000d40:	bf00      	nop
	}
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000009c 	.word	0x2000009c

08000d54 <process_control_transfer_stage>:

static void process_control_transfer_stage()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	switch(usbd_handle->control_transfer_stage)
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d003      	beq.n	8000d6c <process_control_transfer_stage+0x18>
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d024      	beq.n	8000db2 <process_control_transfer_stage+0x5e>
 8000d68:	2b00      	cmp	r3, #0
	{
		case USB_CONTROL_STAGE_SETUP:
			break;
 8000d6a:	e023      	b.n	8000db4 <process_control_transfer_stage+0x60>
		case USB_CONTROL_STAGE_DATA_IN:
			log_info("Processing IN-DATA stage");
 8000d6c:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <process_control_transfer_stage+0x6c>)
 8000d6e:	f7ff fb1f 	bl	80003b0 <log_info>
			uint8_t data_size = device_descriptor.bMaxPacketSize0;
 8000d72:	2308      	movs	r3, #8
 8000d74:	71fb      	strb	r3, [r7, #7]
			usb_driver.write_packet(0, usbd_handle->ptr_in_buffer, data_size);
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <process_control_transfer_stage+0x70>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	68d1      	ldr	r1, [r2, #12]
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	b292      	uxth	r2, r2
 8000d84:	2000      	movs	r0, #0
 8000d86:	4798      	blx	r3

			usbd_handle->in_data_size -= data_size;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6919      	ldr	r1, [r3, #16]
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	611a      	str	r2, [r3, #16]
			usbd_handle->ptr_in_buffer += data_size;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68d9      	ldr	r1, [r3, #12]
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	440a      	add	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]

			usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN_IDLE;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <process_control_transfer_stage+0x68>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2203      	movs	r2, #3
 8000dae:	705a      	strb	r2, [r3, #1]
			break;
 8000db0:	e000      	b.n	8000db4 <process_control_transfer_stage+0x60>
		case USB_CONTROL_STAGE_DATA_IN_IDLE:
			break;
 8000db2:	bf00      	nop
	}
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000009c 	.word	0x2000009c
 8000dc0:	08001fb0 	.word	0x08001fb0
 8000dc4:	08001fdc 	.word	0x08001fdc

08000dc8 <usb_polled_handler>:

static void usb_polled_handler()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	process_control_transfer_stage();
 8000dcc:	f7ff ffc2 	bl	8000d54 <process_control_transfer_stage>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <usbd_poll>:

void usbd_poll()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <usbd_poll+0x10>)
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	4798      	blx	r3
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08001fdc 	.word	0x08001fdc

08000de8 <usbrst_handler>:

static void usbrst_handler()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <usbrst_handler+0x38>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size = 0;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <usbrst_handler+0x38>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value = 0;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <usbrst_handler+0x38>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <usbrst_handler+0x38>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <usbrst_handler+0x38>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_address(0);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <usbrst_handler+0x3c>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2000      	movs	r0, #0
 8000e1a:	4798      	blx	r3
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000009c 	.word	0x2000009c
 8000e24:	08001fdc 	.word	0x08001fdc

08000e28 <setup_data_received_handler>:


static void setup_data_received_handler(uint8_t endpoint_number, uint16_t byte_count)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80bb      	strh	r3, [r7, #4]
	usb_driver.read_packet(usbd_handle->ptr_out_buffer, byte_count);
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <setup_data_received_handler+0x3c>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <setup_data_received_handler+0x40>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	6852      	ldr	r2, [r2, #4]
 8000e42:	88b9      	ldrh	r1, [r7, #4]
 8000e44:	4610      	mov	r0, r2
 8000e46:	4798      	blx	r3

	//print out the received data
	log_debug_array("SETUP data: ", usbd_handle->ptr_out_buffer, byte_count);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <setup_data_received_handler+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <setup_data_received_handler+0x44>)
 8000e54:	f7ff fac0 	bl	80003d8 <log_debug_array>

	process_request();
 8000e58:	f7ff ff66 	bl	8000d28 <process_request>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08001fdc 	.word	0x08001fdc
 8000e68:	2000009c 	.word	0x2000009c
 8000e6c:	08001fcc 	.word	0x08001fcc

08000e70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e72:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e74:	f7ff fb86 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e9e:	f000 f811 	bl	8000ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fadb 	bl	800045c <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   r0, =_estack
 8000ea8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000eb4:	080020a8 	.word	0x080020a8
  ldr r2, =_sbss
 8000eb8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ebc:	200000e4 	.word	0x200000e4

08000ec0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <__libc_init_array>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	4e0d      	ldr	r6, [pc, #52]	; (8000efc <__libc_init_array+0x38>)
 8000ec8:	4c0d      	ldr	r4, [pc, #52]	; (8000f00 <__libc_init_array+0x3c>)
 8000eca:	1ba4      	subs	r4, r4, r6
 8000ecc:	10a4      	asrs	r4, r4, #2
 8000ece:	2500      	movs	r5, #0
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	d109      	bne.n	8000ee8 <__libc_init_array+0x24>
 8000ed4:	4e0b      	ldr	r6, [pc, #44]	; (8000f04 <__libc_init_array+0x40>)
 8000ed6:	4c0c      	ldr	r4, [pc, #48]	; (8000f08 <__libc_init_array+0x44>)
 8000ed8:	f000 fff2 	bl	8001ec0 <_init>
 8000edc:	1ba4      	subs	r4, r4, r6
 8000ede:	10a4      	asrs	r4, r4, #2
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	42a5      	cmp	r5, r4
 8000ee4:	d105      	bne.n	8000ef2 <__libc_init_array+0x2e>
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
 8000ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eec:	4798      	blx	r3
 8000eee:	3501      	adds	r5, #1
 8000ef0:	e7ee      	b.n	8000ed0 <__libc_init_array+0xc>
 8000ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef6:	4798      	blx	r3
 8000ef8:	3501      	adds	r5, #1
 8000efa:	e7f2      	b.n	8000ee2 <__libc_init_array+0x1e>
 8000efc:	080020a0 	.word	0x080020a0
 8000f00:	080020a0 	.word	0x080020a0
 8000f04:	080020a0 	.word	0x080020a0
 8000f08:	080020a4 	.word	0x080020a4

08000f0c <memset>:
 8000f0c:	4402      	add	r2, r0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d100      	bne.n	8000f16 <memset+0xa>
 8000f14:	4770      	bx	lr
 8000f16:	f803 1b01 	strb.w	r1, [r3], #1
 8000f1a:	e7f9      	b.n	8000f10 <memset+0x4>

08000f1c <__sfputc_r>:
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	b410      	push	{r4}
 8000f24:	6093      	str	r3, [r2, #8]
 8000f26:	da08      	bge.n	8000f3a <__sfputc_r+0x1e>
 8000f28:	6994      	ldr	r4, [r2, #24]
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	db01      	blt.n	8000f32 <__sfputc_r+0x16>
 8000f2e:	290a      	cmp	r1, #10
 8000f30:	d103      	bne.n	8000f3a <__sfputc_r+0x1e>
 8000f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f36:	f000 bb53 	b.w	80015e0 <__swbuf_r>
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	1c58      	adds	r0, r3, #1
 8000f3e:	6010      	str	r0, [r2, #0]
 8000f40:	7019      	strb	r1, [r3, #0]
 8000f42:	4608      	mov	r0, r1
 8000f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <__sfputs_r>:
 8000f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	460f      	mov	r7, r1
 8000f50:	4614      	mov	r4, r2
 8000f52:	18d5      	adds	r5, r2, r3
 8000f54:	42ac      	cmp	r4, r5
 8000f56:	d101      	bne.n	8000f5c <__sfputs_r+0x12>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e007      	b.n	8000f6c <__sfputs_r+0x22>
 8000f5c:	463a      	mov	r2, r7
 8000f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff ffda 	bl	8000f1c <__sfputc_r>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d1f3      	bne.n	8000f54 <__sfputs_r+0xa>
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f70 <_vfiprintf_r>:
 8000f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f74:	460c      	mov	r4, r1
 8000f76:	b09d      	sub	sp, #116	; 0x74
 8000f78:	4617      	mov	r7, r2
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	b118      	cbz	r0, 8000f88 <_vfiprintf_r+0x18>
 8000f80:	6983      	ldr	r3, [r0, #24]
 8000f82:	b90b      	cbnz	r3, 8000f88 <_vfiprintf_r+0x18>
 8000f84:	f000 fcdc 	bl	8001940 <__sinit>
 8000f88:	4b7c      	ldr	r3, [pc, #496]	; (800117c <_vfiprintf_r+0x20c>)
 8000f8a:	429c      	cmp	r4, r3
 8000f8c:	d158      	bne.n	8001040 <_vfiprintf_r+0xd0>
 8000f8e:	6874      	ldr	r4, [r6, #4]
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	0718      	lsls	r0, r3, #28
 8000f94:	d55e      	bpl.n	8001054 <_vfiprintf_r+0xe4>
 8000f96:	6923      	ldr	r3, [r4, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d05b      	beq.n	8001054 <_vfiprintf_r+0xe4>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fa6:	2330      	movs	r3, #48	; 0x30
 8000fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fac:	9503      	str	r5, [sp, #12]
 8000fae:	f04f 0b01 	mov.w	fp, #1
 8000fb2:	46b8      	mov	r8, r7
 8000fb4:	4645      	mov	r5, r8
 8000fb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000fba:	b10b      	cbz	r3, 8000fc0 <_vfiprintf_r+0x50>
 8000fbc:	2b25      	cmp	r3, #37	; 0x25
 8000fbe:	d154      	bne.n	800106a <_vfiprintf_r+0xfa>
 8000fc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8000fc4:	d00b      	beq.n	8000fde <_vfiprintf_r+0x6e>
 8000fc6:	4653      	mov	r3, sl
 8000fc8:	463a      	mov	r2, r7
 8000fca:	4621      	mov	r1, r4
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f7ff ffbc 	bl	8000f4a <__sfputs_r>
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	f000 80c2 	beq.w	800115c <_vfiprintf_r+0x1ec>
 8000fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fda:	4453      	add	r3, sl
 8000fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8000fde:	f898 3000 	ldrb.w	r3, [r8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80ba 	beq.w	800115c <_vfiprintf_r+0x1ec>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ff2:	9304      	str	r3, [sp, #16]
 8000ff4:	9307      	str	r3, [sp, #28]
 8000ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8000ffc:	46a8      	mov	r8, r5
 8000ffe:	2205      	movs	r2, #5
 8001000:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001004:	485e      	ldr	r0, [pc, #376]	; (8001180 <_vfiprintf_r+0x210>)
 8001006:	f7ff f8f3 	bl	80001f0 <memchr>
 800100a:	9b04      	ldr	r3, [sp, #16]
 800100c:	bb78      	cbnz	r0, 800106e <_vfiprintf_r+0xfe>
 800100e:	06d9      	lsls	r1, r3, #27
 8001010:	bf44      	itt	mi
 8001012:	2220      	movmi	r2, #32
 8001014:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001018:	071a      	lsls	r2, r3, #28
 800101a:	bf44      	itt	mi
 800101c:	222b      	movmi	r2, #43	; 0x2b
 800101e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001022:	782a      	ldrb	r2, [r5, #0]
 8001024:	2a2a      	cmp	r2, #42	; 0x2a
 8001026:	d02a      	beq.n	800107e <_vfiprintf_r+0x10e>
 8001028:	9a07      	ldr	r2, [sp, #28]
 800102a:	46a8      	mov	r8, r5
 800102c:	2000      	movs	r0, #0
 800102e:	250a      	movs	r5, #10
 8001030:	4641      	mov	r1, r8
 8001032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001036:	3b30      	subs	r3, #48	; 0x30
 8001038:	2b09      	cmp	r3, #9
 800103a:	d969      	bls.n	8001110 <_vfiprintf_r+0x1a0>
 800103c:	b360      	cbz	r0, 8001098 <_vfiprintf_r+0x128>
 800103e:	e024      	b.n	800108a <_vfiprintf_r+0x11a>
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <_vfiprintf_r+0x214>)
 8001042:	429c      	cmp	r4, r3
 8001044:	d101      	bne.n	800104a <_vfiprintf_r+0xda>
 8001046:	68b4      	ldr	r4, [r6, #8]
 8001048:	e7a2      	b.n	8000f90 <_vfiprintf_r+0x20>
 800104a:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <_vfiprintf_r+0x218>)
 800104c:	429c      	cmp	r4, r3
 800104e:	bf08      	it	eq
 8001050:	68f4      	ldreq	r4, [r6, #12]
 8001052:	e79d      	b.n	8000f90 <_vfiprintf_r+0x20>
 8001054:	4621      	mov	r1, r4
 8001056:	4630      	mov	r0, r6
 8001058:	f000 fb14 	bl	8001684 <__swsetup_r>
 800105c:	2800      	cmp	r0, #0
 800105e:	d09d      	beq.n	8000f9c <_vfiprintf_r+0x2c>
 8001060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001064:	b01d      	add	sp, #116	; 0x74
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800106a:	46a8      	mov	r8, r5
 800106c:	e7a2      	b.n	8000fb4 <_vfiprintf_r+0x44>
 800106e:	4a44      	ldr	r2, [pc, #272]	; (8001180 <_vfiprintf_r+0x210>)
 8001070:	1a80      	subs	r0, r0, r2
 8001072:	fa0b f000 	lsl.w	r0, fp, r0
 8001076:	4318      	orrs	r0, r3
 8001078:	9004      	str	r0, [sp, #16]
 800107a:	4645      	mov	r5, r8
 800107c:	e7be      	b.n	8000ffc <_vfiprintf_r+0x8c>
 800107e:	9a03      	ldr	r2, [sp, #12]
 8001080:	1d11      	adds	r1, r2, #4
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	9103      	str	r1, [sp, #12]
 8001086:	2a00      	cmp	r2, #0
 8001088:	db01      	blt.n	800108e <_vfiprintf_r+0x11e>
 800108a:	9207      	str	r2, [sp, #28]
 800108c:	e004      	b.n	8001098 <_vfiprintf_r+0x128>
 800108e:	4252      	negs	r2, r2
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	9207      	str	r2, [sp, #28]
 8001096:	9304      	str	r3, [sp, #16]
 8001098:	f898 3000 	ldrb.w	r3, [r8]
 800109c:	2b2e      	cmp	r3, #46	; 0x2e
 800109e:	d10e      	bne.n	80010be <_vfiprintf_r+0x14e>
 80010a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80010a4:	2b2a      	cmp	r3, #42	; 0x2a
 80010a6:	d138      	bne.n	800111a <_vfiprintf_r+0x1aa>
 80010a8:	9b03      	ldr	r3, [sp, #12]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	9203      	str	r2, [sp, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bfb8      	it	lt
 80010b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80010b8:	f108 0802 	add.w	r8, r8, #2
 80010bc:	9305      	str	r3, [sp, #20]
 80010be:	4d33      	ldr	r5, [pc, #204]	; (800118c <_vfiprintf_r+0x21c>)
 80010c0:	f898 1000 	ldrb.w	r1, [r8]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4628      	mov	r0, r5
 80010c8:	f7ff f892 	bl	80001f0 <memchr>
 80010cc:	b140      	cbz	r0, 80010e0 <_vfiprintf_r+0x170>
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	1b40      	subs	r0, r0, r5
 80010d2:	fa03 f000 	lsl.w	r0, r3, r0
 80010d6:	9b04      	ldr	r3, [sp, #16]
 80010d8:	4303      	orrs	r3, r0
 80010da:	f108 0801 	add.w	r8, r8, #1
 80010de:	9304      	str	r3, [sp, #16]
 80010e0:	f898 1000 	ldrb.w	r1, [r8]
 80010e4:	482a      	ldr	r0, [pc, #168]	; (8001190 <_vfiprintf_r+0x220>)
 80010e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010ea:	2206      	movs	r2, #6
 80010ec:	f108 0701 	add.w	r7, r8, #1
 80010f0:	f7ff f87e 	bl	80001f0 <memchr>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d037      	beq.n	8001168 <_vfiprintf_r+0x1f8>
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <_vfiprintf_r+0x224>)
 80010fa:	bb1b      	cbnz	r3, 8001144 <_vfiprintf_r+0x1d4>
 80010fc:	9b03      	ldr	r3, [sp, #12]
 80010fe:	3307      	adds	r3, #7
 8001100:	f023 0307 	bic.w	r3, r3, #7
 8001104:	3308      	adds	r3, #8
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800110a:	444b      	add	r3, r9
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
 800110e:	e750      	b.n	8000fb2 <_vfiprintf_r+0x42>
 8001110:	fb05 3202 	mla	r2, r5, r2, r3
 8001114:	2001      	movs	r0, #1
 8001116:	4688      	mov	r8, r1
 8001118:	e78a      	b.n	8001030 <_vfiprintf_r+0xc0>
 800111a:	2300      	movs	r3, #0
 800111c:	f108 0801 	add.w	r8, r8, #1
 8001120:	9305      	str	r3, [sp, #20]
 8001122:	4619      	mov	r1, r3
 8001124:	250a      	movs	r5, #10
 8001126:	4640      	mov	r0, r8
 8001128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800112c:	3a30      	subs	r2, #48	; 0x30
 800112e:	2a09      	cmp	r2, #9
 8001130:	d903      	bls.n	800113a <_vfiprintf_r+0x1ca>
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0c3      	beq.n	80010be <_vfiprintf_r+0x14e>
 8001136:	9105      	str	r1, [sp, #20]
 8001138:	e7c1      	b.n	80010be <_vfiprintf_r+0x14e>
 800113a:	fb05 2101 	mla	r1, r5, r1, r2
 800113e:	2301      	movs	r3, #1
 8001140:	4680      	mov	r8, r0
 8001142:	e7f0      	b.n	8001126 <_vfiprintf_r+0x1b6>
 8001144:	ab03      	add	r3, sp, #12
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4622      	mov	r2, r4
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_vfiprintf_r+0x228>)
 800114c:	a904      	add	r1, sp, #16
 800114e:	4630      	mov	r0, r6
 8001150:	f3af 8000 	nop.w
 8001154:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001158:	4681      	mov	r9, r0
 800115a:	d1d5      	bne.n	8001108 <_vfiprintf_r+0x198>
 800115c:	89a3      	ldrh	r3, [r4, #12]
 800115e:	065b      	lsls	r3, r3, #25
 8001160:	f53f af7e 	bmi.w	8001060 <_vfiprintf_r+0xf0>
 8001164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001166:	e77d      	b.n	8001064 <_vfiprintf_r+0xf4>
 8001168:	ab03      	add	r3, sp, #12
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4622      	mov	r2, r4
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <_vfiprintf_r+0x228>)
 8001170:	a904      	add	r1, sp, #16
 8001172:	4630      	mov	r0, r6
 8001174:	f000 f892 	bl	800129c <_printf_i>
 8001178:	e7ec      	b.n	8001154 <_vfiprintf_r+0x1e4>
 800117a:	bf00      	nop
 800117c:	08002060 	.word	0x08002060
 8001180:	0800200c 	.word	0x0800200c
 8001184:	08002080 	.word	0x08002080
 8001188:	08002040 	.word	0x08002040
 800118c:	08002012 	.word	0x08002012
 8001190:	08002016 	.word	0x08002016
 8001194:	00000000 	.word	0x00000000
 8001198:	08000f4b 	.word	0x08000f4b

0800119c <vfiprintf>:
 800119c:	4613      	mov	r3, r2
 800119e:	460a      	mov	r2, r1
 80011a0:	4601      	mov	r1, r0
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <vfiprintf+0x10>)
 80011a4:	6800      	ldr	r0, [r0, #0]
 80011a6:	f7ff bee3 	b.w	8000f70 <_vfiprintf_r>
 80011aa:	bf00      	nop
 80011ac:	2000001c 	.word	0x2000001c

080011b0 <_printf_common>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	4691      	mov	r9, r2
 80011b6:	461f      	mov	r7, r3
 80011b8:	688a      	ldr	r2, [r1, #8]
 80011ba:	690b      	ldr	r3, [r1, #16]
 80011bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bfb8      	it	lt
 80011c4:	4613      	movlt	r3, r2
 80011c6:	f8c9 3000 	str.w	r3, [r9]
 80011ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011ce:	4606      	mov	r6, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	b112      	cbz	r2, 80011da <_printf_common+0x2a>
 80011d4:	3301      	adds	r3, #1
 80011d6:	f8c9 3000 	str.w	r3, [r9]
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	0699      	lsls	r1, r3, #26
 80011de:	bf42      	ittt	mi
 80011e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80011e4:	3302      	addmi	r3, #2
 80011e6:	f8c9 3000 	strmi.w	r3, [r9]
 80011ea:	6825      	ldr	r5, [r4, #0]
 80011ec:	f015 0506 	ands.w	r5, r5, #6
 80011f0:	d107      	bne.n	8001202 <_printf_common+0x52>
 80011f2:	f104 0a19 	add.w	sl, r4, #25
 80011f6:	68e3      	ldr	r3, [r4, #12]
 80011f8:	f8d9 2000 	ldr.w	r2, [r9]
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	42ab      	cmp	r3, r5
 8001200:	dc28      	bgt.n	8001254 <_printf_common+0xa4>
 8001202:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001206:	6822      	ldr	r2, [r4, #0]
 8001208:	3300      	adds	r3, #0
 800120a:	bf18      	it	ne
 800120c:	2301      	movne	r3, #1
 800120e:	0692      	lsls	r2, r2, #26
 8001210:	d42d      	bmi.n	800126e <_printf_common+0xbe>
 8001212:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001216:	4639      	mov	r1, r7
 8001218:	4630      	mov	r0, r6
 800121a:	47c0      	blx	r8
 800121c:	3001      	adds	r0, #1
 800121e:	d020      	beq.n	8001262 <_printf_common+0xb2>
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	68e5      	ldr	r5, [r4, #12]
 8001224:	f8d9 2000 	ldr.w	r2, [r9]
 8001228:	f003 0306 	and.w	r3, r3, #6
 800122c:	2b04      	cmp	r3, #4
 800122e:	bf08      	it	eq
 8001230:	1aad      	subeq	r5, r5, r2
 8001232:	68a3      	ldr	r3, [r4, #8]
 8001234:	6922      	ldr	r2, [r4, #16]
 8001236:	bf0c      	ite	eq
 8001238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800123c:	2500      	movne	r5, #0
 800123e:	4293      	cmp	r3, r2
 8001240:	bfc4      	itt	gt
 8001242:	1a9b      	subgt	r3, r3, r2
 8001244:	18ed      	addgt	r5, r5, r3
 8001246:	f04f 0900 	mov.w	r9, #0
 800124a:	341a      	adds	r4, #26
 800124c:	454d      	cmp	r5, r9
 800124e:	d11a      	bne.n	8001286 <_printf_common+0xd6>
 8001250:	2000      	movs	r0, #0
 8001252:	e008      	b.n	8001266 <_printf_common+0xb6>
 8001254:	2301      	movs	r3, #1
 8001256:	4652      	mov	r2, sl
 8001258:	4639      	mov	r1, r7
 800125a:	4630      	mov	r0, r6
 800125c:	47c0      	blx	r8
 800125e:	3001      	adds	r0, #1
 8001260:	d103      	bne.n	800126a <_printf_common+0xba>
 8001262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126a:	3501      	adds	r5, #1
 800126c:	e7c3      	b.n	80011f6 <_printf_common+0x46>
 800126e:	18e1      	adds	r1, r4, r3
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	2030      	movs	r0, #48	; 0x30
 8001274:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001278:	4422      	add	r2, r4
 800127a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800127e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001282:	3302      	adds	r3, #2
 8001284:	e7c5      	b.n	8001212 <_printf_common+0x62>
 8001286:	2301      	movs	r3, #1
 8001288:	4622      	mov	r2, r4
 800128a:	4639      	mov	r1, r7
 800128c:	4630      	mov	r0, r6
 800128e:	47c0      	blx	r8
 8001290:	3001      	adds	r0, #1
 8001292:	d0e6      	beq.n	8001262 <_printf_common+0xb2>
 8001294:	f109 0901 	add.w	r9, r9, #1
 8001298:	e7d8      	b.n	800124c <_printf_common+0x9c>
	...

0800129c <_printf_i>:
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80012a4:	460c      	mov	r4, r1
 80012a6:	7e09      	ldrb	r1, [r1, #24]
 80012a8:	b085      	sub	sp, #20
 80012aa:	296e      	cmp	r1, #110	; 0x6e
 80012ac:	4617      	mov	r7, r2
 80012ae:	4606      	mov	r6, r0
 80012b0:	4698      	mov	r8, r3
 80012b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012b4:	f000 80b3 	beq.w	800141e <_printf_i+0x182>
 80012b8:	d822      	bhi.n	8001300 <_printf_i+0x64>
 80012ba:	2963      	cmp	r1, #99	; 0x63
 80012bc:	d036      	beq.n	800132c <_printf_i+0x90>
 80012be:	d80a      	bhi.n	80012d6 <_printf_i+0x3a>
 80012c0:	2900      	cmp	r1, #0
 80012c2:	f000 80b9 	beq.w	8001438 <_printf_i+0x19c>
 80012c6:	2958      	cmp	r1, #88	; 0x58
 80012c8:	f000 8083 	beq.w	80013d2 <_printf_i+0x136>
 80012cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80012d4:	e032      	b.n	800133c <_printf_i+0xa0>
 80012d6:	2964      	cmp	r1, #100	; 0x64
 80012d8:	d001      	beq.n	80012de <_printf_i+0x42>
 80012da:	2969      	cmp	r1, #105	; 0x69
 80012dc:	d1f6      	bne.n	80012cc <_printf_i+0x30>
 80012de:	6820      	ldr	r0, [r4, #0]
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	0605      	lsls	r5, r0, #24
 80012e4:	f103 0104 	add.w	r1, r3, #4
 80012e8:	d52a      	bpl.n	8001340 <_printf_i+0xa4>
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6011      	str	r1, [r2, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da03      	bge.n	80012fa <_printf_i+0x5e>
 80012f2:	222d      	movs	r2, #45	; 0x2d
 80012f4:	425b      	negs	r3, r3
 80012f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80012fa:	486f      	ldr	r0, [pc, #444]	; (80014b8 <_printf_i+0x21c>)
 80012fc:	220a      	movs	r2, #10
 80012fe:	e039      	b.n	8001374 <_printf_i+0xd8>
 8001300:	2973      	cmp	r1, #115	; 0x73
 8001302:	f000 809d 	beq.w	8001440 <_printf_i+0x1a4>
 8001306:	d808      	bhi.n	800131a <_printf_i+0x7e>
 8001308:	296f      	cmp	r1, #111	; 0x6f
 800130a:	d020      	beq.n	800134e <_printf_i+0xb2>
 800130c:	2970      	cmp	r1, #112	; 0x70
 800130e:	d1dd      	bne.n	80012cc <_printf_i+0x30>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	f043 0320 	orr.w	r3, r3, #32
 8001316:	6023      	str	r3, [r4, #0]
 8001318:	e003      	b.n	8001322 <_printf_i+0x86>
 800131a:	2975      	cmp	r1, #117	; 0x75
 800131c:	d017      	beq.n	800134e <_printf_i+0xb2>
 800131e:	2978      	cmp	r1, #120	; 0x78
 8001320:	d1d4      	bne.n	80012cc <_printf_i+0x30>
 8001322:	2378      	movs	r3, #120	; 0x78
 8001324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001328:	4864      	ldr	r0, [pc, #400]	; (80014bc <_printf_i+0x220>)
 800132a:	e055      	b.n	80013d8 <_printf_i+0x13c>
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	1d19      	adds	r1, r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6011      	str	r1, [r2, #0]
 8001334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800133c:	2301      	movs	r3, #1
 800133e:	e08c      	b.n	800145a <_printf_i+0x1be>
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6011      	str	r1, [r2, #0]
 8001344:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001348:	bf18      	it	ne
 800134a:	b21b      	sxthne	r3, r3
 800134c:	e7cf      	b.n	80012ee <_printf_i+0x52>
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	6825      	ldr	r5, [r4, #0]
 8001352:	1d18      	adds	r0, r3, #4
 8001354:	6010      	str	r0, [r2, #0]
 8001356:	0628      	lsls	r0, r5, #24
 8001358:	d501      	bpl.n	800135e <_printf_i+0xc2>
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e002      	b.n	8001364 <_printf_i+0xc8>
 800135e:	0668      	lsls	r0, r5, #25
 8001360:	d5fb      	bpl.n	800135a <_printf_i+0xbe>
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4854      	ldr	r0, [pc, #336]	; (80014b8 <_printf_i+0x21c>)
 8001366:	296f      	cmp	r1, #111	; 0x6f
 8001368:	bf14      	ite	ne
 800136a:	220a      	movne	r2, #10
 800136c:	2208      	moveq	r2, #8
 800136e:	2100      	movs	r1, #0
 8001370:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001374:	6865      	ldr	r5, [r4, #4]
 8001376:	60a5      	str	r5, [r4, #8]
 8001378:	2d00      	cmp	r5, #0
 800137a:	f2c0 8095 	blt.w	80014a8 <_printf_i+0x20c>
 800137e:	6821      	ldr	r1, [r4, #0]
 8001380:	f021 0104 	bic.w	r1, r1, #4
 8001384:	6021      	str	r1, [r4, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d13d      	bne.n	8001406 <_printf_i+0x16a>
 800138a:	2d00      	cmp	r5, #0
 800138c:	f040 808e 	bne.w	80014ac <_printf_i+0x210>
 8001390:	4665      	mov	r5, ip
 8001392:	2a08      	cmp	r2, #8
 8001394:	d10b      	bne.n	80013ae <_printf_i+0x112>
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	07db      	lsls	r3, r3, #31
 800139a:	d508      	bpl.n	80013ae <_printf_i+0x112>
 800139c:	6923      	ldr	r3, [r4, #16]
 800139e:	6862      	ldr	r2, [r4, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	bfde      	ittt	le
 80013a4:	2330      	movle	r3, #48	; 0x30
 80013a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80013ae:	ebac 0305 	sub.w	r3, ip, r5
 80013b2:	6123      	str	r3, [r4, #16]
 80013b4:	f8cd 8000 	str.w	r8, [sp]
 80013b8:	463b      	mov	r3, r7
 80013ba:	aa03      	add	r2, sp, #12
 80013bc:	4621      	mov	r1, r4
 80013be:	4630      	mov	r0, r6
 80013c0:	f7ff fef6 	bl	80011b0 <_printf_common>
 80013c4:	3001      	adds	r0, #1
 80013c6:	d14d      	bne.n	8001464 <_printf_i+0x1c8>
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013cc:	b005      	add	sp, #20
 80013ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d2:	4839      	ldr	r0, [pc, #228]	; (80014b8 <_printf_i+0x21c>)
 80013d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	6821      	ldr	r1, [r4, #0]
 80013dc:	1d1d      	adds	r5, r3, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6015      	str	r5, [r2, #0]
 80013e2:	060a      	lsls	r2, r1, #24
 80013e4:	d50b      	bpl.n	80013fe <_printf_i+0x162>
 80013e6:	07ca      	lsls	r2, r1, #31
 80013e8:	bf44      	itt	mi
 80013ea:	f041 0120 	orrmi.w	r1, r1, #32
 80013ee:	6021      	strmi	r1, [r4, #0]
 80013f0:	b91b      	cbnz	r3, 80013fa <_printf_i+0x15e>
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	f022 0220 	bic.w	r2, r2, #32
 80013f8:	6022      	str	r2, [r4, #0]
 80013fa:	2210      	movs	r2, #16
 80013fc:	e7b7      	b.n	800136e <_printf_i+0xd2>
 80013fe:	064d      	lsls	r5, r1, #25
 8001400:	bf48      	it	mi
 8001402:	b29b      	uxthmi	r3, r3
 8001404:	e7ef      	b.n	80013e6 <_printf_i+0x14a>
 8001406:	4665      	mov	r5, ip
 8001408:	fbb3 f1f2 	udiv	r1, r3, r2
 800140c:	fb02 3311 	mls	r3, r2, r1, r3
 8001410:	5cc3      	ldrb	r3, [r0, r3]
 8001412:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001416:	460b      	mov	r3, r1
 8001418:	2900      	cmp	r1, #0
 800141a:	d1f5      	bne.n	8001408 <_printf_i+0x16c>
 800141c:	e7b9      	b.n	8001392 <_printf_i+0xf6>
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	6825      	ldr	r5, [r4, #0]
 8001422:	6961      	ldr	r1, [r4, #20]
 8001424:	1d18      	adds	r0, r3, #4
 8001426:	6010      	str	r0, [r2, #0]
 8001428:	0628      	lsls	r0, r5, #24
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	d501      	bpl.n	8001432 <_printf_i+0x196>
 800142e:	6019      	str	r1, [r3, #0]
 8001430:	e002      	b.n	8001438 <_printf_i+0x19c>
 8001432:	066a      	lsls	r2, r5, #25
 8001434:	d5fb      	bpl.n	800142e <_printf_i+0x192>
 8001436:	8019      	strh	r1, [r3, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	6123      	str	r3, [r4, #16]
 800143c:	4665      	mov	r5, ip
 800143e:	e7b9      	b.n	80013b4 <_printf_i+0x118>
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	1d19      	adds	r1, r3, #4
 8001444:	6011      	str	r1, [r2, #0]
 8001446:	681d      	ldr	r5, [r3, #0]
 8001448:	6862      	ldr	r2, [r4, #4]
 800144a:	2100      	movs	r1, #0
 800144c:	4628      	mov	r0, r5
 800144e:	f7fe fecf 	bl	80001f0 <memchr>
 8001452:	b108      	cbz	r0, 8001458 <_printf_i+0x1bc>
 8001454:	1b40      	subs	r0, r0, r5
 8001456:	6060      	str	r0, [r4, #4]
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	6123      	str	r3, [r4, #16]
 800145c:	2300      	movs	r3, #0
 800145e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001462:	e7a7      	b.n	80013b4 <_printf_i+0x118>
 8001464:	6923      	ldr	r3, [r4, #16]
 8001466:	462a      	mov	r2, r5
 8001468:	4639      	mov	r1, r7
 800146a:	4630      	mov	r0, r6
 800146c:	47c0      	blx	r8
 800146e:	3001      	adds	r0, #1
 8001470:	d0aa      	beq.n	80013c8 <_printf_i+0x12c>
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	079b      	lsls	r3, r3, #30
 8001476:	d413      	bmi.n	80014a0 <_printf_i+0x204>
 8001478:	68e0      	ldr	r0, [r4, #12]
 800147a:	9b03      	ldr	r3, [sp, #12]
 800147c:	4298      	cmp	r0, r3
 800147e:	bfb8      	it	lt
 8001480:	4618      	movlt	r0, r3
 8001482:	e7a3      	b.n	80013cc <_printf_i+0x130>
 8001484:	2301      	movs	r3, #1
 8001486:	464a      	mov	r2, r9
 8001488:	4639      	mov	r1, r7
 800148a:	4630      	mov	r0, r6
 800148c:	47c0      	blx	r8
 800148e:	3001      	adds	r0, #1
 8001490:	d09a      	beq.n	80013c8 <_printf_i+0x12c>
 8001492:	3501      	adds	r5, #1
 8001494:	68e3      	ldr	r3, [r4, #12]
 8001496:	9a03      	ldr	r2, [sp, #12]
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	42ab      	cmp	r3, r5
 800149c:	dcf2      	bgt.n	8001484 <_printf_i+0x1e8>
 800149e:	e7eb      	b.n	8001478 <_printf_i+0x1dc>
 80014a0:	2500      	movs	r5, #0
 80014a2:	f104 0919 	add.w	r9, r4, #25
 80014a6:	e7f5      	b.n	8001494 <_printf_i+0x1f8>
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ac      	bne.n	8001406 <_printf_i+0x16a>
 80014ac:	7803      	ldrb	r3, [r0, #0]
 80014ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014b6:	e76c      	b.n	8001392 <_printf_i+0xf6>
 80014b8:	0800201d 	.word	0x0800201d
 80014bc:	0800202e 	.word	0x0800202e

080014c0 <iprintf>:
 80014c0:	b40f      	push	{r0, r1, r2, r3}
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <iprintf+0x2c>)
 80014c4:	b513      	push	{r0, r1, r4, lr}
 80014c6:	681c      	ldr	r4, [r3, #0]
 80014c8:	b124      	cbz	r4, 80014d4 <iprintf+0x14>
 80014ca:	69a3      	ldr	r3, [r4, #24]
 80014cc:	b913      	cbnz	r3, 80014d4 <iprintf+0x14>
 80014ce:	4620      	mov	r0, r4
 80014d0:	f000 fa36 	bl	8001940 <__sinit>
 80014d4:	ab05      	add	r3, sp, #20
 80014d6:	9a04      	ldr	r2, [sp, #16]
 80014d8:	68a1      	ldr	r1, [r4, #8]
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fd47 	bl	8000f70 <_vfiprintf_r>
 80014e2:	b002      	add	sp, #8
 80014e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014e8:	b004      	add	sp, #16
 80014ea:	4770      	bx	lr
 80014ec:	2000001c 	.word	0x2000001c

080014f0 <putchar>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <putchar+0x24>)
 80014f4:	681c      	ldr	r4, [r3, #0]
 80014f6:	4605      	mov	r5, r0
 80014f8:	b124      	cbz	r4, 8001504 <putchar+0x14>
 80014fa:	69a3      	ldr	r3, [r4, #24]
 80014fc:	b913      	cbnz	r3, 8001504 <putchar+0x14>
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 fa1e 	bl	8001940 <__sinit>
 8001504:	68a2      	ldr	r2, [r4, #8]
 8001506:	4629      	mov	r1, r5
 8001508:	4620      	mov	r0, r4
 800150a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800150e:	f000 bbad 	b.w	8001c6c <_putc_r>
 8001512:	bf00      	nop
 8001514:	2000001c 	.word	0x2000001c

08001518 <_puts_r>:
 8001518:	b570      	push	{r4, r5, r6, lr}
 800151a:	460e      	mov	r6, r1
 800151c:	4605      	mov	r5, r0
 800151e:	b118      	cbz	r0, 8001528 <_puts_r+0x10>
 8001520:	6983      	ldr	r3, [r0, #24]
 8001522:	b90b      	cbnz	r3, 8001528 <_puts_r+0x10>
 8001524:	f000 fa0c 	bl	8001940 <__sinit>
 8001528:	69ab      	ldr	r3, [r5, #24]
 800152a:	68ac      	ldr	r4, [r5, #8]
 800152c:	b913      	cbnz	r3, 8001534 <_puts_r+0x1c>
 800152e:	4628      	mov	r0, r5
 8001530:	f000 fa06 	bl	8001940 <__sinit>
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <_puts_r+0xac>)
 8001536:	429c      	cmp	r4, r3
 8001538:	d117      	bne.n	800156a <_puts_r+0x52>
 800153a:	686c      	ldr	r4, [r5, #4]
 800153c:	89a3      	ldrh	r3, [r4, #12]
 800153e:	071b      	lsls	r3, r3, #28
 8001540:	d51d      	bpl.n	800157e <_puts_r+0x66>
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	b1db      	cbz	r3, 800157e <_puts_r+0x66>
 8001546:	3e01      	subs	r6, #1
 8001548:	68a3      	ldr	r3, [r4, #8]
 800154a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800154e:	3b01      	subs	r3, #1
 8001550:	60a3      	str	r3, [r4, #8]
 8001552:	b9e9      	cbnz	r1, 8001590 <_puts_r+0x78>
 8001554:	2b00      	cmp	r3, #0
 8001556:	da2e      	bge.n	80015b6 <_puts_r+0x9e>
 8001558:	4622      	mov	r2, r4
 800155a:	210a      	movs	r1, #10
 800155c:	4628      	mov	r0, r5
 800155e:	f000 f83f 	bl	80015e0 <__swbuf_r>
 8001562:	3001      	adds	r0, #1
 8001564:	d011      	beq.n	800158a <_puts_r+0x72>
 8001566:	200a      	movs	r0, #10
 8001568:	e011      	b.n	800158e <_puts_r+0x76>
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <_puts_r+0xb0>)
 800156c:	429c      	cmp	r4, r3
 800156e:	d101      	bne.n	8001574 <_puts_r+0x5c>
 8001570:	68ac      	ldr	r4, [r5, #8]
 8001572:	e7e3      	b.n	800153c <_puts_r+0x24>
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_puts_r+0xb4>)
 8001576:	429c      	cmp	r4, r3
 8001578:	bf08      	it	eq
 800157a:	68ec      	ldreq	r4, [r5, #12]
 800157c:	e7de      	b.n	800153c <_puts_r+0x24>
 800157e:	4621      	mov	r1, r4
 8001580:	4628      	mov	r0, r5
 8001582:	f000 f87f 	bl	8001684 <__swsetup_r>
 8001586:	2800      	cmp	r0, #0
 8001588:	d0dd      	beq.n	8001546 <_puts_r+0x2e>
 800158a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	2b00      	cmp	r3, #0
 8001592:	da04      	bge.n	800159e <_puts_r+0x86>
 8001594:	69a2      	ldr	r2, [r4, #24]
 8001596:	429a      	cmp	r2, r3
 8001598:	dc06      	bgt.n	80015a8 <_puts_r+0x90>
 800159a:	290a      	cmp	r1, #10
 800159c:	d004      	beq.n	80015a8 <_puts_r+0x90>
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	6022      	str	r2, [r4, #0]
 80015a4:	7019      	strb	r1, [r3, #0]
 80015a6:	e7cf      	b.n	8001548 <_puts_r+0x30>
 80015a8:	4622      	mov	r2, r4
 80015aa:	4628      	mov	r0, r5
 80015ac:	f000 f818 	bl	80015e0 <__swbuf_r>
 80015b0:	3001      	adds	r0, #1
 80015b2:	d1c9      	bne.n	8001548 <_puts_r+0x30>
 80015b4:	e7e9      	b.n	800158a <_puts_r+0x72>
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	200a      	movs	r0, #10
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	6022      	str	r2, [r4, #0]
 80015be:	7018      	strb	r0, [r3, #0]
 80015c0:	e7e5      	b.n	800158e <_puts_r+0x76>
 80015c2:	bf00      	nop
 80015c4:	08002060 	.word	0x08002060
 80015c8:	08002080 	.word	0x08002080
 80015cc:	08002040 	.word	0x08002040

080015d0 <puts>:
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <puts+0xc>)
 80015d2:	4601      	mov	r1, r0
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f7ff bf9f 	b.w	8001518 <_puts_r>
 80015da:	bf00      	nop
 80015dc:	2000001c 	.word	0x2000001c

080015e0 <__swbuf_r>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	460e      	mov	r6, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	4605      	mov	r5, r0
 80015e8:	b118      	cbz	r0, 80015f2 <__swbuf_r+0x12>
 80015ea:	6983      	ldr	r3, [r0, #24]
 80015ec:	b90b      	cbnz	r3, 80015f2 <__swbuf_r+0x12>
 80015ee:	f000 f9a7 	bl	8001940 <__sinit>
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <__swbuf_r+0x98>)
 80015f4:	429c      	cmp	r4, r3
 80015f6:	d12a      	bne.n	800164e <__swbuf_r+0x6e>
 80015f8:	686c      	ldr	r4, [r5, #4]
 80015fa:	69a3      	ldr	r3, [r4, #24]
 80015fc:	60a3      	str	r3, [r4, #8]
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	071a      	lsls	r2, r3, #28
 8001602:	d52e      	bpl.n	8001662 <__swbuf_r+0x82>
 8001604:	6923      	ldr	r3, [r4, #16]
 8001606:	b363      	cbz	r3, 8001662 <__swbuf_r+0x82>
 8001608:	6923      	ldr	r3, [r4, #16]
 800160a:	6820      	ldr	r0, [r4, #0]
 800160c:	1ac0      	subs	r0, r0, r3
 800160e:	6963      	ldr	r3, [r4, #20]
 8001610:	b2f6      	uxtb	r6, r6
 8001612:	4283      	cmp	r3, r0
 8001614:	4637      	mov	r7, r6
 8001616:	dc04      	bgt.n	8001622 <__swbuf_r+0x42>
 8001618:	4621      	mov	r1, r4
 800161a:	4628      	mov	r0, r5
 800161c:	f000 f926 	bl	800186c <_fflush_r>
 8001620:	bb28      	cbnz	r0, 800166e <__swbuf_r+0x8e>
 8001622:	68a3      	ldr	r3, [r4, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60a3      	str	r3, [r4, #8]
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	6022      	str	r2, [r4, #0]
 800162e:	701e      	strb	r6, [r3, #0]
 8001630:	6963      	ldr	r3, [r4, #20]
 8001632:	3001      	adds	r0, #1
 8001634:	4283      	cmp	r3, r0
 8001636:	d004      	beq.n	8001642 <__swbuf_r+0x62>
 8001638:	89a3      	ldrh	r3, [r4, #12]
 800163a:	07db      	lsls	r3, r3, #31
 800163c:	d519      	bpl.n	8001672 <__swbuf_r+0x92>
 800163e:	2e0a      	cmp	r6, #10
 8001640:	d117      	bne.n	8001672 <__swbuf_r+0x92>
 8001642:	4621      	mov	r1, r4
 8001644:	4628      	mov	r0, r5
 8001646:	f000 f911 	bl	800186c <_fflush_r>
 800164a:	b190      	cbz	r0, 8001672 <__swbuf_r+0x92>
 800164c:	e00f      	b.n	800166e <__swbuf_r+0x8e>
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <__swbuf_r+0x9c>)
 8001650:	429c      	cmp	r4, r3
 8001652:	d101      	bne.n	8001658 <__swbuf_r+0x78>
 8001654:	68ac      	ldr	r4, [r5, #8]
 8001656:	e7d0      	b.n	80015fa <__swbuf_r+0x1a>
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <__swbuf_r+0xa0>)
 800165a:	429c      	cmp	r4, r3
 800165c:	bf08      	it	eq
 800165e:	68ec      	ldreq	r4, [r5, #12]
 8001660:	e7cb      	b.n	80015fa <__swbuf_r+0x1a>
 8001662:	4621      	mov	r1, r4
 8001664:	4628      	mov	r0, r5
 8001666:	f000 f80d 	bl	8001684 <__swsetup_r>
 800166a:	2800      	cmp	r0, #0
 800166c:	d0cc      	beq.n	8001608 <__swbuf_r+0x28>
 800166e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001672:	4638      	mov	r0, r7
 8001674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001676:	bf00      	nop
 8001678:	08002060 	.word	0x08002060
 800167c:	08002080 	.word	0x08002080
 8001680:	08002040 	.word	0x08002040

08001684 <__swsetup_r>:
 8001684:	4b32      	ldr	r3, [pc, #200]	; (8001750 <__swsetup_r+0xcc>)
 8001686:	b570      	push	{r4, r5, r6, lr}
 8001688:	681d      	ldr	r5, [r3, #0]
 800168a:	4606      	mov	r6, r0
 800168c:	460c      	mov	r4, r1
 800168e:	b125      	cbz	r5, 800169a <__swsetup_r+0x16>
 8001690:	69ab      	ldr	r3, [r5, #24]
 8001692:	b913      	cbnz	r3, 800169a <__swsetup_r+0x16>
 8001694:	4628      	mov	r0, r5
 8001696:	f000 f953 	bl	8001940 <__sinit>
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <__swsetup_r+0xd0>)
 800169c:	429c      	cmp	r4, r3
 800169e:	d10f      	bne.n	80016c0 <__swsetup_r+0x3c>
 80016a0:	686c      	ldr	r4, [r5, #4]
 80016a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	0715      	lsls	r5, r2, #28
 80016aa:	d42c      	bmi.n	8001706 <__swsetup_r+0x82>
 80016ac:	06d0      	lsls	r0, r2, #27
 80016ae:	d411      	bmi.n	80016d4 <__swsetup_r+0x50>
 80016b0:	2209      	movs	r2, #9
 80016b2:	6032      	str	r2, [r6, #0]
 80016b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b8:	81a3      	strh	r3, [r4, #12]
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016be:	e03e      	b.n	800173e <__swsetup_r+0xba>
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <__swsetup_r+0xd4>)
 80016c2:	429c      	cmp	r4, r3
 80016c4:	d101      	bne.n	80016ca <__swsetup_r+0x46>
 80016c6:	68ac      	ldr	r4, [r5, #8]
 80016c8:	e7eb      	b.n	80016a2 <__swsetup_r+0x1e>
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <__swsetup_r+0xd8>)
 80016cc:	429c      	cmp	r4, r3
 80016ce:	bf08      	it	eq
 80016d0:	68ec      	ldreq	r4, [r5, #12]
 80016d2:	e7e6      	b.n	80016a2 <__swsetup_r+0x1e>
 80016d4:	0751      	lsls	r1, r2, #29
 80016d6:	d512      	bpl.n	80016fe <__swsetup_r+0x7a>
 80016d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016da:	b141      	cbz	r1, 80016ee <__swsetup_r+0x6a>
 80016dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016e0:	4299      	cmp	r1, r3
 80016e2:	d002      	beq.n	80016ea <__swsetup_r+0x66>
 80016e4:	4630      	mov	r0, r6
 80016e6:	f000 fa19 	bl	8001b1c <_free_r>
 80016ea:	2300      	movs	r3, #0
 80016ec:	6363      	str	r3, [r4, #52]	; 0x34
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	6063      	str	r3, [r4, #4]
 80016fa:	6923      	ldr	r3, [r4, #16]
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	81a3      	strh	r3, [r4, #12]
 8001706:	6923      	ldr	r3, [r4, #16]
 8001708:	b94b      	cbnz	r3, 800171e <__swsetup_r+0x9a>
 800170a:	89a3      	ldrh	r3, [r4, #12]
 800170c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001714:	d003      	beq.n	800171e <__swsetup_r+0x9a>
 8001716:	4621      	mov	r1, r4
 8001718:	4630      	mov	r0, r6
 800171a:	f000 f9bf 	bl	8001a9c <__smakebuf_r>
 800171e:	89a2      	ldrh	r2, [r4, #12]
 8001720:	f012 0301 	ands.w	r3, r2, #1
 8001724:	d00c      	beq.n	8001740 <__swsetup_r+0xbc>
 8001726:	2300      	movs	r3, #0
 8001728:	60a3      	str	r3, [r4, #8]
 800172a:	6963      	ldr	r3, [r4, #20]
 800172c:	425b      	negs	r3, r3
 800172e:	61a3      	str	r3, [r4, #24]
 8001730:	6923      	ldr	r3, [r4, #16]
 8001732:	b953      	cbnz	r3, 800174a <__swsetup_r+0xc6>
 8001734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001738:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800173c:	d1ba      	bne.n	80016b4 <__swsetup_r+0x30>
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	0792      	lsls	r2, r2, #30
 8001742:	bf58      	it	pl
 8001744:	6963      	ldrpl	r3, [r4, #20]
 8001746:	60a3      	str	r3, [r4, #8]
 8001748:	e7f2      	b.n	8001730 <__swsetup_r+0xac>
 800174a:	2000      	movs	r0, #0
 800174c:	e7f7      	b.n	800173e <__swsetup_r+0xba>
 800174e:	bf00      	nop
 8001750:	2000001c 	.word	0x2000001c
 8001754:	08002060 	.word	0x08002060
 8001758:	08002080 	.word	0x08002080
 800175c:	08002040 	.word	0x08002040

08001760 <__sflush_r>:
 8001760:	898a      	ldrh	r2, [r1, #12]
 8001762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001766:	4605      	mov	r5, r0
 8001768:	0710      	lsls	r0, r2, #28
 800176a:	460c      	mov	r4, r1
 800176c:	d458      	bmi.n	8001820 <__sflush_r+0xc0>
 800176e:	684b      	ldr	r3, [r1, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	dc05      	bgt.n	8001780 <__sflush_r+0x20>
 8001774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc02      	bgt.n	8001780 <__sflush_r+0x20>
 800177a:	2000      	movs	r0, #0
 800177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001782:	2e00      	cmp	r6, #0
 8001784:	d0f9      	beq.n	800177a <__sflush_r+0x1a>
 8001786:	2300      	movs	r3, #0
 8001788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800178c:	682f      	ldr	r7, [r5, #0]
 800178e:	6a21      	ldr	r1, [r4, #32]
 8001790:	602b      	str	r3, [r5, #0]
 8001792:	d032      	beq.n	80017fa <__sflush_r+0x9a>
 8001794:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	075a      	lsls	r2, r3, #29
 800179a:	d505      	bpl.n	80017a8 <__sflush_r+0x48>
 800179c:	6863      	ldr	r3, [r4, #4]
 800179e:	1ac0      	subs	r0, r0, r3
 80017a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017a2:	b10b      	cbz	r3, 80017a8 <__sflush_r+0x48>
 80017a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017a6:	1ac0      	subs	r0, r0, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	4602      	mov	r2, r0
 80017ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ae:	6a21      	ldr	r1, [r4, #32]
 80017b0:	4628      	mov	r0, r5
 80017b2:	47b0      	blx	r6
 80017b4:	1c43      	adds	r3, r0, #1
 80017b6:	89a3      	ldrh	r3, [r4, #12]
 80017b8:	d106      	bne.n	80017c8 <__sflush_r+0x68>
 80017ba:	6829      	ldr	r1, [r5, #0]
 80017bc:	291d      	cmp	r1, #29
 80017be:	d848      	bhi.n	8001852 <__sflush_r+0xf2>
 80017c0:	4a29      	ldr	r2, [pc, #164]	; (8001868 <__sflush_r+0x108>)
 80017c2:	40ca      	lsrs	r2, r1
 80017c4:	07d6      	lsls	r6, r2, #31
 80017c6:	d544      	bpl.n	8001852 <__sflush_r+0xf2>
 80017c8:	2200      	movs	r2, #0
 80017ca:	6062      	str	r2, [r4, #4]
 80017cc:	04d9      	lsls	r1, r3, #19
 80017ce:	6922      	ldr	r2, [r4, #16]
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	d504      	bpl.n	80017de <__sflush_r+0x7e>
 80017d4:	1c42      	adds	r2, r0, #1
 80017d6:	d101      	bne.n	80017dc <__sflush_r+0x7c>
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	b903      	cbnz	r3, 80017de <__sflush_r+0x7e>
 80017dc:	6560      	str	r0, [r4, #84]	; 0x54
 80017de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017e0:	602f      	str	r7, [r5, #0]
 80017e2:	2900      	cmp	r1, #0
 80017e4:	d0c9      	beq.n	800177a <__sflush_r+0x1a>
 80017e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017ea:	4299      	cmp	r1, r3
 80017ec:	d002      	beq.n	80017f4 <__sflush_r+0x94>
 80017ee:	4628      	mov	r0, r5
 80017f0:	f000 f994 	bl	8001b1c <_free_r>
 80017f4:	2000      	movs	r0, #0
 80017f6:	6360      	str	r0, [r4, #52]	; 0x34
 80017f8:	e7c0      	b.n	800177c <__sflush_r+0x1c>
 80017fa:	2301      	movs	r3, #1
 80017fc:	4628      	mov	r0, r5
 80017fe:	47b0      	blx	r6
 8001800:	1c41      	adds	r1, r0, #1
 8001802:	d1c8      	bne.n	8001796 <__sflush_r+0x36>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0c5      	beq.n	8001796 <__sflush_r+0x36>
 800180a:	2b1d      	cmp	r3, #29
 800180c:	d001      	beq.n	8001812 <__sflush_r+0xb2>
 800180e:	2b16      	cmp	r3, #22
 8001810:	d101      	bne.n	8001816 <__sflush_r+0xb6>
 8001812:	602f      	str	r7, [r5, #0]
 8001814:	e7b1      	b.n	800177a <__sflush_r+0x1a>
 8001816:	89a3      	ldrh	r3, [r4, #12]
 8001818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181c:	81a3      	strh	r3, [r4, #12]
 800181e:	e7ad      	b.n	800177c <__sflush_r+0x1c>
 8001820:	690f      	ldr	r7, [r1, #16]
 8001822:	2f00      	cmp	r7, #0
 8001824:	d0a9      	beq.n	800177a <__sflush_r+0x1a>
 8001826:	0793      	lsls	r3, r2, #30
 8001828:	680e      	ldr	r6, [r1, #0]
 800182a:	bf08      	it	eq
 800182c:	694b      	ldreq	r3, [r1, #20]
 800182e:	600f      	str	r7, [r1, #0]
 8001830:	bf18      	it	ne
 8001832:	2300      	movne	r3, #0
 8001834:	eba6 0807 	sub.w	r8, r6, r7
 8001838:	608b      	str	r3, [r1, #8]
 800183a:	f1b8 0f00 	cmp.w	r8, #0
 800183e:	dd9c      	ble.n	800177a <__sflush_r+0x1a>
 8001840:	4643      	mov	r3, r8
 8001842:	463a      	mov	r2, r7
 8001844:	6a21      	ldr	r1, [r4, #32]
 8001846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001848:	4628      	mov	r0, r5
 800184a:	47b0      	blx	r6
 800184c:	2800      	cmp	r0, #0
 800184e:	dc06      	bgt.n	800185e <__sflush_r+0xfe>
 8001850:	89a3      	ldrh	r3, [r4, #12]
 8001852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001856:	81a3      	strh	r3, [r4, #12]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	e78e      	b.n	800177c <__sflush_r+0x1c>
 800185e:	4407      	add	r7, r0
 8001860:	eba8 0800 	sub.w	r8, r8, r0
 8001864:	e7e9      	b.n	800183a <__sflush_r+0xda>
 8001866:	bf00      	nop
 8001868:	20400001 	.word	0x20400001

0800186c <_fflush_r>:
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	690b      	ldr	r3, [r1, #16]
 8001870:	4605      	mov	r5, r0
 8001872:	460c      	mov	r4, r1
 8001874:	b1db      	cbz	r3, 80018ae <_fflush_r+0x42>
 8001876:	b118      	cbz	r0, 8001880 <_fflush_r+0x14>
 8001878:	6983      	ldr	r3, [r0, #24]
 800187a:	b90b      	cbnz	r3, 8001880 <_fflush_r+0x14>
 800187c:	f000 f860 	bl	8001940 <__sinit>
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <_fflush_r+0x48>)
 8001882:	429c      	cmp	r4, r3
 8001884:	d109      	bne.n	800189a <_fflush_r+0x2e>
 8001886:	686c      	ldr	r4, [r5, #4]
 8001888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800188c:	b17b      	cbz	r3, 80018ae <_fflush_r+0x42>
 800188e:	4621      	mov	r1, r4
 8001890:	4628      	mov	r0, r5
 8001892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001896:	f7ff bf63 	b.w	8001760 <__sflush_r>
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_fflush_r+0x4c>)
 800189c:	429c      	cmp	r4, r3
 800189e:	d101      	bne.n	80018a4 <_fflush_r+0x38>
 80018a0:	68ac      	ldr	r4, [r5, #8]
 80018a2:	e7f1      	b.n	8001888 <_fflush_r+0x1c>
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <_fflush_r+0x50>)
 80018a6:	429c      	cmp	r4, r3
 80018a8:	bf08      	it	eq
 80018aa:	68ec      	ldreq	r4, [r5, #12]
 80018ac:	e7ec      	b.n	8001888 <_fflush_r+0x1c>
 80018ae:	2000      	movs	r0, #0
 80018b0:	bd38      	pop	{r3, r4, r5, pc}
 80018b2:	bf00      	nop
 80018b4:	08002060 	.word	0x08002060
 80018b8:	08002080 	.word	0x08002080
 80018bc:	08002040 	.word	0x08002040

080018c0 <std>:
 80018c0:	2300      	movs	r3, #0
 80018c2:	b510      	push	{r4, lr}
 80018c4:	4604      	mov	r4, r0
 80018c6:	e9c0 3300 	strd	r3, r3, [r0]
 80018ca:	6083      	str	r3, [r0, #8]
 80018cc:	8181      	strh	r1, [r0, #12]
 80018ce:	6643      	str	r3, [r0, #100]	; 0x64
 80018d0:	81c2      	strh	r2, [r0, #14]
 80018d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018d6:	6183      	str	r3, [r0, #24]
 80018d8:	4619      	mov	r1, r3
 80018da:	2208      	movs	r2, #8
 80018dc:	305c      	adds	r0, #92	; 0x5c
 80018de:	f7ff fb15 	bl	8000f0c <memset>
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <std+0x38>)
 80018e4:	6263      	str	r3, [r4, #36]	; 0x24
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <std+0x3c>)
 80018e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <std+0x40>)
 80018ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <std+0x44>)
 80018f0:	6224      	str	r4, [r4, #32]
 80018f2:	6323      	str	r3, [r4, #48]	; 0x30
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	bf00      	nop
 80018f8:	08001cf9 	.word	0x08001cf9
 80018fc:	08001d1b 	.word	0x08001d1b
 8001900:	08001d53 	.word	0x08001d53
 8001904:	08001d77 	.word	0x08001d77

08001908 <_cleanup_r>:
 8001908:	4901      	ldr	r1, [pc, #4]	; (8001910 <_cleanup_r+0x8>)
 800190a:	f000 b885 	b.w	8001a18 <_fwalk_reent>
 800190e:	bf00      	nop
 8001910:	0800186d 	.word	0x0800186d

08001914 <__sfmoreglue>:
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	1e4a      	subs	r2, r1, #1
 8001918:	2568      	movs	r5, #104	; 0x68
 800191a:	4355      	muls	r5, r2
 800191c:	460e      	mov	r6, r1
 800191e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001922:	f000 f949 	bl	8001bb8 <_malloc_r>
 8001926:	4604      	mov	r4, r0
 8001928:	b140      	cbz	r0, 800193c <__sfmoreglue+0x28>
 800192a:	2100      	movs	r1, #0
 800192c:	e9c0 1600 	strd	r1, r6, [r0]
 8001930:	300c      	adds	r0, #12
 8001932:	60a0      	str	r0, [r4, #8]
 8001934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001938:	f7ff fae8 	bl	8000f0c <memset>
 800193c:	4620      	mov	r0, r4
 800193e:	bd70      	pop	{r4, r5, r6, pc}

08001940 <__sinit>:
 8001940:	6983      	ldr	r3, [r0, #24]
 8001942:	b510      	push	{r4, lr}
 8001944:	4604      	mov	r4, r0
 8001946:	bb33      	cbnz	r3, 8001996 <__sinit+0x56>
 8001948:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800194c:	6503      	str	r3, [r0, #80]	; 0x50
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <__sinit+0x58>)
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <__sinit+0x5c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6282      	str	r2, [r0, #40]	; 0x28
 8001956:	4298      	cmp	r0, r3
 8001958:	bf04      	itt	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	6183      	streq	r3, [r0, #24]
 800195e:	f000 f81f 	bl	80019a0 <__sfp>
 8001962:	6060      	str	r0, [r4, #4]
 8001964:	4620      	mov	r0, r4
 8001966:	f000 f81b 	bl	80019a0 <__sfp>
 800196a:	60a0      	str	r0, [r4, #8]
 800196c:	4620      	mov	r0, r4
 800196e:	f000 f817 	bl	80019a0 <__sfp>
 8001972:	2200      	movs	r2, #0
 8001974:	60e0      	str	r0, [r4, #12]
 8001976:	2104      	movs	r1, #4
 8001978:	6860      	ldr	r0, [r4, #4]
 800197a:	f7ff ffa1 	bl	80018c0 <std>
 800197e:	2201      	movs	r2, #1
 8001980:	2109      	movs	r1, #9
 8001982:	68a0      	ldr	r0, [r4, #8]
 8001984:	f7ff ff9c 	bl	80018c0 <std>
 8001988:	2202      	movs	r2, #2
 800198a:	2112      	movs	r1, #18
 800198c:	68e0      	ldr	r0, [r4, #12]
 800198e:	f7ff ff97 	bl	80018c0 <std>
 8001992:	2301      	movs	r3, #1
 8001994:	61a3      	str	r3, [r4, #24]
 8001996:	bd10      	pop	{r4, pc}
 8001998:	08002008 	.word	0x08002008
 800199c:	08001909 	.word	0x08001909

080019a0 <__sfp>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <__sfp+0x70>)
 80019a4:	681e      	ldr	r6, [r3, #0]
 80019a6:	69b3      	ldr	r3, [r6, #24]
 80019a8:	4607      	mov	r7, r0
 80019aa:	b913      	cbnz	r3, 80019b2 <__sfp+0x12>
 80019ac:	4630      	mov	r0, r6
 80019ae:	f7ff ffc7 	bl	8001940 <__sinit>
 80019b2:	3648      	adds	r6, #72	; 0x48
 80019b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	d503      	bpl.n	80019c4 <__sfp+0x24>
 80019bc:	6833      	ldr	r3, [r6, #0]
 80019be:	b133      	cbz	r3, 80019ce <__sfp+0x2e>
 80019c0:	6836      	ldr	r6, [r6, #0]
 80019c2:	e7f7      	b.n	80019b4 <__sfp+0x14>
 80019c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019c8:	b16d      	cbz	r5, 80019e6 <__sfp+0x46>
 80019ca:	3468      	adds	r4, #104	; 0x68
 80019cc:	e7f4      	b.n	80019b8 <__sfp+0x18>
 80019ce:	2104      	movs	r1, #4
 80019d0:	4638      	mov	r0, r7
 80019d2:	f7ff ff9f 	bl	8001914 <__sfmoreglue>
 80019d6:	6030      	str	r0, [r6, #0]
 80019d8:	2800      	cmp	r0, #0
 80019da:	d1f1      	bne.n	80019c0 <__sfp+0x20>
 80019dc:	230c      	movs	r3, #12
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4604      	mov	r4, r0
 80019e2:	4620      	mov	r0, r4
 80019e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <__sfp+0x74>)
 80019e8:	6665      	str	r5, [r4, #100]	; 0x64
 80019ea:	e9c4 5500 	strd	r5, r5, [r4]
 80019ee:	60a5      	str	r5, [r4, #8]
 80019f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80019f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80019f8:	2208      	movs	r2, #8
 80019fa:	4629      	mov	r1, r5
 80019fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a00:	f7ff fa84 	bl	8000f0c <memset>
 8001a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a0c:	e7e9      	b.n	80019e2 <__sfp+0x42>
 8001a0e:	bf00      	nop
 8001a10:	08002008 	.word	0x08002008
 8001a14:	ffff0001 	.word	0xffff0001

08001a18 <_fwalk_reent>:
 8001a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	4680      	mov	r8, r0
 8001a1e:	4689      	mov	r9, r1
 8001a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a24:	2600      	movs	r6, #0
 8001a26:	b914      	cbnz	r4, 8001a2e <_fwalk_reent+0x16>
 8001a28:	4630      	mov	r0, r6
 8001a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a32:	3f01      	subs	r7, #1
 8001a34:	d501      	bpl.n	8001a3a <_fwalk_reent+0x22>
 8001a36:	6824      	ldr	r4, [r4, #0]
 8001a38:	e7f5      	b.n	8001a26 <_fwalk_reent+0xe>
 8001a3a:	89ab      	ldrh	r3, [r5, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d907      	bls.n	8001a50 <_fwalk_reent+0x38>
 8001a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a44:	3301      	adds	r3, #1
 8001a46:	d003      	beq.n	8001a50 <_fwalk_reent+0x38>
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	47c8      	blx	r9
 8001a4e:	4306      	orrs	r6, r0
 8001a50:	3568      	adds	r5, #104	; 0x68
 8001a52:	e7ee      	b.n	8001a32 <_fwalk_reent+0x1a>

08001a54 <__swhatbuf_r>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	460e      	mov	r6, r1
 8001a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a5c:	2900      	cmp	r1, #0
 8001a5e:	b096      	sub	sp, #88	; 0x58
 8001a60:	4614      	mov	r4, r2
 8001a62:	461d      	mov	r5, r3
 8001a64:	da07      	bge.n	8001a76 <__swhatbuf_r+0x22>
 8001a66:	2300      	movs	r3, #0
 8001a68:	602b      	str	r3, [r5, #0]
 8001a6a:	89b3      	ldrh	r3, [r6, #12]
 8001a6c:	061a      	lsls	r2, r3, #24
 8001a6e:	d410      	bmi.n	8001a92 <__swhatbuf_r+0x3e>
 8001a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a74:	e00e      	b.n	8001a94 <__swhatbuf_r+0x40>
 8001a76:	466a      	mov	r2, sp
 8001a78:	f000 f9a4 	bl	8001dc4 <_fstat_r>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	dbf2      	blt.n	8001a66 <__swhatbuf_r+0x12>
 8001a80:	9a01      	ldr	r2, [sp, #4]
 8001a82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a8a:	425a      	negs	r2, r3
 8001a8c:	415a      	adcs	r2, r3
 8001a8e:	602a      	str	r2, [r5, #0]
 8001a90:	e7ee      	b.n	8001a70 <__swhatbuf_r+0x1c>
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	2000      	movs	r0, #0
 8001a96:	6023      	str	r3, [r4, #0]
 8001a98:	b016      	add	sp, #88	; 0x58
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}

08001a9c <__smakebuf_r>:
 8001a9c:	898b      	ldrh	r3, [r1, #12]
 8001a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001aa0:	079d      	lsls	r5, r3, #30
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	d507      	bpl.n	8001ab8 <__smakebuf_r+0x1c>
 8001aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	6123      	str	r3, [r4, #16]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	6163      	str	r3, [r4, #20]
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	ab01      	add	r3, sp, #4
 8001aba:	466a      	mov	r2, sp
 8001abc:	f7ff ffca 	bl	8001a54 <__swhatbuf_r>
 8001ac0:	9900      	ldr	r1, [sp, #0]
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f000 f877 	bl	8001bb8 <_malloc_r>
 8001aca:	b948      	cbnz	r0, 8001ae0 <__smakebuf_r+0x44>
 8001acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad0:	059a      	lsls	r2, r3, #22
 8001ad2:	d4ef      	bmi.n	8001ab4 <__smakebuf_r+0x18>
 8001ad4:	f023 0303 	bic.w	r3, r3, #3
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	81a3      	strh	r3, [r4, #12]
 8001ade:	e7e3      	b.n	8001aa8 <__smakebuf_r+0xc>
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <__smakebuf_r+0x7c>)
 8001ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	6020      	str	r0, [r4, #0]
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	81a3      	strh	r3, [r4, #12]
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	6163      	str	r3, [r4, #20]
 8001af2:	9b01      	ldr	r3, [sp, #4]
 8001af4:	6120      	str	r0, [r4, #16]
 8001af6:	b15b      	cbz	r3, 8001b10 <__smakebuf_r+0x74>
 8001af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 f973 	bl	8001de8 <_isatty_r>
 8001b02:	b128      	cbz	r0, 8001b10 <__smakebuf_r+0x74>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	81a3      	strh	r3, [r4, #12]
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	431d      	orrs	r5, r3
 8001b14:	81a5      	strh	r5, [r4, #12]
 8001b16:	e7cd      	b.n	8001ab4 <__smakebuf_r+0x18>
 8001b18:	08001909 	.word	0x08001909

08001b1c <_free_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	4605      	mov	r5, r0
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d045      	beq.n	8001bb0 <_free_r+0x94>
 8001b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b28:	1f0c      	subs	r4, r1, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bfb8      	it	lt
 8001b2e:	18e4      	addlt	r4, r4, r3
 8001b30:	f000 f97c 	bl	8001e2c <__malloc_lock>
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <_free_r+0x98>)
 8001b36:	6813      	ldr	r3, [r2, #0]
 8001b38:	4610      	mov	r0, r2
 8001b3a:	b933      	cbnz	r3, 8001b4a <_free_r+0x2e>
 8001b3c:	6063      	str	r3, [r4, #4]
 8001b3e:	6014      	str	r4, [r2, #0]
 8001b40:	4628      	mov	r0, r5
 8001b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b46:	f000 b972 	b.w	8001e2e <__malloc_unlock>
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	d90c      	bls.n	8001b68 <_free_r+0x4c>
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	1862      	adds	r2, r4, r1
 8001b52:	4293      	cmp	r3, r2
 8001b54:	bf04      	itt	eq
 8001b56:	681a      	ldreq	r2, [r3, #0]
 8001b58:	685b      	ldreq	r3, [r3, #4]
 8001b5a:	6063      	str	r3, [r4, #4]
 8001b5c:	bf04      	itt	eq
 8001b5e:	1852      	addeq	r2, r2, r1
 8001b60:	6022      	streq	r2, [r4, #0]
 8001b62:	6004      	str	r4, [r0, #0]
 8001b64:	e7ec      	b.n	8001b40 <_free_r+0x24>
 8001b66:	4613      	mov	r3, r2
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	b10a      	cbz	r2, 8001b70 <_free_r+0x54>
 8001b6c:	42a2      	cmp	r2, r4
 8001b6e:	d9fa      	bls.n	8001b66 <_free_r+0x4a>
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	1858      	adds	r0, r3, r1
 8001b74:	42a0      	cmp	r0, r4
 8001b76:	d10b      	bne.n	8001b90 <_free_r+0x74>
 8001b78:	6820      	ldr	r0, [r4, #0]
 8001b7a:	4401      	add	r1, r0
 8001b7c:	1858      	adds	r0, r3, r1
 8001b7e:	4282      	cmp	r2, r0
 8001b80:	6019      	str	r1, [r3, #0]
 8001b82:	d1dd      	bne.n	8001b40 <_free_r+0x24>
 8001b84:	6810      	ldr	r0, [r2, #0]
 8001b86:	6852      	ldr	r2, [r2, #4]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	4401      	add	r1, r0
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	e7d7      	b.n	8001b40 <_free_r+0x24>
 8001b90:	d902      	bls.n	8001b98 <_free_r+0x7c>
 8001b92:	230c      	movs	r3, #12
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	e7d3      	b.n	8001b40 <_free_r+0x24>
 8001b98:	6820      	ldr	r0, [r4, #0]
 8001b9a:	1821      	adds	r1, r4, r0
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	bf04      	itt	eq
 8001ba0:	6811      	ldreq	r1, [r2, #0]
 8001ba2:	6852      	ldreq	r2, [r2, #4]
 8001ba4:	6062      	str	r2, [r4, #4]
 8001ba6:	bf04      	itt	eq
 8001ba8:	1809      	addeq	r1, r1, r0
 8001baa:	6021      	streq	r1, [r4, #0]
 8001bac:	605c      	str	r4, [r3, #4]
 8001bae:	e7c7      	b.n	8001b40 <_free_r+0x24>
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000a0 	.word	0x200000a0

08001bb8 <_malloc_r>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	1ccd      	adds	r5, r1, #3
 8001bbc:	f025 0503 	bic.w	r5, r5, #3
 8001bc0:	3508      	adds	r5, #8
 8001bc2:	2d0c      	cmp	r5, #12
 8001bc4:	bf38      	it	cc
 8001bc6:	250c      	movcc	r5, #12
 8001bc8:	2d00      	cmp	r5, #0
 8001bca:	4606      	mov	r6, r0
 8001bcc:	db01      	blt.n	8001bd2 <_malloc_r+0x1a>
 8001bce:	42a9      	cmp	r1, r5
 8001bd0:	d903      	bls.n	8001bda <_malloc_r+0x22>
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	6033      	str	r3, [r6, #0]
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	f000 f927 	bl	8001e2c <__malloc_lock>
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <_malloc_r+0xac>)
 8001be0:	6814      	ldr	r4, [r2, #0]
 8001be2:	4621      	mov	r1, r4
 8001be4:	b991      	cbnz	r1, 8001c0c <_malloc_r+0x54>
 8001be6:	4c20      	ldr	r4, [pc, #128]	; (8001c68 <_malloc_r+0xb0>)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	b91b      	cbnz	r3, 8001bf4 <_malloc_r+0x3c>
 8001bec:	4630      	mov	r0, r6
 8001bee:	f000 f873 	bl	8001cd8 <_sbrk_r>
 8001bf2:	6020      	str	r0, [r4, #0]
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f000 f86e 	bl	8001cd8 <_sbrk_r>
 8001bfc:	1c43      	adds	r3, r0, #1
 8001bfe:	d124      	bne.n	8001c4a <_malloc_r+0x92>
 8001c00:	230c      	movs	r3, #12
 8001c02:	6033      	str	r3, [r6, #0]
 8001c04:	4630      	mov	r0, r6
 8001c06:	f000 f912 	bl	8001e2e <__malloc_unlock>
 8001c0a:	e7e4      	b.n	8001bd6 <_malloc_r+0x1e>
 8001c0c:	680b      	ldr	r3, [r1, #0]
 8001c0e:	1b5b      	subs	r3, r3, r5
 8001c10:	d418      	bmi.n	8001c44 <_malloc_r+0x8c>
 8001c12:	2b0b      	cmp	r3, #11
 8001c14:	d90f      	bls.n	8001c36 <_malloc_r+0x7e>
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	50cd      	str	r5, [r1, r3]
 8001c1a:	18cc      	adds	r4, r1, r3
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f000 f906 	bl	8001e2e <__malloc_unlock>
 8001c22:	f104 000b 	add.w	r0, r4, #11
 8001c26:	1d23      	adds	r3, r4, #4
 8001c28:	f020 0007 	bic.w	r0, r0, #7
 8001c2c:	1ac3      	subs	r3, r0, r3
 8001c2e:	d0d3      	beq.n	8001bd8 <_malloc_r+0x20>
 8001c30:	425a      	negs	r2, r3
 8001c32:	50e2      	str	r2, [r4, r3]
 8001c34:	e7d0      	b.n	8001bd8 <_malloc_r+0x20>
 8001c36:	428c      	cmp	r4, r1
 8001c38:	684b      	ldr	r3, [r1, #4]
 8001c3a:	bf16      	itet	ne
 8001c3c:	6063      	strne	r3, [r4, #4]
 8001c3e:	6013      	streq	r3, [r2, #0]
 8001c40:	460c      	movne	r4, r1
 8001c42:	e7eb      	b.n	8001c1c <_malloc_r+0x64>
 8001c44:	460c      	mov	r4, r1
 8001c46:	6849      	ldr	r1, [r1, #4]
 8001c48:	e7cc      	b.n	8001be4 <_malloc_r+0x2c>
 8001c4a:	1cc4      	adds	r4, r0, #3
 8001c4c:	f024 0403 	bic.w	r4, r4, #3
 8001c50:	42a0      	cmp	r0, r4
 8001c52:	d005      	beq.n	8001c60 <_malloc_r+0xa8>
 8001c54:	1a21      	subs	r1, r4, r0
 8001c56:	4630      	mov	r0, r6
 8001c58:	f000 f83e 	bl	8001cd8 <_sbrk_r>
 8001c5c:	3001      	adds	r0, #1
 8001c5e:	d0cf      	beq.n	8001c00 <_malloc_r+0x48>
 8001c60:	6025      	str	r5, [r4, #0]
 8001c62:	e7db      	b.n	8001c1c <_malloc_r+0x64>
 8001c64:	200000a0 	.word	0x200000a0
 8001c68:	200000a4 	.word	0x200000a4

08001c6c <_putc_r>:
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	460d      	mov	r5, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	4606      	mov	r6, r0
 8001c74:	b118      	cbz	r0, 8001c7e <_putc_r+0x12>
 8001c76:	6983      	ldr	r3, [r0, #24]
 8001c78:	b90b      	cbnz	r3, 8001c7e <_putc_r+0x12>
 8001c7a:	f7ff fe61 	bl	8001940 <__sinit>
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_putc_r+0x60>)
 8001c80:	429c      	cmp	r4, r3
 8001c82:	d112      	bne.n	8001caa <_putc_r+0x3e>
 8001c84:	6874      	ldr	r4, [r6, #4]
 8001c86:	68a3      	ldr	r3, [r4, #8]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	60a3      	str	r3, [r4, #8]
 8001c8e:	da16      	bge.n	8001cbe <_putc_r+0x52>
 8001c90:	69a2      	ldr	r2, [r4, #24]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	db02      	blt.n	8001c9c <_putc_r+0x30>
 8001c96:	b2eb      	uxtb	r3, r5
 8001c98:	2b0a      	cmp	r3, #10
 8001c9a:	d110      	bne.n	8001cbe <_putc_r+0x52>
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ca6:	f7ff bc9b 	b.w	80015e0 <__swbuf_r>
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <_putc_r+0x64>)
 8001cac:	429c      	cmp	r4, r3
 8001cae:	d101      	bne.n	8001cb4 <_putc_r+0x48>
 8001cb0:	68b4      	ldr	r4, [r6, #8]
 8001cb2:	e7e8      	b.n	8001c86 <_putc_r+0x1a>
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_putc_r+0x68>)
 8001cb6:	429c      	cmp	r4, r3
 8001cb8:	bf08      	it	eq
 8001cba:	68f4      	ldreq	r4, [r6, #12]
 8001cbc:	e7e3      	b.n	8001c86 <_putc_r+0x1a>
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	6022      	str	r2, [r4, #0]
 8001cc4:	701d      	strb	r5, [r3, #0]
 8001cc6:	b2e8      	uxtb	r0, r5
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
 8001cca:	bf00      	nop
 8001ccc:	08002060 	.word	0x08002060
 8001cd0:	08002080 	.word	0x08002080
 8001cd4:	08002040 	.word	0x08002040

08001cd8 <_sbrk_r>:
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4c06      	ldr	r4, [pc, #24]	; (8001cf4 <_sbrk_r+0x1c>)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4605      	mov	r5, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	6023      	str	r3, [r4, #0]
 8001ce4:	f000 f8de 	bl	8001ea4 <_sbrk>
 8001ce8:	1c43      	adds	r3, r0, #1
 8001cea:	d102      	bne.n	8001cf2 <_sbrk_r+0x1a>
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	b103      	cbz	r3, 8001cf2 <_sbrk_r+0x1a>
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
 8001cf4:	200000e0 	.word	0x200000e0

08001cf8 <__sread>:
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d00:	f000 f896 	bl	8001e30 <_read_r>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	bfab      	itete	ge
 8001d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8001d0c:	181b      	addge	r3, r3, r0
 8001d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d12:	bfac      	ite	ge
 8001d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d16:	81a3      	strhlt	r3, [r4, #12]
 8001d18:	bd10      	pop	{r4, pc}

08001d1a <__swrite>:
 8001d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1e:	461f      	mov	r7, r3
 8001d20:	898b      	ldrh	r3, [r1, #12]
 8001d22:	05db      	lsls	r3, r3, #23
 8001d24:	4605      	mov	r5, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	4616      	mov	r6, r2
 8001d2a:	d505      	bpl.n	8001d38 <__swrite+0x1e>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d34:	f000 f868 	bl	8001e08 <_lseek_r>
 8001d38:	89a3      	ldrh	r3, [r4, #12]
 8001d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d42:	81a3      	strh	r3, [r4, #12]
 8001d44:	4632      	mov	r2, r6
 8001d46:	463b      	mov	r3, r7
 8001d48:	4628      	mov	r0, r5
 8001d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d4e:	f000 b817 	b.w	8001d80 <_write_r>

08001d52 <__sseek>:
 8001d52:	b510      	push	{r4, lr}
 8001d54:	460c      	mov	r4, r1
 8001d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d5a:	f000 f855 	bl	8001e08 <_lseek_r>
 8001d5e:	1c43      	adds	r3, r0, #1
 8001d60:	89a3      	ldrh	r3, [r4, #12]
 8001d62:	bf15      	itete	ne
 8001d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d6e:	81a3      	strheq	r3, [r4, #12]
 8001d70:	bf18      	it	ne
 8001d72:	81a3      	strhne	r3, [r4, #12]
 8001d74:	bd10      	pop	{r4, pc}

08001d76 <__sclose>:
 8001d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7a:	f000 b813 	b.w	8001da4 <_close_r>
	...

08001d80 <_write_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4c07      	ldr	r4, [pc, #28]	; (8001da0 <_write_r+0x20>)
 8001d84:	4605      	mov	r5, r0
 8001d86:	4608      	mov	r0, r1
 8001d88:	4611      	mov	r1, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	6022      	str	r2, [r4, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f7fe faa5 	bl	80002de <_write>
 8001d94:	1c43      	adds	r3, r0, #1
 8001d96:	d102      	bne.n	8001d9e <_write_r+0x1e>
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	b103      	cbz	r3, 8001d9e <_write_r+0x1e>
 8001d9c:	602b      	str	r3, [r5, #0]
 8001d9e:	bd38      	pop	{r3, r4, r5, pc}
 8001da0:	200000e0 	.word	0x200000e0

08001da4 <_close_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	4c06      	ldr	r4, [pc, #24]	; (8001dc0 <_close_r+0x1c>)
 8001da8:	2300      	movs	r3, #0
 8001daa:	4605      	mov	r5, r0
 8001dac:	4608      	mov	r0, r1
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	f000 f850 	bl	8001e54 <_close>
 8001db4:	1c43      	adds	r3, r0, #1
 8001db6:	d102      	bne.n	8001dbe <_close_r+0x1a>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	b103      	cbz	r3, 8001dbe <_close_r+0x1a>
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	200000e0 	.word	0x200000e0

08001dc4 <_fstat_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4c07      	ldr	r4, [pc, #28]	; (8001de4 <_fstat_r+0x20>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4605      	mov	r5, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	f000 f847 	bl	8001e64 <_fstat>
 8001dd6:	1c43      	adds	r3, r0, #1
 8001dd8:	d102      	bne.n	8001de0 <_fstat_r+0x1c>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	b103      	cbz	r3, 8001de0 <_fstat_r+0x1c>
 8001dde:	602b      	str	r3, [r5, #0]
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	200000e0 	.word	0x200000e0

08001de8 <_isatty_r>:
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	4c06      	ldr	r4, [pc, #24]	; (8001e04 <_isatty_r+0x1c>)
 8001dec:	2300      	movs	r3, #0
 8001dee:	4605      	mov	r5, r0
 8001df0:	4608      	mov	r0, r1
 8001df2:	6023      	str	r3, [r4, #0]
 8001df4:	f000 f83e 	bl	8001e74 <_isatty>
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d102      	bne.n	8001e02 <_isatty_r+0x1a>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	b103      	cbz	r3, 8001e02 <_isatty_r+0x1a>
 8001e00:	602b      	str	r3, [r5, #0]
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	200000e0 	.word	0x200000e0

08001e08 <_lseek_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4c07      	ldr	r4, [pc, #28]	; (8001e28 <_lseek_r+0x20>)
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	4608      	mov	r0, r1
 8001e10:	4611      	mov	r1, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	6022      	str	r2, [r4, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f000 f834 	bl	8001e84 <_lseek>
 8001e1c:	1c43      	adds	r3, r0, #1
 8001e1e:	d102      	bne.n	8001e26 <_lseek_r+0x1e>
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	b103      	cbz	r3, 8001e26 <_lseek_r+0x1e>
 8001e24:	602b      	str	r3, [r5, #0]
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
 8001e28:	200000e0 	.word	0x200000e0

08001e2c <__malloc_lock>:
 8001e2c:	4770      	bx	lr

08001e2e <__malloc_unlock>:
 8001e2e:	4770      	bx	lr

08001e30 <_read_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4c07      	ldr	r4, [pc, #28]	; (8001e50 <_read_r+0x20>)
 8001e34:	4605      	mov	r5, r0
 8001e36:	4608      	mov	r0, r1
 8001e38:	4611      	mov	r1, r2
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	6022      	str	r2, [r4, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f000 f828 	bl	8001e94 <_read>
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	d102      	bne.n	8001e4e <_read_r+0x1e>
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	b103      	cbz	r3, 8001e4e <_read_r+0x1e>
 8001e4c:	602b      	str	r3, [r5, #0]
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
 8001e50:	200000e0 	.word	0x200000e0

08001e54 <_close>:
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <_close+0xc>)
 8001e56:	2258      	movs	r2, #88	; 0x58
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5e:	4770      	bx	lr
 8001e60:	200000e0 	.word	0x200000e0

08001e64 <_fstat>:
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <_fstat+0xc>)
 8001e66:	2258      	movs	r2, #88	; 0x58
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e6e:	4770      	bx	lr
 8001e70:	200000e0 	.word	0x200000e0

08001e74 <_isatty>:
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <_isatty+0xc>)
 8001e76:	2258      	movs	r2, #88	; 0x58
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200000e0 	.word	0x200000e0

08001e84 <_lseek>:
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <_lseek+0xc>)
 8001e86:	2258      	movs	r2, #88	; 0x58
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e8e:	4770      	bx	lr
 8001e90:	200000e0 	.word	0x200000e0

08001e94 <_read>:
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <_read+0xc>)
 8001e96:	2258      	movs	r2, #88	; 0x58
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e9e:	4770      	bx	lr
 8001ea0:	200000e0 	.word	0x200000e0

08001ea4 <_sbrk>:
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <_sbrk+0x14>)
 8001ea6:	6819      	ldr	r1, [r3, #0]
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	b909      	cbnz	r1, 8001eb0 <_sbrk+0xc>
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <_sbrk+0x18>)
 8001eae:	6019      	str	r1, [r3, #0]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	4402      	add	r2, r0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	4770      	bx	lr
 8001eb8:	200000a8 	.word	0x200000a8
 8001ebc:	200000e8 	.word	0x200000e8

08001ec0 <_init>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	bf00      	nop
 8001ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec6:	bc08      	pop	{r3}
 8001ec8:	469e      	mov	lr, r3
 8001eca:	4770      	bx	lr

08001ecc <_fini>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	bf00      	nop
 8001ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed2:	bc08      	pop	{r3}
 8001ed4:	469e      	mov	lr, r3
 8001ed6:	4770      	bx	lr

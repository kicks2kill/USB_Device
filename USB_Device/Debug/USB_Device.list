
USB_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08001cbc  08001cbc  00011cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e18  08001e18  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08001e18  08001e18  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e18  08001e18  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e18  08001e18  00011e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08001e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000080  08001ea0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001ea0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000282c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008f8  00000000  00000000  000228dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  000231d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000233a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212b2  00000000  00000000  00023520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001dfa  00000000  00000000  000447d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b545d  00000000  00000000  000465cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fba29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e48  00000000  00000000  000fbaa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  000fc8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000fc970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001ca4 	.word	0x08001ca4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08001ca4 	.word	0x08001ca4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d005      	beq.n	8000338 <_get_log_level_string+0x1c>
 800032c:	2b02      	cmp	r3, #2
 800032e:	d005      	beq.n	800033c <_get_log_level_string+0x20>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d105      	bne.n	8000340 <_get_log_level_string+0x24>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <_get_log_level_string+0x30>)
 8000336:	e003      	b.n	8000340 <_get_log_level_string+0x24>
        case LOG_LEVEL_INFORMATION:
            return "INFO";
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <_get_log_level_string+0x34>)
 800033a:	e001      	b.n	8000340 <_get_log_level_string+0x24>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <_get_log_level_string+0x38>)
 800033e:	e7ff      	b.n	8000340 <_get_log_level_string+0x24>
    }
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	08001cbc 	.word	0x08001cbc
 8000350:	08001cc4 	.word	0x08001cc4
 8000354:	08001ccc 	.word	0x08001ccc

08000358 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level)
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <_log+0x4c>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	7bfa      	ldrb	r2, [r7, #15]
 800036c:	429a      	cmp	r2, r3
 800036e:	d814      	bhi.n	800039a <_log+0x42>
        return;

	printf("[%s] ", _get_log_level_string(log_level));
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffd2 	bl	800031c <_get_log_level_string>
 8000378:	4603      	mov	r3, r0
 800037a:	4619      	mov	r1, r3
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <_log+0x50>)
 800037e:	f000 fff5 	bl	800136c <iprintf>
	vfprintf(stdout, format, args);
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <_log+0x54>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	68b9      	ldr	r1, [r7, #8]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fe5b 	bl	8001048 <vfiprintf>
	printf("\n");
 8000392:	200a      	movs	r0, #10
 8000394:	f001 f802 	bl	800139c <putchar>
 8000398:	e000      	b.n	800039c <_log+0x44>
        return;
 800039a:	bf00      	nop
}
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	08001cd4 	.word	0x08001cd4
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003b0:	b40f      	push	{r0, r1, r2, r3}
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	6939      	ldr	r1, [r7, #16]
 80003c2:	2001      	movs	r0, #1
 80003c4:	f7ff ffc8 	bl	8000358 <_log>
    va_end(args);
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003d2:	b004      	add	sp, #16
 80003d4:	4770      	bx	lr
	...

080003d8 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	log_info("Program entrypoint");
 80003dc:	4805      	ldr	r0, [pc, #20]	; (80003f4 <main+0x1c>)
 80003de:	f7ff ffe7 	bl	80003b0 <log_info>

	usb_device.ptr_out_buffer = &buffer;
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <main+0x20>)
 80003e4:	4a05      	ldr	r2, [pc, #20]	; (80003fc <main+0x24>)
 80003e6:	605a      	str	r2, [r3, #4]

	usbd_initialize(&usb_device);
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <main+0x20>)
 80003ea:	f000 fc3d 	bl	8000c68 <usbd_initialize>
	for(;;)
	{
		usbd_poll();
 80003ee:	f000 fc53 	bl	8000c98 <usbd_poll>
 80003f2:	e7fc      	b.n	80003ee <main+0x16>
 80003f4:	08001cfc 	.word	0x08001cfc
 80003f8:	200000ac 	.word	0x200000ac
 80003fc:	200000c0 	.word	0x200000c0

08000400 <configure_clock>:
LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 72000000; // 72 MHz


 static void configure_clock()
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	 MODIFY_REG(FLASH->ACR,
 8000404:	4b25      	ldr	r3, [pc, #148]	; (800049c <configure_clock+0x9c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f023 030f 	bic.w	r3, r3, #15
 800040c:	4a23      	ldr	r2, [pc, #140]	; (800049c <configure_clock+0x9c>)
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6013      	str	r3, [r2, #0]
			 FLASH_ACR_LATENCY,
			 _VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //bit-shift left by val; <<
			 );

	 //Enable HSE (RESET & CLOCK CONTROL REG)
	 SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <configure_clock+0xa0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <configure_clock+0xa0>)
 800041a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041e:	6013      	str	r3, [r2, #0]

	 //wait until HSE is stable and ready
	 while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 8000420:	bf00      	nop
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <configure_clock+0xa0>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <configure_clock+0x22>

	 //Configure PLL: source = HSE, SYSCLK = 72MHz
	 MODIFY_REG(RCC->PLLCFGR,
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <configure_clock+0xa0>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <configure_clock+0xa4>)
 8000434:	401a      	ands	r2, r3
 8000436:	491a      	ldr	r1, [pc, #104]	; (80004a0 <configure_clock+0xa0>)
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <configure_clock+0xa8>)
 800043a:	4313      	orrs	r3, r2
 800043c:	604b      	str	r3, [r1, #4]
			 RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
			 _VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | _VAL2FLD(RCC_PLLCFGR_PLLSRC, 1)
			 );

	 //Enable PLL module
	 SET_BIT(RCC->CR, RCC_CR_PLLON);
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <configure_clock+0xa0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <configure_clock+0xa0>)
 8000444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000448:	6013      	str	r3, [r2, #0]

	 //wait until PLL is stable
	 while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 800044a:	bf00      	nop
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <configure_clock+0xa0>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f9      	beq.n	800044c <configure_clock+0x4c>

	 //switch system clock to PLL
	 MODIFY_REG(RCC->CFGR,
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <configure_clock+0xa0>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	f023 0303 	bic.w	r3, r3, #3
 8000460:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <configure_clock+0xa0>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6093      	str	r3, [r2, #8]
			 RCC_CFGR_SW,
			 _VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
			 );

	 //configure the PPRE1
	 MODIFY_REG(RCC->CFGR,
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <configure_clock+0xa0>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000470:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <configure_clock+0xa0>)
 8000472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000476:	6093      	str	r3, [r2, #8]
			 RCC_CFGR_PPRE1,
			 _VAL2FLD(RCC_CFGR_PPRE1, 4)
			 );

	//wait until PLL is used
	 while( READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000478:	bf00      	nop
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <configure_clock+0xa0>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	f003 030c 	and.w	r3, r3, #12
 8000482:	2b08      	cmp	r3, #8
 8000484:	d1f9      	bne.n	800047a <configure_clock+0x7a>

	 CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <configure_clock+0xa0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <configure_clock+0xa0>)
 800048c:	f023 0301 	bic.w	r3, r3, #1
 8000490:	6013      	str	r3, [r2, #0]
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40023c00 	.word	0x40023c00
 80004a0:	40023800 	.word	0x40023800
 80004a4:	f0bc8000 	.word	0xf0bc8000
 80004a8:	03401204 	.word	0x03401204

080004ac <configure_mco1>:

 void configure_mco1()
 {
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	 //Configures MCO1: source = PLLCLK, MCO1PRE = 2
	 MODIFY_REG(RCC->CFGR,
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <configure_mco1+0x4c>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <configure_mco1+0x4c>)
 80004ba:	f043 638c 	orr.w	r3, r3, #73400320	; 0x4600000
 80004be:	6093      	str	r3, [r2, #8]
			 RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE,
			 _VAL2FLD(RCC_CFGR_MCO1, 3) | _VAL2FLD(RCC_CFGR_MCO1PRE,4)
	 );

	 //Enable GPIOA (MCO1 is connected to PA8);
	 SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <configure_mco1+0x4c>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <configure_mco1+0x4c>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30

	 //Medium Speed
	 MODIFY_REG(GPIOA->OSPEEDR,
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <configure_mco1+0x50>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80004d4:	4a09      	ldr	r2, [pc, #36]	; (80004fc <configure_mco1+0x50>)
 80004d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004da:	6093      	str	r3, [r2, #8]
			 GPIO_OSPEEDR_OSPEED8,
			 _VAL2FLD(GPIO_OSPEEDR_OSPEED8, 1)
	 );

	 //Configure PA8 to work in alternate function mode
	 MODIFY_REG(GPIOA->MODER,
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <configure_mco1+0x50>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <configure_mco1+0x50>)
 80004e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ea:	6013      	str	r3, [r2, #0]
			 GPIO_MODER_MODER8,
			 _VAL2FLD(GPIO_MODER_MODER8, 2)
	 );
 }
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40020000 	.word	0x40020000

08000500 <SystemInit>:

void SystemInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	configure_mco1();
 8000504:	f7ff ffd2 	bl	80004ac <configure_mco1>
	configure_clock();
 8000508:	f7ff ff7a 	bl	8000400 <configure_clock>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <IN_ENDPOINT>:
#define USB_OTG_HS_DEVICE ((USB_OTG_DeviceTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_DEVICE_BASE))
#define USB_OTG_HS_PCGCCTL ((uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_PCGCCTL_BASE))

//return structure containing the regs of a specific IN endpoint
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	015b      	lsls	r3, r3, #5
 800051e:	461a      	mov	r2, r3
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <IN_ENDPOINT+0x20>)
 8000522:	4413      	add	r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40040900 	.word	0x40040900

08000534 <OUT_ENDPOINT>:

//return structure containing the regs of a specific OUT endpoint
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number *0x20));
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	015b      	lsls	r3, r3, #5
 8000542:	461a      	mov	r2, r3
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <OUT_ENDPOINT+0x20>)
 8000546:	4413      	add	r3, r2
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40040b00 	.word	0x40040b00

08000558 <FIFO>:

inline static volatile uint32_t *FIFO(uint8_t endpoint_number)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	return (volatile uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	031b      	lsls	r3, r3, #12
 8000566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800056a:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <initialize_gpio_pins>:


//These functions in the driver should not be called, except from the framework.

static void initialize_gpio_pins()
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	//Enable clock for GPIOB
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <initialize_gpio_pins+0x3c>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <initialize_gpio_pins+0x3c>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	6313      	str	r3, [r2, #48]	; 0x30

	//Sets alternate function 12 for: PB14 (-) and PB15 (+)
	MODIFY_REG(GPIOB->AFR[1],
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <initialize_gpio_pins+0x40>)
 800058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <initialize_gpio_pins+0x40>)
 8000596:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 800059a:	6253      	str	r3, [r2, #36]	; 0x24
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14, 0xC) | _VAL2FLD(GPIO_AFRH_AFSEL15, 0xC) //12 in hex
	);

	//Configure USB pins (GPIOB) to work in alternate function mode
	MODIFY_REG(GPIOB-> MODER,
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <initialize_gpio_pins+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <initialize_gpio_pins+0x40>)
 80005a6:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 80005aa:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15,
			_VAL2FLD(GPIO_MODER_MODER14, 2) | _VAL2FLD(GPIO_MODER_MODER15, 2)
	);

}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020400 	.word	0x40020400

080005c0 <initialize_core>:

static void initialize_core()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	//Enable the clock for USB core
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <initialize_core+0x84>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <initialize_core+0x84>)
 80005ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30

	//Configure USB core to run in device mode, and use embedded full-speed PHY
	MODIFY_REG(USB_OTG_HS -> GUSBCFG,
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <initialize_core+0x88>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80005d8:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 80005dc:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <initialize_core+0x88>)
 80005de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005e2:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 80005e6:	60d3      	str	r3, [r2, #12]
			USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
			USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09) //9 is only supported option for this micro-controller
	);

	//Configure device to run in full speed mode
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <initialize_core+0x8c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <initialize_core+0x8c>)
 80005ee:	f043 0303 	orr.w	r3, r3, #3
 80005f2:	6013      	str	r3, [r2, #0]
			_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	//Enable VBUS sensing device
	//SET_BIT(USB_OTG_HS->GCCFG,USB_OTG_GCCFG_VBUSBSEN);
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_VBDEN);
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <initialize_core+0x88>)
 80005f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <initialize_core+0x88>)
 80005fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005fe:	6393      	str	r3, [r2, #56]	; 0x38


	//Unmasks the main USB core interrupts
	SET_BIT(USB_OTG_HS->GINTMSK,
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <initialize_core+0x88>)
 8000602:	699a      	ldr	r2, [r3, #24]
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <initialize_core+0x88>)
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <initialize_core+0x90>)
 8000608:	4313      	orrs	r3, r2
 800060a:	618b      	str	r3, [r1, #24]
			USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
			USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	//Clear all pending core interrupts
	WRITE_REG(USB_OTG_HS-> GINTSTS, 0xFFFFFFFF);
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <initialize_core+0x88>)
 800060e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000612:	615a      	str	r2, [r3, #20]

	//Unmasks USB global interrupt
	SET_BIT(USB_OTG_HS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <initialize_core+0x88>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <initialize_core+0x88>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6093      	str	r3, [r2, #8]

	//Unmasks transfer completed interrupt for all endpoints
	SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <initialize_core+0x8c>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a09      	ldr	r2, [pc, #36]	; (800064c <initialize_core+0x8c>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK, USB_OTG_DOEPMSK_XFRCM);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <initialize_core+0x8c>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <initialize_core+0x8c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6113      	str	r3, [r2, #16]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40040000 	.word	0x40040000
 800064c:	40040800 	.word	0x40040800
 8000650:	800c3818 	.word	0x800c3818

08000654 <connect>:

static void connect()
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	//Power the transceivers on
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <connect+0x28>)
 800065a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <connect+0x28>)
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	6393      	str	r3, [r2, #56]	; 0x38

	//Connect the device to bus
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS); //soft-connect
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <connect+0x2c>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a05      	ldr	r2, [pc, #20]	; (8000680 <connect+0x2c>)
 800066a:	f023 0302 	bic.w	r3, r3, #2
 800066e:	6053      	str	r3, [r2, #4]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40040000 	.word	0x40040000
 8000680:	40040800 	.word	0x40040800

08000684 <disconnect>:


static void disconnect()
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	//Disconnect device from bus
	SET_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <disconnect+0x28>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <disconnect+0x28>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6053      	str	r3, [r2, #4]

	//Power transceivers off
	CLEAR_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <disconnect+0x2c>)
 8000696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <disconnect+0x2c>)
 800069a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40040800 	.word	0x40040800
 80006b0:	40040000 	.word	0x40040000

080006b4 <set_device_address>:


static void set_device_address(uint8_t addr)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <set_device_address+0x2c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80006ce:	4904      	ldr	r1, [pc, #16]	; (80006e0 <set_device_address+0x2c>)
 80006d0:	4313      	orrs	r3, r2
 80006d2:	600b      	str	r3, [r1, #0]
			USB_OTG_HS_DEVICE->DCFG,
			USB_OTG_DCFG_DAD,
			_VAL2FLD(USB_OTG_DCFG_DAD, addr)
	);
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40040800 	.word	0x40040800

080006e4 <read_packet>:

//Pops data from the RxFIFO and stores it in the buffer
//buffer is pointer to the buffer in which the popped data will be stored
static void read_packet(void *buffer, uint16_t size)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
	//Note: there is only one RxFIFO
	uint32_t *fifo = FIFO(0); //popped data would be lost if not stored
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff31 	bl	8000558 <FIFO>
 80006f6:	6138      	str	r0, [r7, #16]

	for(; size >= 4; size -=4, buffer += 4) //shift buffer by 4, otherwise data will be lost each cycle (FIFO structure uses 32-bit words)
 80006f8:	e00b      	b.n	8000712 <read_packet+0x2e>
	{
		//pops one 32-bit word of data (until there is less than one word remaining)
		uint32_t data = *fifo;
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60fb      	str	r3, [r7, #12]
		//store data in buffer, dereference the buffer pointer
		*((uint32_t*)buffer) = data;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	601a      	str	r2, [r3, #0]
	for(; size >= 4; size -=4, buffer += 4) //shift buffer by 4, otherwise data will be lost each cycle (FIFO structure uses 32-bit words)
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	3b04      	subs	r3, #4
 800070a:	807b      	strh	r3, [r7, #2]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3304      	adds	r3, #4
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d8f0      	bhi.n	80006fa <read_packet+0x16>
	}
	if(size > 0)
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d013      	beq.n	8000746 <read_packet+0x62>
	{
		//pops remaining last bytes (less than a word)
		uint32_t data = *fifo;
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data>>= 8)
 8000724:	e00c      	b.n	8000740 <read_packet+0x5c>
		{
			//store data in the buffer with correct alignment
			*((uint8_t*)buffer) = 0xFF & data;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data>>= 8)
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	3b01      	subs	r3, #1
 8000732:	807b      	strh	r3, [r7, #2]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <read_packet+0x42>
		}
	}
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <write_packet>:


static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	6039      	str	r1, [r7, #0]
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fef9 	bl	8000558 <FIFO>
 8000766:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fed0 	bl	8000510 <IN_ENDPOINT>
 8000770:	60b8      	str	r0, [r7, #8]

	//configure the transmission (1 packet that has size bytes)
	MODIFY_REG(in_endpoint->DIEPTSIZ,
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800077a:	88bb      	ldrh	r3, [r7, #4]
 800077c:	4313      	orrs	r3, r2
 800077e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	611a      	str	r2, [r3, #16]
			USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
			_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);

	//enable the transmission after clearing both STALL and NAK of the endpoint
	MODIFY_REG(in_endpoint->DIEPCTL,
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 800078e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000792:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	601a      	str	r2, [r3, #0]
			USB_OTG_DIEPCTL_STALL,
			USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
	);

	//get the size in terms of 32-bit words
	size = (size + 3) / 4;
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	3303      	adds	r3, #3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	da00      	bge.n	80007a4 <write_packet+0x56>
 80007a2:	3303      	adds	r3, #3
 80007a4:	109b      	asrs	r3, r3, #2
 80007a6:	80bb      	strh	r3, [r7, #4]

	for(; size > 0; size--, buffer += 4)
 80007a8:	e009      	b.n	80007be <write_packet+0x70>
	{
		//pushes data to the TxFIFO
		*fifo = *((uint32_t *)buffer);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	601a      	str	r2, [r3, #0]
	for(; size > 0; size--, buffer += 4)
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	80bb      	strh	r3, [r7, #4]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	3304      	adds	r3, #4
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f2      	bne.n	80007aa <write_packet+0x5c>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <refresh_fifo_start_addresses>:

//Update the start addresses of all FIFOs according to size of each FIFO
static void refresh_fifo_start_addresses()
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
	//First changeable start address begins after the region of RxFIFO
	uint16_t start_addr = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_HS->GRXFSIZ) * 4; //must be aligned with a 32-bit location/word
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	80fb      	strh	r3, [r7, #6]

	//Update the start of TxFIFO0
	MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 80007de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	041b      	lsls	r3, r3, #16
 80007e4:	88fa      	ldrh	r2, [r7, #6]
 80007e6:	491c      	ldr	r1, [pc, #112]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 80007e8:	4313      	orrs	r3, r2
 80007ea:	628b      	str	r3, [r1, #40]	; 0x28
			USB_OTG_TX0FSA,
			_VAL2FLD(USB_OTG_TX0FSA, start_addr)
	);

	//Next start address is after where the last TxFIFO ends
	start_addr += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_HS->DIEPTXF0_HNPTXFSIZ) * 4; //must be aligned with a 32-bit location/word
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	4413      	add	r3, r2
 80007fc:	80fb      	strh	r3, [r7, #6]

	//update the start address of the remaining TxFIFO
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT -1; txfifo_number++)
 80007fe:	2300      	movs	r3, #0
 8000800:	717b      	strb	r3, [r7, #5]
 8000802:	e020      	b.n	8000846 <refresh_fifo_start_addresses+0x7a>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[txfifo_number],
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 8000806:	797b      	ldrb	r3, [r7, #5]
 8000808:	3340      	adds	r3, #64	; 0x40
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	4810      	ldr	r0, [pc, #64]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 8000818:	7979      	ldrb	r1, [r7, #5]
 800081a:	431a      	orrs	r2, r3
 800081c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4403      	add	r3, r0
 8000824:	605a      	str	r2, [r3, #4]
				USB_OTG_NPTXFSA,
				_VAL2FLD(USB_OTG_NPTXFSA, start_addr)
		);

		start_addr += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_HS->DIEPTXF[txfifo_number]) * 4;
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <refresh_fifo_start_addresses+0x8c>)
 8000828:	797b      	ldrb	r3, [r7, #5]
 800082a:	3340      	adds	r3, #64	; 0x40
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	0c1b      	lsrs	r3, r3, #16
 8000834:	b29b      	uxth	r3, r3
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	b29a      	uxth	r2, r3
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	4413      	add	r3, r2
 800083e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT -1; txfifo_number++)
 8000840:	797b      	ldrb	r3, [r7, #5]
 8000842:	3301      	adds	r3, #1
 8000844:	717b      	strb	r3, [r7, #5]
 8000846:	797b      	ldrb	r3, [r7, #5]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d9db      	bls.n	8000804 <refresh_fifo_start_addresses+0x38>
	}
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40040000 	.word	0x40040000

0800085c <configure_rxfifo_size>:


//Configure RxFIFO of all OUT endpoints, size of largest OUT endpoints in bytes.
//Shared between all OUT endpoints
static void configure_rxfifo_size(uint16_t size)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
	//Consider the space required to save status packets in RxFIFO and get size in term of 32-bit words.
	size = 10 + (2 * ((size / 4) + 1));
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	089b      	lsrs	r3, r3, #2
 800086a:	b29b      	uxth	r3, r3
 800086c:	3306      	adds	r3, #6
 800086e:	b29b      	uxth	r3, r3
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	80fb      	strh	r3, [r7, #6]

	MODIFY_REG(USB_OTG_HS->GRXFSIZ,
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <configure_rxfifo_size+0x34>)
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	0c1b      	lsrs	r3, r3, #16
 800087a:	041b      	lsls	r3, r3, #16
 800087c:	88fa      	ldrh	r2, [r7, #6]
 800087e:	4904      	ldr	r1, [pc, #16]	; (8000890 <configure_rxfifo_size+0x34>)
 8000880:	4313      	orrs	r3, r2
 8000882:	624b      	str	r3, [r1, #36]	; 0x24
		USB_OTG_GRXFSIZ_RXFD,
		_VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 8000884:	f7ff ffa2 	bl	80007cc <refresh_fifo_start_addresses>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40040000 	.word	0x40040000

08000894 <configure_txfifo_size>:

//Configure TxFIFO of all IN endpoints, the size of IN endpoint in bytes
//Any change on any FIFO will update the registers of all TxFIFOs to adapt the start offsets
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	80bb      	strh	r3, [r7, #4]
	//Get FIFO size in term of 32-bit words
	size = (size + 3) / 4;
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	3303      	adds	r3, #3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	da00      	bge.n	80008ae <configure_txfifo_size+0x1a>
 80008ac:	3303      	adds	r3, #3
 80008ae:	109b      	asrs	r3, r3, #2
 80008b0:	80bb      	strh	r3, [r7, #4]

	//configure the depth of the TxFIFO
	if(endpoint_number == 0)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d108      	bne.n	80008ca <configure_txfifo_size+0x36>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <configure_txfifo_size+0x68>)
 80008ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008bc:	b29a      	uxth	r2, r3
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	041b      	lsls	r3, r3, #16
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <configure_txfifo_size+0x68>)
 80008c4:	4313      	orrs	r3, r2
 80008c6:	628b      	str	r3, [r1, #40]	; 0x28
 80008c8:	e011      	b.n	80008ee <configure_txfifo_size+0x5a>
				_VAL2FLD(USB_OTG_TX0FD,size)
		);
	}
	else
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[endpoint_number - 1],
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <configure_txfifo_size+0x68>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	3340      	adds	r3, #64	; 0x40
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	b299      	uxth	r1, r3
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	041a      	lsls	r2, r3, #16
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <configure_txfifo_size+0x68>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	430a      	orrs	r2, r1
 80008e6:	3340      	adds	r3, #64	; 0x40
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4403      	add	r3, r0
 80008ec:	605a      	str	r2, [r3, #4]
				USB_OTG_NPTXFD,
				_VAL2FLD(USB_OTG_NPTXFD, size)
		);

	}
	refresh_fifo_start_addresses();
 80008ee:	f7ff ff6d 	bl	80007cc <refresh_fifo_start_addresses>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40040000 	.word	0x40040000

08000900 <flush_rxfifo>:


//Flush the RxFIFO of all OUT endpoints
static void flush_rxfifo()
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_HS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <flush_rxfifo+0x1c>)
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <flush_rxfifo+0x1c>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6113      	str	r3, [r2, #16]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40040000 	.word	0x40040000

08000920 <flush_txfifo>:


//flush the TxFIFO of an IN endpoint
static void flush_txfifo(uint8_t endpoint_number)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	//Sets the number of TxFIFO to be flushed and then triggers the flush
	MODIFY_REG(USB_OTG_HS->GRSTCTL,
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <flush_txfifo+0x30>)
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800093a:	4313      	orrs	r3, r2
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <flush_txfifo+0x30>)
 800093e:	f043 0320 	orr.w	r3, r3, #32
 8000942:	6113      	str	r3, [r2, #16]
			USB_OTG_GRSTCTL_TXFNUM,
			_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40040000 	.word	0x40040000

08000954 <configure_endpoint0>:


static void configure_endpoint0(uint16_t endpoint_size)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
	//Unmask all interrupts of IN and OUT endpoint0
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <configure_endpoint0+0x6c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <configure_endpoint0+0x6c>)
 8000964:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000968:	61d3      	str	r3, [r2, #28]

	//Configure the maximum packet size, activate endpoint and NAK the endpoint
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fdd0 	bl	8000510 <IN_ENDPOINT>
 8000970:	4603      	mov	r3, r0
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000978:	f023 0307 	bic.w	r3, r3, #7
 800097c:	88fa      	ldrh	r2, [r7, #6]
 800097e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000982:	ea43 0402 	orr.w	r4, r3, r2
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fdc2 	bl	8000510 <IN_ENDPOINT>
 800098c:	4602      	mov	r2, r0
 800098e:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 8000992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000996:	6013      	str	r3, [r2, #0]
			USB_OTG_DIEPCTL_MPSIZ,
			USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK
	);

	//Clear NAK and enable endpoint data transmission
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fdcb 	bl	8000534 <OUT_ENDPOINT>
 800099e:	4603      	mov	r3, r0
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80009a6:	601a      	str	r2, [r3, #0]
			USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK
			);

	//Note: 64 bytes is the maximum packet size for full speed USB devices
	configure_rxfifo_size(64);
 80009a8:	2040      	movs	r0, #64	; 0x40
 80009aa:	f7ff ff57 	bl	800085c <configure_rxfifo_size>
	configure_txfifo_size(0, endpoint_size);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	4619      	mov	r1, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff6e 	bl	8000894 <configure_txfifo_size>
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40040800 	.word	0x40040800

080009c4 <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	460b      	mov	r3, r1
 80009d0:	71bb      	strb	r3, [r7, #6]
 80009d2:	4613      	mov	r3, r2
 80009d4:	80bb      	strh	r3, [r7, #4]
	//Unmask all interrupts of the targeted IN endpoint
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << endpoint_number);
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <configure_in_endpoint+0x7c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	2101      	movs	r1, #1
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	4611      	mov	r1, r2
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <configure_in_endpoint+0x7c>)
 80009e6:	430b      	orrs	r3, r1
 80009e8:	61d3      	str	r3, [r2, #28]

	//Activate endpoint and set endpoint handshake to NAK.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fd8f 	bl	8000510 <IN_ENDPOINT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <configure_in_endpoint+0x80>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	88ba      	ldrh	r2, [r7, #4]
 80009fc:	f3c2 010a 	ubfx	r1, r2, #0, #11
 8000a00:	79ba      	ldrb	r2, [r7, #6]
 8000a02:	0492      	lsls	r2, r2, #18
 8000a04:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000a08:	4311      	orrs	r1, r2
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	0592      	lsls	r2, r2, #22
 8000a0e:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 8000a12:	430a      	orrs	r2, r1
 8000a14:	ea43 0402 	orr.w	r4, r3, r2
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fd78 	bl	8000510 <IN_ENDPOINT>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 8000a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2a:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
		_VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type) | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 8000a2c:	88ba      	ldrh	r2, [r7, #4]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff2e 	bl	8000894 <configure_txfifo_size>
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40040800 	.word	0x40040800
 8000a44:	fff3f800 	.word	0xfff3f800

08000a48 <deconfigure_endpoint>:

static void deconfigure_endpoint(uint8_t endpoint_number)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fd5b 	bl	8000510 <IN_ENDPOINT>
 8000a5a:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fd68 	bl	8000534 <OUT_ENDPOINT>
 8000a64:	60b8      	str	r0, [r7, #8]

	//masks all interrupts of targeted in and out endpoints
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK,
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <deconfigure_endpoint+0xb8>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	43d2      	mvns	r2, r2
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <deconfigure_endpoint+0xb8>)
 8000a82:	400b      	ands	r3, r1
 8000a84:	61d3      	str	r3, [r2, #28]
			(1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	//Clears all interrupts of the endpoint
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000a8e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x71FF);
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f443 43e3 	orr.w	r3, r3, #29056	; 0x7180
 8000a9e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	6093      	str	r3, [r2, #8]

	//disable endpoints if possible
	if(in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da05      	bge.n	8000aba <deconfigure_endpoint+0x72>
	{
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	601a      	str	r2, [r3, #0]
	}

	//deactivate endpoint
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]

	if(endpoint_number != 0) //0 endpoint must be active/enabled.
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00f      	beq.n	8000aec <deconfigure_endpoint+0xa4>
	{
		if(out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da05      	bge.n	8000ae0 <deconfigure_endpoint+0x98>
		{
			//Disable endpoint transmission
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	601a      	str	r2, [r3, #0]
		}

		//deactivate the endpoint
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	601a      	str	r2, [r3, #0]
	}

	//Flush the FIFOs
	flush_txfifo(endpoint_number);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff16 	bl	8000920 <flush_txfifo>
	flush_rxfifo();
 8000af4:	f7ff ff04 	bl	8000900 <flush_rxfifo>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40040800 	.word	0x40040800

08000b04 <usbrst_handler>:




static void usbrst_handler()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	log_info("USB reset singal was detected");
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <usbrst_handler+0x34>)
 8000b0c:	f7ff fc50 	bl	80003b0 <log_info>
	for(uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	e006      	b.n	8000b24 <usbrst_handler+0x20>
	{
		deconfigure_endpoint(i);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff95 	bl	8000a48 <deconfigure_endpoint>
	for(uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3301      	adds	r3, #1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d9f5      	bls.n	8000b16 <usbrst_handler+0x12>
	}

	usb_events.on_usb_reset_received();
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <usbrst_handler+0x38>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4798      	blx	r3
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08001d10 	.word	0x08001d10
 8000b3c:	20000004 	.word	0x20000004

08000b40 <enumdne_handler>:

static void enumdne_handler()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done");
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <enumdne_handler+0x14>)
 8000b46:	f7ff fc33 	bl	80003b0 <log_info>
	configure_endpoint0(8);
 8000b4a:	2008      	movs	r0, #8
 8000b4c:	f7ff ff02 	bl	8000954 <configure_endpoint0>
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08001d30 	.word	0x08001d30

08000b58 <rxflvl_handler>:

static void rxflvl_handler()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	//Pop the status information word from RxFIFO
	uint32_t receive_status = USB_OTG_HS_GLOBAL->GRXSTSP;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <rxflvl_handler+0x90>)
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	60fb      	str	r3, [r7, #12]

	//endpoint that receives the data
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	72fb      	strb	r3, [r7, #11]
	//count of bytes in received packet
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b78:	813b      	strh	r3, [r7, #8]
	//status of received packet
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	0c5b      	lsrs	r3, r3, #17
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	80fb      	strh	r3, [r7, #6]

	switch(pktsts)
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	3b02      	subs	r3, #2
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d828      	bhi.n	8000be0 <rxflvl_handler+0x88>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <rxflvl_handler+0x3c>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000bdf 	.word	0x08000bdf
 8000b98:	08000bcb 	.word	0x08000bcb
 8000b9c:	08000bb7 	.word	0x08000bb7
 8000ba0:	08000be1 	.word	0x08000be1
 8000ba4:	08000ba9 	.word	0x08000ba9
	{
	case 0x06: //SETUP packet (includes data)
		usb_events.on_setup_data_received(endpoint_number, bcnt);
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <rxflvl_handler+0x94>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	8939      	ldrh	r1, [r7, #8]
 8000bae:	7afa      	ldrb	r2, [r7, #11]
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4798      	blx	r3
		break;
 8000bb4:	e014      	b.n	8000be0 <rxflvl_handler+0x88>
	case 0x02: //OUT packet
		break;
	case 0x04: //SETUP stage has completed
		//re-enable the transmission on the endpoint
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000bb6:	7afb      	ldrb	r3, [r7, #11]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fcbb 	bl	8000534 <OUT_ENDPOINT>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000bc6:	601a      	str	r2, [r3, #0]
				USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
		);
		break;
 8000bc8:	e00a      	b.n	8000be0 <rxflvl_handler+0x88>
	case 0x03: //OUT transfer has completed
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000bca:	7afb      	ldrb	r3, [r7, #11]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcb1 	bl	8000534 <OUT_ENDPOINT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000bda:	601a      	str	r2, [r3, #0]
				USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
		);
		break;
 8000bdc:	e000      	b.n	8000be0 <rxflvl_handler+0x88>
		break;
 8000bde:	bf00      	nop
	}

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40040000 	.word	0x40040000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <gintsts_handler>:

static void gintsts_handler()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_HS_GLOBAL->GINTSTS;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <gintsts_handler+0x74>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	607b      	str	r3, [r7, #4]

	if(gintsts & USB_OTG_GINTSTS_USBRST)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d008      	beq.n	8000c18 <gintsts_handler+0x28>
	{
		usbrst_handler();
 8000c06:	f7ff ff7d 	bl	8000b04 <usbrst_handler>
		//Clear interrupt to avoid global interrupt persistence
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <gintsts_handler+0x74>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <gintsts_handler+0x74>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c14:	6153      	str	r3, [r2, #20]
	}
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
	{

	}
}
 8000c16:	e021      	b.n	8000c5c <gintsts_handler+0x6c>
	else if (gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <gintsts_handler+0x44>
		enumdne_handler();
 8000c22:	f7ff ff8d 	bl	8000b40 <enumdne_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <gintsts_handler+0x74>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <gintsts_handler+0x74>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c30:	6153      	str	r3, [r2, #20]
}
 8000c32:	e013      	b.n	8000c5c <gintsts_handler+0x6c>
	else if (gintsts & USB_OTG_GINTSTS_RXFLVL) //interrupt occurs when RxFIFO data is not empty
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d008      	beq.n	8000c50 <gintsts_handler+0x60>
		rxflvl_handler();
 8000c3e:	f7ff ff8b 	bl	8000b58 <rxflvl_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <gintsts_handler+0x74>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <gintsts_handler+0x74>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6153      	str	r3, [r2, #20]
}
 8000c4e:	e005      	b.n	8000c5c <gintsts_handler+0x6c>
	else if (gintsts & USB_OTG_GINTSTS_IEPINT)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <gintsts_handler+0x6c>
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
 8000c5a:	687b      	ldr	r3, [r7, #4]
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40040000 	.word	0x40040000

08000c68 <usbd_initialize>:
#include "usb_device.h"

static UsbDevice *usbd_handle;

void usbd_initialize(UsbDevice *usb_device)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	usbd_handle = usb_device;
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <usbd_initialize+0x28>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
	usb_driver.initialize_gpio_pins();
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <usbd_initialize+0x2c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4798      	blx	r3
	usb_driver.initialize_core();
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <usbd_initialize+0x2c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4798      	blx	r3
	usb_driver.connect();
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <usbd_initialize+0x2c>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	4798      	blx	r3
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000009c 	.word	0x2000009c
 8000c94:	08001d54 	.word	0x08001d54

08000c98 <usbd_poll>:

void usbd_poll()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <usbd_poll+0x10>)
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	4798      	blx	r3
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08001d54 	.word	0x08001d54

08000cac <usbrst_handler>:

static void usbrst_handler()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <usbrst_handler+0x38>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size = 0;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <usbrst_handler+0x38>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value = 0;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <usbrst_handler+0x38>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <usbrst_handler+0x38>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_state = USB_CONTROL_STAGE_SETUP;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <usbrst_handler+0x38>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_address(0);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <usbrst_handler+0x3c>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2000      	movs	r0, #0
 8000cde:	4798      	blx	r3
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	08001d54 	.word	0x08001d54

08000cec <setup_data_received_handler>:


static void setup_data_received_handler(uint8_t endpoint_number, uint16_t byte_count)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80bb      	strh	r3, [r7, #4]
	usb_driver.read_packet(usbd_handle->ptr_out_buffer, byte_count);
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <setup_data_received_handler+0x28>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <setup_data_received_handler+0x2c>)
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	6852      	ldr	r2, [r2, #4]
 8000d06:	88b9      	ldrh	r1, [r7, #4]
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4798      	blx	r3
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	08001d54 	.word	0x08001d54
 8000d18:	2000009c 	.word	0x2000009c

08000d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d20:	f7ff fbee 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f000 f811 	bl	8000d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4e:	f7ff fb43 	bl	80003d8 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d60:	08001e20 	.word	0x08001e20
  ldr r2, =_sbss
 8000d64:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d68:	200000e4 	.word	0x200000e4

08000d6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <__libc_init_array>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	4e0d      	ldr	r6, [pc, #52]	; (8000da8 <__libc_init_array+0x38>)
 8000d74:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <__libc_init_array+0x3c>)
 8000d76:	1ba4      	subs	r4, r4, r6
 8000d78:	10a4      	asrs	r4, r4, #2
 8000d7a:	2500      	movs	r5, #0
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	d109      	bne.n	8000d94 <__libc_init_array+0x24>
 8000d80:	4e0b      	ldr	r6, [pc, #44]	; (8000db0 <__libc_init_array+0x40>)
 8000d82:	4c0c      	ldr	r4, [pc, #48]	; (8000db4 <__libc_init_array+0x44>)
 8000d84:	f000 ff8e 	bl	8001ca4 <_init>
 8000d88:	1ba4      	subs	r4, r4, r6
 8000d8a:	10a4      	asrs	r4, r4, #2
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d105      	bne.n	8000d9e <__libc_init_array+0x2e>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d98:	4798      	blx	r3
 8000d9a:	3501      	adds	r5, #1
 8000d9c:	e7ee      	b.n	8000d7c <__libc_init_array+0xc>
 8000d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000da2:	4798      	blx	r3
 8000da4:	3501      	adds	r5, #1
 8000da6:	e7f2      	b.n	8000d8e <__libc_init_array+0x1e>
 8000da8:	08001e18 	.word	0x08001e18
 8000dac:	08001e18 	.word	0x08001e18
 8000db0:	08001e18 	.word	0x08001e18
 8000db4:	08001e1c 	.word	0x08001e1c

08000db8 <memset>:
 8000db8:	4402      	add	r2, r0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d100      	bne.n	8000dc2 <memset+0xa>
 8000dc0:	4770      	bx	lr
 8000dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8000dc6:	e7f9      	b.n	8000dbc <memset+0x4>

08000dc8 <__sfputc_r>:
 8000dc8:	6893      	ldr	r3, [r2, #8]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	b410      	push	{r4}
 8000dd0:	6093      	str	r3, [r2, #8]
 8000dd2:	da08      	bge.n	8000de6 <__sfputc_r+0x1e>
 8000dd4:	6994      	ldr	r4, [r2, #24]
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	db01      	blt.n	8000dde <__sfputc_r+0x16>
 8000dda:	290a      	cmp	r1, #10
 8000ddc:	d103      	bne.n	8000de6 <__sfputc_r+0x1e>
 8000dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000de2:	f000 baef 	b.w	80013c4 <__swbuf_r>
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	1c58      	adds	r0, r3, #1
 8000dea:	6010      	str	r0, [r2, #0]
 8000dec:	7019      	strb	r1, [r3, #0]
 8000dee:	4608      	mov	r0, r1
 8000df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <__sfputs_r>:
 8000df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df8:	4606      	mov	r6, r0
 8000dfa:	460f      	mov	r7, r1
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	18d5      	adds	r5, r2, r3
 8000e00:	42ac      	cmp	r4, r5
 8000e02:	d101      	bne.n	8000e08 <__sfputs_r+0x12>
 8000e04:	2000      	movs	r0, #0
 8000e06:	e007      	b.n	8000e18 <__sfputs_r+0x22>
 8000e08:	463a      	mov	r2, r7
 8000e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f7ff ffda 	bl	8000dc8 <__sfputc_r>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d1f3      	bne.n	8000e00 <__sfputs_r+0xa>
 8000e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e1c <_vfiprintf_r>:
 8000e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e20:	460c      	mov	r4, r1
 8000e22:	b09d      	sub	sp, #116	; 0x74
 8000e24:	4617      	mov	r7, r2
 8000e26:	461d      	mov	r5, r3
 8000e28:	4606      	mov	r6, r0
 8000e2a:	b118      	cbz	r0, 8000e34 <_vfiprintf_r+0x18>
 8000e2c:	6983      	ldr	r3, [r0, #24]
 8000e2e:	b90b      	cbnz	r3, 8000e34 <_vfiprintf_r+0x18>
 8000e30:	f000 fc78 	bl	8001724 <__sinit>
 8000e34:	4b7c      	ldr	r3, [pc, #496]	; (8001028 <_vfiprintf_r+0x20c>)
 8000e36:	429c      	cmp	r4, r3
 8000e38:	d158      	bne.n	8000eec <_vfiprintf_r+0xd0>
 8000e3a:	6874      	ldr	r4, [r6, #4]
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	0718      	lsls	r0, r3, #28
 8000e40:	d55e      	bpl.n	8000f00 <_vfiprintf_r+0xe4>
 8000e42:	6923      	ldr	r3, [r4, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d05b      	beq.n	8000f00 <_vfiprintf_r+0xe4>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e52:	2330      	movs	r3, #48	; 0x30
 8000e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e58:	9503      	str	r5, [sp, #12]
 8000e5a:	f04f 0b01 	mov.w	fp, #1
 8000e5e:	46b8      	mov	r8, r7
 8000e60:	4645      	mov	r5, r8
 8000e62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e66:	b10b      	cbz	r3, 8000e6c <_vfiprintf_r+0x50>
 8000e68:	2b25      	cmp	r3, #37	; 0x25
 8000e6a:	d154      	bne.n	8000f16 <_vfiprintf_r+0xfa>
 8000e6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8000e70:	d00b      	beq.n	8000e8a <_vfiprintf_r+0x6e>
 8000e72:	4653      	mov	r3, sl
 8000e74:	463a      	mov	r2, r7
 8000e76:	4621      	mov	r1, r4
 8000e78:	4630      	mov	r0, r6
 8000e7a:	f7ff ffbc 	bl	8000df6 <__sfputs_r>
 8000e7e:	3001      	adds	r0, #1
 8000e80:	f000 80c2 	beq.w	8001008 <_vfiprintf_r+0x1ec>
 8000e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e86:	4453      	add	r3, sl
 8000e88:	9309      	str	r3, [sp, #36]	; 0x24
 8000e8a:	f898 3000 	ldrb.w	r3, [r8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 80ba 	beq.w	8001008 <_vfiprintf_r+0x1ec>
 8000e94:	2300      	movs	r3, #0
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e9e:	9304      	str	r3, [sp, #16]
 8000ea0:	9307      	str	r3, [sp, #28]
 8000ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8000ea8:	46a8      	mov	r8, r5
 8000eaa:	2205      	movs	r2, #5
 8000eac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8000eb0:	485e      	ldr	r0, [pc, #376]	; (800102c <_vfiprintf_r+0x210>)
 8000eb2:	f7ff f99d 	bl	80001f0 <memchr>
 8000eb6:	9b04      	ldr	r3, [sp, #16]
 8000eb8:	bb78      	cbnz	r0, 8000f1a <_vfiprintf_r+0xfe>
 8000eba:	06d9      	lsls	r1, r3, #27
 8000ebc:	bf44      	itt	mi
 8000ebe:	2220      	movmi	r2, #32
 8000ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ec4:	071a      	lsls	r2, r3, #28
 8000ec6:	bf44      	itt	mi
 8000ec8:	222b      	movmi	r2, #43	; 0x2b
 8000eca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ece:	782a      	ldrb	r2, [r5, #0]
 8000ed0:	2a2a      	cmp	r2, #42	; 0x2a
 8000ed2:	d02a      	beq.n	8000f2a <_vfiprintf_r+0x10e>
 8000ed4:	9a07      	ldr	r2, [sp, #28]
 8000ed6:	46a8      	mov	r8, r5
 8000ed8:	2000      	movs	r0, #0
 8000eda:	250a      	movs	r5, #10
 8000edc:	4641      	mov	r1, r8
 8000ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ee2:	3b30      	subs	r3, #48	; 0x30
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d969      	bls.n	8000fbc <_vfiprintf_r+0x1a0>
 8000ee8:	b360      	cbz	r0, 8000f44 <_vfiprintf_r+0x128>
 8000eea:	e024      	b.n	8000f36 <_vfiprintf_r+0x11a>
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <_vfiprintf_r+0x214>)
 8000eee:	429c      	cmp	r4, r3
 8000ef0:	d101      	bne.n	8000ef6 <_vfiprintf_r+0xda>
 8000ef2:	68b4      	ldr	r4, [r6, #8]
 8000ef4:	e7a2      	b.n	8000e3c <_vfiprintf_r+0x20>
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <_vfiprintf_r+0x218>)
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	bf08      	it	eq
 8000efc:	68f4      	ldreq	r4, [r6, #12]
 8000efe:	e79d      	b.n	8000e3c <_vfiprintf_r+0x20>
 8000f00:	4621      	mov	r1, r4
 8000f02:	4630      	mov	r0, r6
 8000f04:	f000 fab0 	bl	8001468 <__swsetup_r>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d09d      	beq.n	8000e48 <_vfiprintf_r+0x2c>
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f10:	b01d      	add	sp, #116	; 0x74
 8000f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f16:	46a8      	mov	r8, r5
 8000f18:	e7a2      	b.n	8000e60 <_vfiprintf_r+0x44>
 8000f1a:	4a44      	ldr	r2, [pc, #272]	; (800102c <_vfiprintf_r+0x210>)
 8000f1c:	1a80      	subs	r0, r0, r2
 8000f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8000f22:	4318      	orrs	r0, r3
 8000f24:	9004      	str	r0, [sp, #16]
 8000f26:	4645      	mov	r5, r8
 8000f28:	e7be      	b.n	8000ea8 <_vfiprintf_r+0x8c>
 8000f2a:	9a03      	ldr	r2, [sp, #12]
 8000f2c:	1d11      	adds	r1, r2, #4
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	9103      	str	r1, [sp, #12]
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	db01      	blt.n	8000f3a <_vfiprintf_r+0x11e>
 8000f36:	9207      	str	r2, [sp, #28]
 8000f38:	e004      	b.n	8000f44 <_vfiprintf_r+0x128>
 8000f3a:	4252      	negs	r2, r2
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	9207      	str	r2, [sp, #28]
 8000f42:	9304      	str	r3, [sp, #16]
 8000f44:	f898 3000 	ldrb.w	r3, [r8]
 8000f48:	2b2e      	cmp	r3, #46	; 0x2e
 8000f4a:	d10e      	bne.n	8000f6a <_vfiprintf_r+0x14e>
 8000f4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8000f50:	2b2a      	cmp	r3, #42	; 0x2a
 8000f52:	d138      	bne.n	8000fc6 <_vfiprintf_r+0x1aa>
 8000f54:	9b03      	ldr	r3, [sp, #12]
 8000f56:	1d1a      	adds	r2, r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	9203      	str	r2, [sp, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bfb8      	it	lt
 8000f60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000f64:	f108 0802 	add.w	r8, r8, #2
 8000f68:	9305      	str	r3, [sp, #20]
 8000f6a:	4d33      	ldr	r5, [pc, #204]	; (8001038 <_vfiprintf_r+0x21c>)
 8000f6c:	f898 1000 	ldrb.w	r1, [r8]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4628      	mov	r0, r5
 8000f74:	f7ff f93c 	bl	80001f0 <memchr>
 8000f78:	b140      	cbz	r0, 8000f8c <_vfiprintf_r+0x170>
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	1b40      	subs	r0, r0, r5
 8000f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8000f82:	9b04      	ldr	r3, [sp, #16]
 8000f84:	4303      	orrs	r3, r0
 8000f86:	f108 0801 	add.w	r8, r8, #1
 8000f8a:	9304      	str	r3, [sp, #16]
 8000f8c:	f898 1000 	ldrb.w	r1, [r8]
 8000f90:	482a      	ldr	r0, [pc, #168]	; (800103c <_vfiprintf_r+0x220>)
 8000f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f96:	2206      	movs	r2, #6
 8000f98:	f108 0701 	add.w	r7, r8, #1
 8000f9c:	f7ff f928 	bl	80001f0 <memchr>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d037      	beq.n	8001014 <_vfiprintf_r+0x1f8>
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <_vfiprintf_r+0x224>)
 8000fa6:	bb1b      	cbnz	r3, 8000ff0 <_vfiprintf_r+0x1d4>
 8000fa8:	9b03      	ldr	r3, [sp, #12]
 8000faa:	3307      	adds	r3, #7
 8000fac:	f023 0307 	bic.w	r3, r3, #7
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	9303      	str	r3, [sp, #12]
 8000fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fb6:	444b      	add	r3, r9
 8000fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8000fba:	e750      	b.n	8000e5e <_vfiprintf_r+0x42>
 8000fbc:	fb05 3202 	mla	r2, r5, r2, r3
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4688      	mov	r8, r1
 8000fc4:	e78a      	b.n	8000edc <_vfiprintf_r+0xc0>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f108 0801 	add.w	r8, r8, #1
 8000fcc:	9305      	str	r3, [sp, #20]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	250a      	movs	r5, #10
 8000fd2:	4640      	mov	r0, r8
 8000fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fd8:	3a30      	subs	r2, #48	; 0x30
 8000fda:	2a09      	cmp	r2, #9
 8000fdc:	d903      	bls.n	8000fe6 <_vfiprintf_r+0x1ca>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0c3      	beq.n	8000f6a <_vfiprintf_r+0x14e>
 8000fe2:	9105      	str	r1, [sp, #20]
 8000fe4:	e7c1      	b.n	8000f6a <_vfiprintf_r+0x14e>
 8000fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8000fea:	2301      	movs	r3, #1
 8000fec:	4680      	mov	r8, r0
 8000fee:	e7f0      	b.n	8000fd2 <_vfiprintf_r+0x1b6>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_vfiprintf_r+0x228>)
 8000ff8:	a904      	add	r1, sp, #16
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f3af 8000 	nop.w
 8001000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001004:	4681      	mov	r9, r0
 8001006:	d1d5      	bne.n	8000fb4 <_vfiprintf_r+0x198>
 8001008:	89a3      	ldrh	r3, [r4, #12]
 800100a:	065b      	lsls	r3, r3, #25
 800100c:	f53f af7e 	bmi.w	8000f0c <_vfiprintf_r+0xf0>
 8001010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001012:	e77d      	b.n	8000f10 <_vfiprintf_r+0xf4>
 8001014:	ab03      	add	r3, sp, #12
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	4622      	mov	r2, r4
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <_vfiprintf_r+0x228>)
 800101c:	a904      	add	r1, sp, #16
 800101e:	4630      	mov	r0, r6
 8001020:	f000 f892 	bl	8001148 <_printf_i>
 8001024:	e7ec      	b.n	8001000 <_vfiprintf_r+0x1e4>
 8001026:	bf00      	nop
 8001028:	08001dd8 	.word	0x08001dd8
 800102c:	08001d84 	.word	0x08001d84
 8001030:	08001df8 	.word	0x08001df8
 8001034:	08001db8 	.word	0x08001db8
 8001038:	08001d8a 	.word	0x08001d8a
 800103c:	08001d8e 	.word	0x08001d8e
 8001040:	00000000 	.word	0x00000000
 8001044:	08000df7 	.word	0x08000df7

08001048 <vfiprintf>:
 8001048:	4613      	mov	r3, r2
 800104a:	460a      	mov	r2, r1
 800104c:	4601      	mov	r1, r0
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <vfiprintf+0x10>)
 8001050:	6800      	ldr	r0, [r0, #0]
 8001052:	f7ff bee3 	b.w	8000e1c <_vfiprintf_r>
 8001056:	bf00      	nop
 8001058:	2000001c 	.word	0x2000001c

0800105c <_printf_common>:
 800105c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001060:	4691      	mov	r9, r2
 8001062:	461f      	mov	r7, r3
 8001064:	688a      	ldr	r2, [r1, #8]
 8001066:	690b      	ldr	r3, [r1, #16]
 8001068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800106c:	4293      	cmp	r3, r2
 800106e:	bfb8      	it	lt
 8001070:	4613      	movlt	r3, r2
 8001072:	f8c9 3000 	str.w	r3, [r9]
 8001076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800107a:	4606      	mov	r6, r0
 800107c:	460c      	mov	r4, r1
 800107e:	b112      	cbz	r2, 8001086 <_printf_common+0x2a>
 8001080:	3301      	adds	r3, #1
 8001082:	f8c9 3000 	str.w	r3, [r9]
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	0699      	lsls	r1, r3, #26
 800108a:	bf42      	ittt	mi
 800108c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001090:	3302      	addmi	r3, #2
 8001092:	f8c9 3000 	strmi.w	r3, [r9]
 8001096:	6825      	ldr	r5, [r4, #0]
 8001098:	f015 0506 	ands.w	r5, r5, #6
 800109c:	d107      	bne.n	80010ae <_printf_common+0x52>
 800109e:	f104 0a19 	add.w	sl, r4, #25
 80010a2:	68e3      	ldr	r3, [r4, #12]
 80010a4:	f8d9 2000 	ldr.w	r2, [r9]
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	42ab      	cmp	r3, r5
 80010ac:	dc28      	bgt.n	8001100 <_printf_common+0xa4>
 80010ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	3300      	adds	r3, #0
 80010b6:	bf18      	it	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	0692      	lsls	r2, r2, #26
 80010bc:	d42d      	bmi.n	800111a <_printf_common+0xbe>
 80010be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010c2:	4639      	mov	r1, r7
 80010c4:	4630      	mov	r0, r6
 80010c6:	47c0      	blx	r8
 80010c8:	3001      	adds	r0, #1
 80010ca:	d020      	beq.n	800110e <_printf_common+0xb2>
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	68e5      	ldr	r5, [r4, #12]
 80010d0:	f8d9 2000 	ldr.w	r2, [r9]
 80010d4:	f003 0306 	and.w	r3, r3, #6
 80010d8:	2b04      	cmp	r3, #4
 80010da:	bf08      	it	eq
 80010dc:	1aad      	subeq	r5, r5, r2
 80010de:	68a3      	ldr	r3, [r4, #8]
 80010e0:	6922      	ldr	r2, [r4, #16]
 80010e2:	bf0c      	ite	eq
 80010e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010e8:	2500      	movne	r5, #0
 80010ea:	4293      	cmp	r3, r2
 80010ec:	bfc4      	itt	gt
 80010ee:	1a9b      	subgt	r3, r3, r2
 80010f0:	18ed      	addgt	r5, r5, r3
 80010f2:	f04f 0900 	mov.w	r9, #0
 80010f6:	341a      	adds	r4, #26
 80010f8:	454d      	cmp	r5, r9
 80010fa:	d11a      	bne.n	8001132 <_printf_common+0xd6>
 80010fc:	2000      	movs	r0, #0
 80010fe:	e008      	b.n	8001112 <_printf_common+0xb6>
 8001100:	2301      	movs	r3, #1
 8001102:	4652      	mov	r2, sl
 8001104:	4639      	mov	r1, r7
 8001106:	4630      	mov	r0, r6
 8001108:	47c0      	blx	r8
 800110a:	3001      	adds	r0, #1
 800110c:	d103      	bne.n	8001116 <_printf_common+0xba>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001116:	3501      	adds	r5, #1
 8001118:	e7c3      	b.n	80010a2 <_printf_common+0x46>
 800111a:	18e1      	adds	r1, r4, r3
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	2030      	movs	r0, #48	; 0x30
 8001120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001124:	4422      	add	r2, r4
 8001126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800112a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800112e:	3302      	adds	r3, #2
 8001130:	e7c5      	b.n	80010be <_printf_common+0x62>
 8001132:	2301      	movs	r3, #1
 8001134:	4622      	mov	r2, r4
 8001136:	4639      	mov	r1, r7
 8001138:	4630      	mov	r0, r6
 800113a:	47c0      	blx	r8
 800113c:	3001      	adds	r0, #1
 800113e:	d0e6      	beq.n	800110e <_printf_common+0xb2>
 8001140:	f109 0901 	add.w	r9, r9, #1
 8001144:	e7d8      	b.n	80010f8 <_printf_common+0x9c>
	...

08001148 <_printf_i>:
 8001148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800114c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001150:	460c      	mov	r4, r1
 8001152:	7e09      	ldrb	r1, [r1, #24]
 8001154:	b085      	sub	sp, #20
 8001156:	296e      	cmp	r1, #110	; 0x6e
 8001158:	4617      	mov	r7, r2
 800115a:	4606      	mov	r6, r0
 800115c:	4698      	mov	r8, r3
 800115e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001160:	f000 80b3 	beq.w	80012ca <_printf_i+0x182>
 8001164:	d822      	bhi.n	80011ac <_printf_i+0x64>
 8001166:	2963      	cmp	r1, #99	; 0x63
 8001168:	d036      	beq.n	80011d8 <_printf_i+0x90>
 800116a:	d80a      	bhi.n	8001182 <_printf_i+0x3a>
 800116c:	2900      	cmp	r1, #0
 800116e:	f000 80b9 	beq.w	80012e4 <_printf_i+0x19c>
 8001172:	2958      	cmp	r1, #88	; 0x58
 8001174:	f000 8083 	beq.w	800127e <_printf_i+0x136>
 8001178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800117c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001180:	e032      	b.n	80011e8 <_printf_i+0xa0>
 8001182:	2964      	cmp	r1, #100	; 0x64
 8001184:	d001      	beq.n	800118a <_printf_i+0x42>
 8001186:	2969      	cmp	r1, #105	; 0x69
 8001188:	d1f6      	bne.n	8001178 <_printf_i+0x30>
 800118a:	6820      	ldr	r0, [r4, #0]
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	0605      	lsls	r5, r0, #24
 8001190:	f103 0104 	add.w	r1, r3, #4
 8001194:	d52a      	bpl.n	80011ec <_printf_i+0xa4>
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6011      	str	r1, [r2, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da03      	bge.n	80011a6 <_printf_i+0x5e>
 800119e:	222d      	movs	r2, #45	; 0x2d
 80011a0:	425b      	negs	r3, r3
 80011a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80011a6:	486f      	ldr	r0, [pc, #444]	; (8001364 <_printf_i+0x21c>)
 80011a8:	220a      	movs	r2, #10
 80011aa:	e039      	b.n	8001220 <_printf_i+0xd8>
 80011ac:	2973      	cmp	r1, #115	; 0x73
 80011ae:	f000 809d 	beq.w	80012ec <_printf_i+0x1a4>
 80011b2:	d808      	bhi.n	80011c6 <_printf_i+0x7e>
 80011b4:	296f      	cmp	r1, #111	; 0x6f
 80011b6:	d020      	beq.n	80011fa <_printf_i+0xb2>
 80011b8:	2970      	cmp	r1, #112	; 0x70
 80011ba:	d1dd      	bne.n	8001178 <_printf_i+0x30>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	6023      	str	r3, [r4, #0]
 80011c4:	e003      	b.n	80011ce <_printf_i+0x86>
 80011c6:	2975      	cmp	r1, #117	; 0x75
 80011c8:	d017      	beq.n	80011fa <_printf_i+0xb2>
 80011ca:	2978      	cmp	r1, #120	; 0x78
 80011cc:	d1d4      	bne.n	8001178 <_printf_i+0x30>
 80011ce:	2378      	movs	r3, #120	; 0x78
 80011d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011d4:	4864      	ldr	r0, [pc, #400]	; (8001368 <_printf_i+0x220>)
 80011d6:	e055      	b.n	8001284 <_printf_i+0x13c>
 80011d8:	6813      	ldr	r3, [r2, #0]
 80011da:	1d19      	adds	r1, r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6011      	str	r1, [r2, #0]
 80011e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011e8:	2301      	movs	r3, #1
 80011ea:	e08c      	b.n	8001306 <_printf_i+0x1be>
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6011      	str	r1, [r2, #0]
 80011f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80011f4:	bf18      	it	ne
 80011f6:	b21b      	sxthne	r3, r3
 80011f8:	e7cf      	b.n	800119a <_printf_i+0x52>
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	6825      	ldr	r5, [r4, #0]
 80011fe:	1d18      	adds	r0, r3, #4
 8001200:	6010      	str	r0, [r2, #0]
 8001202:	0628      	lsls	r0, r5, #24
 8001204:	d501      	bpl.n	800120a <_printf_i+0xc2>
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	e002      	b.n	8001210 <_printf_i+0xc8>
 800120a:	0668      	lsls	r0, r5, #25
 800120c:	d5fb      	bpl.n	8001206 <_printf_i+0xbe>
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4854      	ldr	r0, [pc, #336]	; (8001364 <_printf_i+0x21c>)
 8001212:	296f      	cmp	r1, #111	; 0x6f
 8001214:	bf14      	ite	ne
 8001216:	220a      	movne	r2, #10
 8001218:	2208      	moveq	r2, #8
 800121a:	2100      	movs	r1, #0
 800121c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001220:	6865      	ldr	r5, [r4, #4]
 8001222:	60a5      	str	r5, [r4, #8]
 8001224:	2d00      	cmp	r5, #0
 8001226:	f2c0 8095 	blt.w	8001354 <_printf_i+0x20c>
 800122a:	6821      	ldr	r1, [r4, #0]
 800122c:	f021 0104 	bic.w	r1, r1, #4
 8001230:	6021      	str	r1, [r4, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d13d      	bne.n	80012b2 <_printf_i+0x16a>
 8001236:	2d00      	cmp	r5, #0
 8001238:	f040 808e 	bne.w	8001358 <_printf_i+0x210>
 800123c:	4665      	mov	r5, ip
 800123e:	2a08      	cmp	r2, #8
 8001240:	d10b      	bne.n	800125a <_printf_i+0x112>
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	07db      	lsls	r3, r3, #31
 8001246:	d508      	bpl.n	800125a <_printf_i+0x112>
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	6862      	ldr	r2, [r4, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	bfde      	ittt	le
 8001250:	2330      	movle	r3, #48	; 0x30
 8001252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001256:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800125a:	ebac 0305 	sub.w	r3, ip, r5
 800125e:	6123      	str	r3, [r4, #16]
 8001260:	f8cd 8000 	str.w	r8, [sp]
 8001264:	463b      	mov	r3, r7
 8001266:	aa03      	add	r2, sp, #12
 8001268:	4621      	mov	r1, r4
 800126a:	4630      	mov	r0, r6
 800126c:	f7ff fef6 	bl	800105c <_printf_common>
 8001270:	3001      	adds	r0, #1
 8001272:	d14d      	bne.n	8001310 <_printf_i+0x1c8>
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001278:	b005      	add	sp, #20
 800127a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800127e:	4839      	ldr	r0, [pc, #228]	; (8001364 <_printf_i+0x21c>)
 8001280:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001284:	6813      	ldr	r3, [r2, #0]
 8001286:	6821      	ldr	r1, [r4, #0]
 8001288:	1d1d      	adds	r5, r3, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6015      	str	r5, [r2, #0]
 800128e:	060a      	lsls	r2, r1, #24
 8001290:	d50b      	bpl.n	80012aa <_printf_i+0x162>
 8001292:	07ca      	lsls	r2, r1, #31
 8001294:	bf44      	itt	mi
 8001296:	f041 0120 	orrmi.w	r1, r1, #32
 800129a:	6021      	strmi	r1, [r4, #0]
 800129c:	b91b      	cbnz	r3, 80012a6 <_printf_i+0x15e>
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	f022 0220 	bic.w	r2, r2, #32
 80012a4:	6022      	str	r2, [r4, #0]
 80012a6:	2210      	movs	r2, #16
 80012a8:	e7b7      	b.n	800121a <_printf_i+0xd2>
 80012aa:	064d      	lsls	r5, r1, #25
 80012ac:	bf48      	it	mi
 80012ae:	b29b      	uxthmi	r3, r3
 80012b0:	e7ef      	b.n	8001292 <_printf_i+0x14a>
 80012b2:	4665      	mov	r5, ip
 80012b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80012b8:	fb02 3311 	mls	r3, r2, r1, r3
 80012bc:	5cc3      	ldrb	r3, [r0, r3]
 80012be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80012c2:	460b      	mov	r3, r1
 80012c4:	2900      	cmp	r1, #0
 80012c6:	d1f5      	bne.n	80012b4 <_printf_i+0x16c>
 80012c8:	e7b9      	b.n	800123e <_printf_i+0xf6>
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	6825      	ldr	r5, [r4, #0]
 80012ce:	6961      	ldr	r1, [r4, #20]
 80012d0:	1d18      	adds	r0, r3, #4
 80012d2:	6010      	str	r0, [r2, #0]
 80012d4:	0628      	lsls	r0, r5, #24
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	d501      	bpl.n	80012de <_printf_i+0x196>
 80012da:	6019      	str	r1, [r3, #0]
 80012dc:	e002      	b.n	80012e4 <_printf_i+0x19c>
 80012de:	066a      	lsls	r2, r5, #25
 80012e0:	d5fb      	bpl.n	80012da <_printf_i+0x192>
 80012e2:	8019      	strh	r1, [r3, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	6123      	str	r3, [r4, #16]
 80012e8:	4665      	mov	r5, ip
 80012ea:	e7b9      	b.n	8001260 <_printf_i+0x118>
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	1d19      	adds	r1, r3, #4
 80012f0:	6011      	str	r1, [r2, #0]
 80012f2:	681d      	ldr	r5, [r3, #0]
 80012f4:	6862      	ldr	r2, [r4, #4]
 80012f6:	2100      	movs	r1, #0
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7fe ff79 	bl	80001f0 <memchr>
 80012fe:	b108      	cbz	r0, 8001304 <_printf_i+0x1bc>
 8001300:	1b40      	subs	r0, r0, r5
 8001302:	6060      	str	r0, [r4, #4]
 8001304:	6863      	ldr	r3, [r4, #4]
 8001306:	6123      	str	r3, [r4, #16]
 8001308:	2300      	movs	r3, #0
 800130a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800130e:	e7a7      	b.n	8001260 <_printf_i+0x118>
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	462a      	mov	r2, r5
 8001314:	4639      	mov	r1, r7
 8001316:	4630      	mov	r0, r6
 8001318:	47c0      	blx	r8
 800131a:	3001      	adds	r0, #1
 800131c:	d0aa      	beq.n	8001274 <_printf_i+0x12c>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	079b      	lsls	r3, r3, #30
 8001322:	d413      	bmi.n	800134c <_printf_i+0x204>
 8001324:	68e0      	ldr	r0, [r4, #12]
 8001326:	9b03      	ldr	r3, [sp, #12]
 8001328:	4298      	cmp	r0, r3
 800132a:	bfb8      	it	lt
 800132c:	4618      	movlt	r0, r3
 800132e:	e7a3      	b.n	8001278 <_printf_i+0x130>
 8001330:	2301      	movs	r3, #1
 8001332:	464a      	mov	r2, r9
 8001334:	4639      	mov	r1, r7
 8001336:	4630      	mov	r0, r6
 8001338:	47c0      	blx	r8
 800133a:	3001      	adds	r0, #1
 800133c:	d09a      	beq.n	8001274 <_printf_i+0x12c>
 800133e:	3501      	adds	r5, #1
 8001340:	68e3      	ldr	r3, [r4, #12]
 8001342:	9a03      	ldr	r2, [sp, #12]
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	42ab      	cmp	r3, r5
 8001348:	dcf2      	bgt.n	8001330 <_printf_i+0x1e8>
 800134a:	e7eb      	b.n	8001324 <_printf_i+0x1dc>
 800134c:	2500      	movs	r5, #0
 800134e:	f104 0919 	add.w	r9, r4, #25
 8001352:	e7f5      	b.n	8001340 <_printf_i+0x1f8>
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ac      	bne.n	80012b2 <_printf_i+0x16a>
 8001358:	7803      	ldrb	r3, [r0, #0]
 800135a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800135e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001362:	e76c      	b.n	800123e <_printf_i+0xf6>
 8001364:	08001d95 	.word	0x08001d95
 8001368:	08001da6 	.word	0x08001da6

0800136c <iprintf>:
 800136c:	b40f      	push	{r0, r1, r2, r3}
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <iprintf+0x2c>)
 8001370:	b513      	push	{r0, r1, r4, lr}
 8001372:	681c      	ldr	r4, [r3, #0]
 8001374:	b124      	cbz	r4, 8001380 <iprintf+0x14>
 8001376:	69a3      	ldr	r3, [r4, #24]
 8001378:	b913      	cbnz	r3, 8001380 <iprintf+0x14>
 800137a:	4620      	mov	r0, r4
 800137c:	f000 f9d2 	bl	8001724 <__sinit>
 8001380:	ab05      	add	r3, sp, #20
 8001382:	9a04      	ldr	r2, [sp, #16]
 8001384:	68a1      	ldr	r1, [r4, #8]
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff fd47 	bl	8000e1c <_vfiprintf_r>
 800138e:	b002      	add	sp, #8
 8001390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001394:	b004      	add	sp, #16
 8001396:	4770      	bx	lr
 8001398:	2000001c 	.word	0x2000001c

0800139c <putchar>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <putchar+0x24>)
 80013a0:	681c      	ldr	r4, [r3, #0]
 80013a2:	4605      	mov	r5, r0
 80013a4:	b124      	cbz	r4, 80013b0 <putchar+0x14>
 80013a6:	69a3      	ldr	r3, [r4, #24]
 80013a8:	b913      	cbnz	r3, 80013b0 <putchar+0x14>
 80013aa:	4620      	mov	r0, r4
 80013ac:	f000 f9ba 	bl	8001724 <__sinit>
 80013b0:	68a2      	ldr	r2, [r4, #8]
 80013b2:	4629      	mov	r1, r5
 80013b4:	4620      	mov	r0, r4
 80013b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013ba:	f000 bb49 	b.w	8001a50 <_putc_r>
 80013be:	bf00      	nop
 80013c0:	2000001c 	.word	0x2000001c

080013c4 <__swbuf_r>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	460e      	mov	r6, r1
 80013c8:	4614      	mov	r4, r2
 80013ca:	4605      	mov	r5, r0
 80013cc:	b118      	cbz	r0, 80013d6 <__swbuf_r+0x12>
 80013ce:	6983      	ldr	r3, [r0, #24]
 80013d0:	b90b      	cbnz	r3, 80013d6 <__swbuf_r+0x12>
 80013d2:	f000 f9a7 	bl	8001724 <__sinit>
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <__swbuf_r+0x98>)
 80013d8:	429c      	cmp	r4, r3
 80013da:	d12a      	bne.n	8001432 <__swbuf_r+0x6e>
 80013dc:	686c      	ldr	r4, [r5, #4]
 80013de:	69a3      	ldr	r3, [r4, #24]
 80013e0:	60a3      	str	r3, [r4, #8]
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	071a      	lsls	r2, r3, #28
 80013e6:	d52e      	bpl.n	8001446 <__swbuf_r+0x82>
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	b363      	cbz	r3, 8001446 <__swbuf_r+0x82>
 80013ec:	6923      	ldr	r3, [r4, #16]
 80013ee:	6820      	ldr	r0, [r4, #0]
 80013f0:	1ac0      	subs	r0, r0, r3
 80013f2:	6963      	ldr	r3, [r4, #20]
 80013f4:	b2f6      	uxtb	r6, r6
 80013f6:	4283      	cmp	r3, r0
 80013f8:	4637      	mov	r7, r6
 80013fa:	dc04      	bgt.n	8001406 <__swbuf_r+0x42>
 80013fc:	4621      	mov	r1, r4
 80013fe:	4628      	mov	r0, r5
 8001400:	f000 f926 	bl	8001650 <_fflush_r>
 8001404:	bb28      	cbnz	r0, 8001452 <__swbuf_r+0x8e>
 8001406:	68a3      	ldr	r3, [r4, #8]
 8001408:	3b01      	subs	r3, #1
 800140a:	60a3      	str	r3, [r4, #8]
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	6022      	str	r2, [r4, #0]
 8001412:	701e      	strb	r6, [r3, #0]
 8001414:	6963      	ldr	r3, [r4, #20]
 8001416:	3001      	adds	r0, #1
 8001418:	4283      	cmp	r3, r0
 800141a:	d004      	beq.n	8001426 <__swbuf_r+0x62>
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	07db      	lsls	r3, r3, #31
 8001420:	d519      	bpl.n	8001456 <__swbuf_r+0x92>
 8001422:	2e0a      	cmp	r6, #10
 8001424:	d117      	bne.n	8001456 <__swbuf_r+0x92>
 8001426:	4621      	mov	r1, r4
 8001428:	4628      	mov	r0, r5
 800142a:	f000 f911 	bl	8001650 <_fflush_r>
 800142e:	b190      	cbz	r0, 8001456 <__swbuf_r+0x92>
 8001430:	e00f      	b.n	8001452 <__swbuf_r+0x8e>
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <__swbuf_r+0x9c>)
 8001434:	429c      	cmp	r4, r3
 8001436:	d101      	bne.n	800143c <__swbuf_r+0x78>
 8001438:	68ac      	ldr	r4, [r5, #8]
 800143a:	e7d0      	b.n	80013de <__swbuf_r+0x1a>
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <__swbuf_r+0xa0>)
 800143e:	429c      	cmp	r4, r3
 8001440:	bf08      	it	eq
 8001442:	68ec      	ldreq	r4, [r5, #12]
 8001444:	e7cb      	b.n	80013de <__swbuf_r+0x1a>
 8001446:	4621      	mov	r1, r4
 8001448:	4628      	mov	r0, r5
 800144a:	f000 f80d 	bl	8001468 <__swsetup_r>
 800144e:	2800      	cmp	r0, #0
 8001450:	d0cc      	beq.n	80013ec <__swbuf_r+0x28>
 8001452:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001456:	4638      	mov	r0, r7
 8001458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800145a:	bf00      	nop
 800145c:	08001dd8 	.word	0x08001dd8
 8001460:	08001df8 	.word	0x08001df8
 8001464:	08001db8 	.word	0x08001db8

08001468 <__swsetup_r>:
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <__swsetup_r+0xcc>)
 800146a:	b570      	push	{r4, r5, r6, lr}
 800146c:	681d      	ldr	r5, [r3, #0]
 800146e:	4606      	mov	r6, r0
 8001470:	460c      	mov	r4, r1
 8001472:	b125      	cbz	r5, 800147e <__swsetup_r+0x16>
 8001474:	69ab      	ldr	r3, [r5, #24]
 8001476:	b913      	cbnz	r3, 800147e <__swsetup_r+0x16>
 8001478:	4628      	mov	r0, r5
 800147a:	f000 f953 	bl	8001724 <__sinit>
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <__swsetup_r+0xd0>)
 8001480:	429c      	cmp	r4, r3
 8001482:	d10f      	bne.n	80014a4 <__swsetup_r+0x3c>
 8001484:	686c      	ldr	r4, [r5, #4]
 8001486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148a:	b29a      	uxth	r2, r3
 800148c:	0715      	lsls	r5, r2, #28
 800148e:	d42c      	bmi.n	80014ea <__swsetup_r+0x82>
 8001490:	06d0      	lsls	r0, r2, #27
 8001492:	d411      	bmi.n	80014b8 <__swsetup_r+0x50>
 8001494:	2209      	movs	r2, #9
 8001496:	6032      	str	r2, [r6, #0]
 8001498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149c:	81a3      	strh	r3, [r4, #12]
 800149e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a2:	e03e      	b.n	8001522 <__swsetup_r+0xba>
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <__swsetup_r+0xd4>)
 80014a6:	429c      	cmp	r4, r3
 80014a8:	d101      	bne.n	80014ae <__swsetup_r+0x46>
 80014aa:	68ac      	ldr	r4, [r5, #8]
 80014ac:	e7eb      	b.n	8001486 <__swsetup_r+0x1e>
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <__swsetup_r+0xd8>)
 80014b0:	429c      	cmp	r4, r3
 80014b2:	bf08      	it	eq
 80014b4:	68ec      	ldreq	r4, [r5, #12]
 80014b6:	e7e6      	b.n	8001486 <__swsetup_r+0x1e>
 80014b8:	0751      	lsls	r1, r2, #29
 80014ba:	d512      	bpl.n	80014e2 <__swsetup_r+0x7a>
 80014bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014be:	b141      	cbz	r1, 80014d2 <__swsetup_r+0x6a>
 80014c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014c4:	4299      	cmp	r1, r3
 80014c6:	d002      	beq.n	80014ce <__swsetup_r+0x66>
 80014c8:	4630      	mov	r0, r6
 80014ca:	f000 fa19 	bl	8001900 <_free_r>
 80014ce:	2300      	movs	r3, #0
 80014d0:	6363      	str	r3, [r4, #52]	; 0x34
 80014d2:	89a3      	ldrh	r3, [r4, #12]
 80014d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014d8:	81a3      	strh	r3, [r4, #12]
 80014da:	2300      	movs	r3, #0
 80014dc:	6063      	str	r3, [r4, #4]
 80014de:	6923      	ldr	r3, [r4, #16]
 80014e0:	6023      	str	r3, [r4, #0]
 80014e2:	89a3      	ldrh	r3, [r4, #12]
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	81a3      	strh	r3, [r4, #12]
 80014ea:	6923      	ldr	r3, [r4, #16]
 80014ec:	b94b      	cbnz	r3, 8001502 <__swsetup_r+0x9a>
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d003      	beq.n	8001502 <__swsetup_r+0x9a>
 80014fa:	4621      	mov	r1, r4
 80014fc:	4630      	mov	r0, r6
 80014fe:	f000 f9bf 	bl	8001880 <__smakebuf_r>
 8001502:	89a2      	ldrh	r2, [r4, #12]
 8001504:	f012 0301 	ands.w	r3, r2, #1
 8001508:	d00c      	beq.n	8001524 <__swsetup_r+0xbc>
 800150a:	2300      	movs	r3, #0
 800150c:	60a3      	str	r3, [r4, #8]
 800150e:	6963      	ldr	r3, [r4, #20]
 8001510:	425b      	negs	r3, r3
 8001512:	61a3      	str	r3, [r4, #24]
 8001514:	6923      	ldr	r3, [r4, #16]
 8001516:	b953      	cbnz	r3, 800152e <__swsetup_r+0xc6>
 8001518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800151c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001520:	d1ba      	bne.n	8001498 <__swsetup_r+0x30>
 8001522:	bd70      	pop	{r4, r5, r6, pc}
 8001524:	0792      	lsls	r2, r2, #30
 8001526:	bf58      	it	pl
 8001528:	6963      	ldrpl	r3, [r4, #20]
 800152a:	60a3      	str	r3, [r4, #8]
 800152c:	e7f2      	b.n	8001514 <__swsetup_r+0xac>
 800152e:	2000      	movs	r0, #0
 8001530:	e7f7      	b.n	8001522 <__swsetup_r+0xba>
 8001532:	bf00      	nop
 8001534:	2000001c 	.word	0x2000001c
 8001538:	08001dd8 	.word	0x08001dd8
 800153c:	08001df8 	.word	0x08001df8
 8001540:	08001db8 	.word	0x08001db8

08001544 <__sflush_r>:
 8001544:	898a      	ldrh	r2, [r1, #12]
 8001546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800154a:	4605      	mov	r5, r0
 800154c:	0710      	lsls	r0, r2, #28
 800154e:	460c      	mov	r4, r1
 8001550:	d458      	bmi.n	8001604 <__sflush_r+0xc0>
 8001552:	684b      	ldr	r3, [r1, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dc05      	bgt.n	8001564 <__sflush_r+0x20>
 8001558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc02      	bgt.n	8001564 <__sflush_r+0x20>
 800155e:	2000      	movs	r0, #0
 8001560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001566:	2e00      	cmp	r6, #0
 8001568:	d0f9      	beq.n	800155e <__sflush_r+0x1a>
 800156a:	2300      	movs	r3, #0
 800156c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001570:	682f      	ldr	r7, [r5, #0]
 8001572:	6a21      	ldr	r1, [r4, #32]
 8001574:	602b      	str	r3, [r5, #0]
 8001576:	d032      	beq.n	80015de <__sflush_r+0x9a>
 8001578:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800157a:	89a3      	ldrh	r3, [r4, #12]
 800157c:	075a      	lsls	r2, r3, #29
 800157e:	d505      	bpl.n	800158c <__sflush_r+0x48>
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	1ac0      	subs	r0, r0, r3
 8001584:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001586:	b10b      	cbz	r3, 800158c <__sflush_r+0x48>
 8001588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800158a:	1ac0      	subs	r0, r0, r3
 800158c:	2300      	movs	r3, #0
 800158e:	4602      	mov	r2, r0
 8001590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001592:	6a21      	ldr	r1, [r4, #32]
 8001594:	4628      	mov	r0, r5
 8001596:	47b0      	blx	r6
 8001598:	1c43      	adds	r3, r0, #1
 800159a:	89a3      	ldrh	r3, [r4, #12]
 800159c:	d106      	bne.n	80015ac <__sflush_r+0x68>
 800159e:	6829      	ldr	r1, [r5, #0]
 80015a0:	291d      	cmp	r1, #29
 80015a2:	d848      	bhi.n	8001636 <__sflush_r+0xf2>
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <__sflush_r+0x108>)
 80015a6:	40ca      	lsrs	r2, r1
 80015a8:	07d6      	lsls	r6, r2, #31
 80015aa:	d544      	bpl.n	8001636 <__sflush_r+0xf2>
 80015ac:	2200      	movs	r2, #0
 80015ae:	6062      	str	r2, [r4, #4]
 80015b0:	04d9      	lsls	r1, r3, #19
 80015b2:	6922      	ldr	r2, [r4, #16]
 80015b4:	6022      	str	r2, [r4, #0]
 80015b6:	d504      	bpl.n	80015c2 <__sflush_r+0x7e>
 80015b8:	1c42      	adds	r2, r0, #1
 80015ba:	d101      	bne.n	80015c0 <__sflush_r+0x7c>
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	b903      	cbnz	r3, 80015c2 <__sflush_r+0x7e>
 80015c0:	6560      	str	r0, [r4, #84]	; 0x54
 80015c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015c4:	602f      	str	r7, [r5, #0]
 80015c6:	2900      	cmp	r1, #0
 80015c8:	d0c9      	beq.n	800155e <__sflush_r+0x1a>
 80015ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015ce:	4299      	cmp	r1, r3
 80015d0:	d002      	beq.n	80015d8 <__sflush_r+0x94>
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 f994 	bl	8001900 <_free_r>
 80015d8:	2000      	movs	r0, #0
 80015da:	6360      	str	r0, [r4, #52]	; 0x34
 80015dc:	e7c0      	b.n	8001560 <__sflush_r+0x1c>
 80015de:	2301      	movs	r3, #1
 80015e0:	4628      	mov	r0, r5
 80015e2:	47b0      	blx	r6
 80015e4:	1c41      	adds	r1, r0, #1
 80015e6:	d1c8      	bne.n	800157a <__sflush_r+0x36>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0c5      	beq.n	800157a <__sflush_r+0x36>
 80015ee:	2b1d      	cmp	r3, #29
 80015f0:	d001      	beq.n	80015f6 <__sflush_r+0xb2>
 80015f2:	2b16      	cmp	r3, #22
 80015f4:	d101      	bne.n	80015fa <__sflush_r+0xb6>
 80015f6:	602f      	str	r7, [r5, #0]
 80015f8:	e7b1      	b.n	800155e <__sflush_r+0x1a>
 80015fa:	89a3      	ldrh	r3, [r4, #12]
 80015fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001600:	81a3      	strh	r3, [r4, #12]
 8001602:	e7ad      	b.n	8001560 <__sflush_r+0x1c>
 8001604:	690f      	ldr	r7, [r1, #16]
 8001606:	2f00      	cmp	r7, #0
 8001608:	d0a9      	beq.n	800155e <__sflush_r+0x1a>
 800160a:	0793      	lsls	r3, r2, #30
 800160c:	680e      	ldr	r6, [r1, #0]
 800160e:	bf08      	it	eq
 8001610:	694b      	ldreq	r3, [r1, #20]
 8001612:	600f      	str	r7, [r1, #0]
 8001614:	bf18      	it	ne
 8001616:	2300      	movne	r3, #0
 8001618:	eba6 0807 	sub.w	r8, r6, r7
 800161c:	608b      	str	r3, [r1, #8]
 800161e:	f1b8 0f00 	cmp.w	r8, #0
 8001622:	dd9c      	ble.n	800155e <__sflush_r+0x1a>
 8001624:	4643      	mov	r3, r8
 8001626:	463a      	mov	r2, r7
 8001628:	6a21      	ldr	r1, [r4, #32]
 800162a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800162c:	4628      	mov	r0, r5
 800162e:	47b0      	blx	r6
 8001630:	2800      	cmp	r0, #0
 8001632:	dc06      	bgt.n	8001642 <__sflush_r+0xfe>
 8001634:	89a3      	ldrh	r3, [r4, #12]
 8001636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163a:	81a3      	strh	r3, [r4, #12]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001640:	e78e      	b.n	8001560 <__sflush_r+0x1c>
 8001642:	4407      	add	r7, r0
 8001644:	eba8 0800 	sub.w	r8, r8, r0
 8001648:	e7e9      	b.n	800161e <__sflush_r+0xda>
 800164a:	bf00      	nop
 800164c:	20400001 	.word	0x20400001

08001650 <_fflush_r>:
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	690b      	ldr	r3, [r1, #16]
 8001654:	4605      	mov	r5, r0
 8001656:	460c      	mov	r4, r1
 8001658:	b1db      	cbz	r3, 8001692 <_fflush_r+0x42>
 800165a:	b118      	cbz	r0, 8001664 <_fflush_r+0x14>
 800165c:	6983      	ldr	r3, [r0, #24]
 800165e:	b90b      	cbnz	r3, 8001664 <_fflush_r+0x14>
 8001660:	f000 f860 	bl	8001724 <__sinit>
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <_fflush_r+0x48>)
 8001666:	429c      	cmp	r4, r3
 8001668:	d109      	bne.n	800167e <_fflush_r+0x2e>
 800166a:	686c      	ldr	r4, [r5, #4]
 800166c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001670:	b17b      	cbz	r3, 8001692 <_fflush_r+0x42>
 8001672:	4621      	mov	r1, r4
 8001674:	4628      	mov	r0, r5
 8001676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800167a:	f7ff bf63 	b.w	8001544 <__sflush_r>
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_fflush_r+0x4c>)
 8001680:	429c      	cmp	r4, r3
 8001682:	d101      	bne.n	8001688 <_fflush_r+0x38>
 8001684:	68ac      	ldr	r4, [r5, #8]
 8001686:	e7f1      	b.n	800166c <_fflush_r+0x1c>
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <_fflush_r+0x50>)
 800168a:	429c      	cmp	r4, r3
 800168c:	bf08      	it	eq
 800168e:	68ec      	ldreq	r4, [r5, #12]
 8001690:	e7ec      	b.n	800166c <_fflush_r+0x1c>
 8001692:	2000      	movs	r0, #0
 8001694:	bd38      	pop	{r3, r4, r5, pc}
 8001696:	bf00      	nop
 8001698:	08001dd8 	.word	0x08001dd8
 800169c:	08001df8 	.word	0x08001df8
 80016a0:	08001db8 	.word	0x08001db8

080016a4 <std>:
 80016a4:	2300      	movs	r3, #0
 80016a6:	b510      	push	{r4, lr}
 80016a8:	4604      	mov	r4, r0
 80016aa:	e9c0 3300 	strd	r3, r3, [r0]
 80016ae:	6083      	str	r3, [r0, #8]
 80016b0:	8181      	strh	r1, [r0, #12]
 80016b2:	6643      	str	r3, [r0, #100]	; 0x64
 80016b4:	81c2      	strh	r2, [r0, #14]
 80016b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016ba:	6183      	str	r3, [r0, #24]
 80016bc:	4619      	mov	r1, r3
 80016be:	2208      	movs	r2, #8
 80016c0:	305c      	adds	r0, #92	; 0x5c
 80016c2:	f7ff fb79 	bl	8000db8 <memset>
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <std+0x38>)
 80016c8:	6263      	str	r3, [r4, #36]	; 0x24
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <std+0x3c>)
 80016cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <std+0x40>)
 80016d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <std+0x44>)
 80016d4:	6224      	str	r4, [r4, #32]
 80016d6:	6323      	str	r3, [r4, #48]	; 0x30
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	bf00      	nop
 80016dc:	08001add 	.word	0x08001add
 80016e0:	08001aff 	.word	0x08001aff
 80016e4:	08001b37 	.word	0x08001b37
 80016e8:	08001b5b 	.word	0x08001b5b

080016ec <_cleanup_r>:
 80016ec:	4901      	ldr	r1, [pc, #4]	; (80016f4 <_cleanup_r+0x8>)
 80016ee:	f000 b885 	b.w	80017fc <_fwalk_reent>
 80016f2:	bf00      	nop
 80016f4:	08001651 	.word	0x08001651

080016f8 <__sfmoreglue>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	1e4a      	subs	r2, r1, #1
 80016fc:	2568      	movs	r5, #104	; 0x68
 80016fe:	4355      	muls	r5, r2
 8001700:	460e      	mov	r6, r1
 8001702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001706:	f000 f949 	bl	800199c <_malloc_r>
 800170a:	4604      	mov	r4, r0
 800170c:	b140      	cbz	r0, 8001720 <__sfmoreglue+0x28>
 800170e:	2100      	movs	r1, #0
 8001710:	e9c0 1600 	strd	r1, r6, [r0]
 8001714:	300c      	adds	r0, #12
 8001716:	60a0      	str	r0, [r4, #8]
 8001718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800171c:	f7ff fb4c 	bl	8000db8 <memset>
 8001720:	4620      	mov	r0, r4
 8001722:	bd70      	pop	{r4, r5, r6, pc}

08001724 <__sinit>:
 8001724:	6983      	ldr	r3, [r0, #24]
 8001726:	b510      	push	{r4, lr}
 8001728:	4604      	mov	r4, r0
 800172a:	bb33      	cbnz	r3, 800177a <__sinit+0x56>
 800172c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001730:	6503      	str	r3, [r0, #80]	; 0x50
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <__sinit+0x58>)
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <__sinit+0x5c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6282      	str	r2, [r0, #40]	; 0x28
 800173a:	4298      	cmp	r0, r3
 800173c:	bf04      	itt	eq
 800173e:	2301      	moveq	r3, #1
 8001740:	6183      	streq	r3, [r0, #24]
 8001742:	f000 f81f 	bl	8001784 <__sfp>
 8001746:	6060      	str	r0, [r4, #4]
 8001748:	4620      	mov	r0, r4
 800174a:	f000 f81b 	bl	8001784 <__sfp>
 800174e:	60a0      	str	r0, [r4, #8]
 8001750:	4620      	mov	r0, r4
 8001752:	f000 f817 	bl	8001784 <__sfp>
 8001756:	2200      	movs	r2, #0
 8001758:	60e0      	str	r0, [r4, #12]
 800175a:	2104      	movs	r1, #4
 800175c:	6860      	ldr	r0, [r4, #4]
 800175e:	f7ff ffa1 	bl	80016a4 <std>
 8001762:	2201      	movs	r2, #1
 8001764:	2109      	movs	r1, #9
 8001766:	68a0      	ldr	r0, [r4, #8]
 8001768:	f7ff ff9c 	bl	80016a4 <std>
 800176c:	2202      	movs	r2, #2
 800176e:	2112      	movs	r1, #18
 8001770:	68e0      	ldr	r0, [r4, #12]
 8001772:	f7ff ff97 	bl	80016a4 <std>
 8001776:	2301      	movs	r3, #1
 8001778:	61a3      	str	r3, [r4, #24]
 800177a:	bd10      	pop	{r4, pc}
 800177c:	08001d80 	.word	0x08001d80
 8001780:	080016ed 	.word	0x080016ed

08001784 <__sfp>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <__sfp+0x70>)
 8001788:	681e      	ldr	r6, [r3, #0]
 800178a:	69b3      	ldr	r3, [r6, #24]
 800178c:	4607      	mov	r7, r0
 800178e:	b913      	cbnz	r3, 8001796 <__sfp+0x12>
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff ffc7 	bl	8001724 <__sinit>
 8001796:	3648      	adds	r6, #72	; 0x48
 8001798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800179c:	3b01      	subs	r3, #1
 800179e:	d503      	bpl.n	80017a8 <__sfp+0x24>
 80017a0:	6833      	ldr	r3, [r6, #0]
 80017a2:	b133      	cbz	r3, 80017b2 <__sfp+0x2e>
 80017a4:	6836      	ldr	r6, [r6, #0]
 80017a6:	e7f7      	b.n	8001798 <__sfp+0x14>
 80017a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017ac:	b16d      	cbz	r5, 80017ca <__sfp+0x46>
 80017ae:	3468      	adds	r4, #104	; 0x68
 80017b0:	e7f4      	b.n	800179c <__sfp+0x18>
 80017b2:	2104      	movs	r1, #4
 80017b4:	4638      	mov	r0, r7
 80017b6:	f7ff ff9f 	bl	80016f8 <__sfmoreglue>
 80017ba:	6030      	str	r0, [r6, #0]
 80017bc:	2800      	cmp	r0, #0
 80017be:	d1f1      	bne.n	80017a4 <__sfp+0x20>
 80017c0:	230c      	movs	r3, #12
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	4604      	mov	r4, r0
 80017c6:	4620      	mov	r0, r4
 80017c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <__sfp+0x74>)
 80017cc:	6665      	str	r5, [r4, #100]	; 0x64
 80017ce:	e9c4 5500 	strd	r5, r5, [r4]
 80017d2:	60a5      	str	r5, [r4, #8]
 80017d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80017d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80017dc:	2208      	movs	r2, #8
 80017de:	4629      	mov	r1, r5
 80017e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017e4:	f7ff fae8 	bl	8000db8 <memset>
 80017e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017f0:	e7e9      	b.n	80017c6 <__sfp+0x42>
 80017f2:	bf00      	nop
 80017f4:	08001d80 	.word	0x08001d80
 80017f8:	ffff0001 	.word	0xffff0001

080017fc <_fwalk_reent>:
 80017fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001800:	4680      	mov	r8, r0
 8001802:	4689      	mov	r9, r1
 8001804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001808:	2600      	movs	r6, #0
 800180a:	b914      	cbnz	r4, 8001812 <_fwalk_reent+0x16>
 800180c:	4630      	mov	r0, r6
 800180e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001812:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001816:	3f01      	subs	r7, #1
 8001818:	d501      	bpl.n	800181e <_fwalk_reent+0x22>
 800181a:	6824      	ldr	r4, [r4, #0]
 800181c:	e7f5      	b.n	800180a <_fwalk_reent+0xe>
 800181e:	89ab      	ldrh	r3, [r5, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d907      	bls.n	8001834 <_fwalk_reent+0x38>
 8001824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001828:	3301      	adds	r3, #1
 800182a:	d003      	beq.n	8001834 <_fwalk_reent+0x38>
 800182c:	4629      	mov	r1, r5
 800182e:	4640      	mov	r0, r8
 8001830:	47c8      	blx	r9
 8001832:	4306      	orrs	r6, r0
 8001834:	3568      	adds	r5, #104	; 0x68
 8001836:	e7ee      	b.n	8001816 <_fwalk_reent+0x1a>

08001838 <__swhatbuf_r>:
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	460e      	mov	r6, r1
 800183c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001840:	2900      	cmp	r1, #0
 8001842:	b096      	sub	sp, #88	; 0x58
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	da07      	bge.n	800185a <__swhatbuf_r+0x22>
 800184a:	2300      	movs	r3, #0
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	89b3      	ldrh	r3, [r6, #12]
 8001850:	061a      	lsls	r2, r3, #24
 8001852:	d410      	bmi.n	8001876 <__swhatbuf_r+0x3e>
 8001854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001858:	e00e      	b.n	8001878 <__swhatbuf_r+0x40>
 800185a:	466a      	mov	r2, sp
 800185c:	f000 f9a4 	bl	8001ba8 <_fstat_r>
 8001860:	2800      	cmp	r0, #0
 8001862:	dbf2      	blt.n	800184a <__swhatbuf_r+0x12>
 8001864:	9a01      	ldr	r2, [sp, #4]
 8001866:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800186a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800186e:	425a      	negs	r2, r3
 8001870:	415a      	adcs	r2, r3
 8001872:	602a      	str	r2, [r5, #0]
 8001874:	e7ee      	b.n	8001854 <__swhatbuf_r+0x1c>
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	2000      	movs	r0, #0
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	b016      	add	sp, #88	; 0x58
 800187e:	bd70      	pop	{r4, r5, r6, pc}

08001880 <__smakebuf_r>:
 8001880:	898b      	ldrh	r3, [r1, #12]
 8001882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001884:	079d      	lsls	r5, r3, #30
 8001886:	4606      	mov	r6, r0
 8001888:	460c      	mov	r4, r1
 800188a:	d507      	bpl.n	800189c <__smakebuf_r+0x1c>
 800188c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001890:	6023      	str	r3, [r4, #0]
 8001892:	6123      	str	r3, [r4, #16]
 8001894:	2301      	movs	r3, #1
 8001896:	6163      	str	r3, [r4, #20]
 8001898:	b002      	add	sp, #8
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	ab01      	add	r3, sp, #4
 800189e:	466a      	mov	r2, sp
 80018a0:	f7ff ffca 	bl	8001838 <__swhatbuf_r>
 80018a4:	9900      	ldr	r1, [sp, #0]
 80018a6:	4605      	mov	r5, r0
 80018a8:	4630      	mov	r0, r6
 80018aa:	f000 f877 	bl	800199c <_malloc_r>
 80018ae:	b948      	cbnz	r0, 80018c4 <__smakebuf_r+0x44>
 80018b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018b4:	059a      	lsls	r2, r3, #22
 80018b6:	d4ef      	bmi.n	8001898 <__smakebuf_r+0x18>
 80018b8:	f023 0303 	bic.w	r3, r3, #3
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	81a3      	strh	r3, [r4, #12]
 80018c2:	e7e3      	b.n	800188c <__smakebuf_r+0xc>
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <__smakebuf_r+0x7c>)
 80018c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80018c8:	89a3      	ldrh	r3, [r4, #12]
 80018ca:	6020      	str	r0, [r4, #0]
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	81a3      	strh	r3, [r4, #12]
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	6163      	str	r3, [r4, #20]
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	6120      	str	r0, [r4, #16]
 80018da:	b15b      	cbz	r3, 80018f4 <__smakebuf_r+0x74>
 80018dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018e0:	4630      	mov	r0, r6
 80018e2:	f000 f973 	bl	8001bcc <_isatty_r>
 80018e6:	b128      	cbz	r0, 80018f4 <__smakebuf_r+0x74>
 80018e8:	89a3      	ldrh	r3, [r4, #12]
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	81a3      	strh	r3, [r4, #12]
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	431d      	orrs	r5, r3
 80018f8:	81a5      	strh	r5, [r4, #12]
 80018fa:	e7cd      	b.n	8001898 <__smakebuf_r+0x18>
 80018fc:	080016ed 	.word	0x080016ed

08001900 <_free_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4605      	mov	r5, r0
 8001904:	2900      	cmp	r1, #0
 8001906:	d045      	beq.n	8001994 <_free_r+0x94>
 8001908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800190c:	1f0c      	subs	r4, r1, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	bfb8      	it	lt
 8001912:	18e4      	addlt	r4, r4, r3
 8001914:	f000 f97c 	bl	8001c10 <__malloc_lock>
 8001918:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <_free_r+0x98>)
 800191a:	6813      	ldr	r3, [r2, #0]
 800191c:	4610      	mov	r0, r2
 800191e:	b933      	cbnz	r3, 800192e <_free_r+0x2e>
 8001920:	6063      	str	r3, [r4, #4]
 8001922:	6014      	str	r4, [r2, #0]
 8001924:	4628      	mov	r0, r5
 8001926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800192a:	f000 b972 	b.w	8001c12 <__malloc_unlock>
 800192e:	42a3      	cmp	r3, r4
 8001930:	d90c      	bls.n	800194c <_free_r+0x4c>
 8001932:	6821      	ldr	r1, [r4, #0]
 8001934:	1862      	adds	r2, r4, r1
 8001936:	4293      	cmp	r3, r2
 8001938:	bf04      	itt	eq
 800193a:	681a      	ldreq	r2, [r3, #0]
 800193c:	685b      	ldreq	r3, [r3, #4]
 800193e:	6063      	str	r3, [r4, #4]
 8001940:	bf04      	itt	eq
 8001942:	1852      	addeq	r2, r2, r1
 8001944:	6022      	streq	r2, [r4, #0]
 8001946:	6004      	str	r4, [r0, #0]
 8001948:	e7ec      	b.n	8001924 <_free_r+0x24>
 800194a:	4613      	mov	r3, r2
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	b10a      	cbz	r2, 8001954 <_free_r+0x54>
 8001950:	42a2      	cmp	r2, r4
 8001952:	d9fa      	bls.n	800194a <_free_r+0x4a>
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	1858      	adds	r0, r3, r1
 8001958:	42a0      	cmp	r0, r4
 800195a:	d10b      	bne.n	8001974 <_free_r+0x74>
 800195c:	6820      	ldr	r0, [r4, #0]
 800195e:	4401      	add	r1, r0
 8001960:	1858      	adds	r0, r3, r1
 8001962:	4282      	cmp	r2, r0
 8001964:	6019      	str	r1, [r3, #0]
 8001966:	d1dd      	bne.n	8001924 <_free_r+0x24>
 8001968:	6810      	ldr	r0, [r2, #0]
 800196a:	6852      	ldr	r2, [r2, #4]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	4401      	add	r1, r0
 8001970:	6019      	str	r1, [r3, #0]
 8001972:	e7d7      	b.n	8001924 <_free_r+0x24>
 8001974:	d902      	bls.n	800197c <_free_r+0x7c>
 8001976:	230c      	movs	r3, #12
 8001978:	602b      	str	r3, [r5, #0]
 800197a:	e7d3      	b.n	8001924 <_free_r+0x24>
 800197c:	6820      	ldr	r0, [r4, #0]
 800197e:	1821      	adds	r1, r4, r0
 8001980:	428a      	cmp	r2, r1
 8001982:	bf04      	itt	eq
 8001984:	6811      	ldreq	r1, [r2, #0]
 8001986:	6852      	ldreq	r2, [r2, #4]
 8001988:	6062      	str	r2, [r4, #4]
 800198a:	bf04      	itt	eq
 800198c:	1809      	addeq	r1, r1, r0
 800198e:	6021      	streq	r1, [r4, #0]
 8001990:	605c      	str	r4, [r3, #4]
 8001992:	e7c7      	b.n	8001924 <_free_r+0x24>
 8001994:	bd38      	pop	{r3, r4, r5, pc}
 8001996:	bf00      	nop
 8001998:	200000a0 	.word	0x200000a0

0800199c <_malloc_r>:
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	1ccd      	adds	r5, r1, #3
 80019a0:	f025 0503 	bic.w	r5, r5, #3
 80019a4:	3508      	adds	r5, #8
 80019a6:	2d0c      	cmp	r5, #12
 80019a8:	bf38      	it	cc
 80019aa:	250c      	movcc	r5, #12
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	4606      	mov	r6, r0
 80019b0:	db01      	blt.n	80019b6 <_malloc_r+0x1a>
 80019b2:	42a9      	cmp	r1, r5
 80019b4:	d903      	bls.n	80019be <_malloc_r+0x22>
 80019b6:	230c      	movs	r3, #12
 80019b8:	6033      	str	r3, [r6, #0]
 80019ba:	2000      	movs	r0, #0
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	f000 f927 	bl	8001c10 <__malloc_lock>
 80019c2:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <_malloc_r+0xac>)
 80019c4:	6814      	ldr	r4, [r2, #0]
 80019c6:	4621      	mov	r1, r4
 80019c8:	b991      	cbnz	r1, 80019f0 <_malloc_r+0x54>
 80019ca:	4c20      	ldr	r4, [pc, #128]	; (8001a4c <_malloc_r+0xb0>)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	b91b      	cbnz	r3, 80019d8 <_malloc_r+0x3c>
 80019d0:	4630      	mov	r0, r6
 80019d2:	f000 f873 	bl	8001abc <_sbrk_r>
 80019d6:	6020      	str	r0, [r4, #0]
 80019d8:	4629      	mov	r1, r5
 80019da:	4630      	mov	r0, r6
 80019dc:	f000 f86e 	bl	8001abc <_sbrk_r>
 80019e0:	1c43      	adds	r3, r0, #1
 80019e2:	d124      	bne.n	8001a2e <_malloc_r+0x92>
 80019e4:	230c      	movs	r3, #12
 80019e6:	6033      	str	r3, [r6, #0]
 80019e8:	4630      	mov	r0, r6
 80019ea:	f000 f912 	bl	8001c12 <__malloc_unlock>
 80019ee:	e7e4      	b.n	80019ba <_malloc_r+0x1e>
 80019f0:	680b      	ldr	r3, [r1, #0]
 80019f2:	1b5b      	subs	r3, r3, r5
 80019f4:	d418      	bmi.n	8001a28 <_malloc_r+0x8c>
 80019f6:	2b0b      	cmp	r3, #11
 80019f8:	d90f      	bls.n	8001a1a <_malloc_r+0x7e>
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	50cd      	str	r5, [r1, r3]
 80019fe:	18cc      	adds	r4, r1, r3
 8001a00:	4630      	mov	r0, r6
 8001a02:	f000 f906 	bl	8001c12 <__malloc_unlock>
 8001a06:	f104 000b 	add.w	r0, r4, #11
 8001a0a:	1d23      	adds	r3, r4, #4
 8001a0c:	f020 0007 	bic.w	r0, r0, #7
 8001a10:	1ac3      	subs	r3, r0, r3
 8001a12:	d0d3      	beq.n	80019bc <_malloc_r+0x20>
 8001a14:	425a      	negs	r2, r3
 8001a16:	50e2      	str	r2, [r4, r3]
 8001a18:	e7d0      	b.n	80019bc <_malloc_r+0x20>
 8001a1a:	428c      	cmp	r4, r1
 8001a1c:	684b      	ldr	r3, [r1, #4]
 8001a1e:	bf16      	itet	ne
 8001a20:	6063      	strne	r3, [r4, #4]
 8001a22:	6013      	streq	r3, [r2, #0]
 8001a24:	460c      	movne	r4, r1
 8001a26:	e7eb      	b.n	8001a00 <_malloc_r+0x64>
 8001a28:	460c      	mov	r4, r1
 8001a2a:	6849      	ldr	r1, [r1, #4]
 8001a2c:	e7cc      	b.n	80019c8 <_malloc_r+0x2c>
 8001a2e:	1cc4      	adds	r4, r0, #3
 8001a30:	f024 0403 	bic.w	r4, r4, #3
 8001a34:	42a0      	cmp	r0, r4
 8001a36:	d005      	beq.n	8001a44 <_malloc_r+0xa8>
 8001a38:	1a21      	subs	r1, r4, r0
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f000 f83e 	bl	8001abc <_sbrk_r>
 8001a40:	3001      	adds	r0, #1
 8001a42:	d0cf      	beq.n	80019e4 <_malloc_r+0x48>
 8001a44:	6025      	str	r5, [r4, #0]
 8001a46:	e7db      	b.n	8001a00 <_malloc_r+0x64>
 8001a48:	200000a0 	.word	0x200000a0
 8001a4c:	200000a4 	.word	0x200000a4

08001a50 <_putc_r>:
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	460d      	mov	r5, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	4606      	mov	r6, r0
 8001a58:	b118      	cbz	r0, 8001a62 <_putc_r+0x12>
 8001a5a:	6983      	ldr	r3, [r0, #24]
 8001a5c:	b90b      	cbnz	r3, 8001a62 <_putc_r+0x12>
 8001a5e:	f7ff fe61 	bl	8001724 <__sinit>
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_putc_r+0x60>)
 8001a64:	429c      	cmp	r4, r3
 8001a66:	d112      	bne.n	8001a8e <_putc_r+0x3e>
 8001a68:	6874      	ldr	r4, [r6, #4]
 8001a6a:	68a3      	ldr	r3, [r4, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	60a3      	str	r3, [r4, #8]
 8001a72:	da16      	bge.n	8001aa2 <_putc_r+0x52>
 8001a74:	69a2      	ldr	r2, [r4, #24]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	db02      	blt.n	8001a80 <_putc_r+0x30>
 8001a7a:	b2eb      	uxtb	r3, r5
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d110      	bne.n	8001aa2 <_putc_r+0x52>
 8001a80:	4622      	mov	r2, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	4630      	mov	r0, r6
 8001a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a8a:	f7ff bc9b 	b.w	80013c4 <__swbuf_r>
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <_putc_r+0x64>)
 8001a90:	429c      	cmp	r4, r3
 8001a92:	d101      	bne.n	8001a98 <_putc_r+0x48>
 8001a94:	68b4      	ldr	r4, [r6, #8]
 8001a96:	e7e8      	b.n	8001a6a <_putc_r+0x1a>
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <_putc_r+0x68>)
 8001a9a:	429c      	cmp	r4, r3
 8001a9c:	bf08      	it	eq
 8001a9e:	68f4      	ldreq	r4, [r6, #12]
 8001aa0:	e7e3      	b.n	8001a6a <_putc_r+0x1a>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	6022      	str	r2, [r4, #0]
 8001aa8:	701d      	strb	r5, [r3, #0]
 8001aaa:	b2e8      	uxtb	r0, r5
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
 8001aae:	bf00      	nop
 8001ab0:	08001dd8 	.word	0x08001dd8
 8001ab4:	08001df8 	.word	0x08001df8
 8001ab8:	08001db8 	.word	0x08001db8

08001abc <_sbrk_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	4c06      	ldr	r4, [pc, #24]	; (8001ad8 <_sbrk_r+0x1c>)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	6023      	str	r3, [r4, #0]
 8001ac8:	f000 f8de 	bl	8001c88 <_sbrk>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_sbrk_r+0x1a>
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_sbrk_r+0x1a>
 8001ad4:	602b      	str	r3, [r5, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	200000e0 	.word	0x200000e0

08001adc <__sread>:
 8001adc:	b510      	push	{r4, lr}
 8001ade:	460c      	mov	r4, r1
 8001ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae4:	f000 f896 	bl	8001c14 <_read_r>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	bfab      	itete	ge
 8001aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aee:	89a3      	ldrhlt	r3, [r4, #12]
 8001af0:	181b      	addge	r3, r3, r0
 8001af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001af6:	bfac      	ite	ge
 8001af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001afa:	81a3      	strhlt	r3, [r4, #12]
 8001afc:	bd10      	pop	{r4, pc}

08001afe <__swrite>:
 8001afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b02:	461f      	mov	r7, r3
 8001b04:	898b      	ldrh	r3, [r1, #12]
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	4605      	mov	r5, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4616      	mov	r6, r2
 8001b0e:	d505      	bpl.n	8001b1c <__swrite+0x1e>
 8001b10:	2302      	movs	r3, #2
 8001b12:	2200      	movs	r2, #0
 8001b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b18:	f000 f868 	bl	8001bec <_lseek_r>
 8001b1c:	89a3      	ldrh	r3, [r4, #12]
 8001b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b26:	81a3      	strh	r3, [r4, #12]
 8001b28:	4632      	mov	r2, r6
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b32:	f000 b817 	b.w	8001b64 <_write_r>

08001b36 <__sseek>:
 8001b36:	b510      	push	{r4, lr}
 8001b38:	460c      	mov	r4, r1
 8001b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3e:	f000 f855 	bl	8001bec <_lseek_r>
 8001b42:	1c43      	adds	r3, r0, #1
 8001b44:	89a3      	ldrh	r3, [r4, #12]
 8001b46:	bf15      	itete	ne
 8001b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b52:	81a3      	strheq	r3, [r4, #12]
 8001b54:	bf18      	it	ne
 8001b56:	81a3      	strhne	r3, [r4, #12]
 8001b58:	bd10      	pop	{r4, pc}

08001b5a <__sclose>:
 8001b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b5e:	f000 b813 	b.w	8001b88 <_close_r>
	...

08001b64 <_write_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4c07      	ldr	r4, [pc, #28]	; (8001b84 <_write_r+0x20>)
 8001b68:	4605      	mov	r5, r0
 8001b6a:	4608      	mov	r0, r1
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6022      	str	r2, [r4, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f7fe fbb3 	bl	80002de <_write>
 8001b78:	1c43      	adds	r3, r0, #1
 8001b7a:	d102      	bne.n	8001b82 <_write_r+0x1e>
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	b103      	cbz	r3, 8001b82 <_write_r+0x1e>
 8001b80:	602b      	str	r3, [r5, #0]
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
 8001b84:	200000e0 	.word	0x200000e0

08001b88 <_close_r>:
 8001b88:	b538      	push	{r3, r4, r5, lr}
 8001b8a:	4c06      	ldr	r4, [pc, #24]	; (8001ba4 <_close_r+0x1c>)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4605      	mov	r5, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	f000 f850 	bl	8001c38 <_close>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d102      	bne.n	8001ba2 <_close_r+0x1a>
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	b103      	cbz	r3, 8001ba2 <_close_r+0x1a>
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
 8001ba4:	200000e0 	.word	0x200000e0

08001ba8 <_fstat_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4c07      	ldr	r4, [pc, #28]	; (8001bc8 <_fstat_r+0x20>)
 8001bac:	2300      	movs	r3, #0
 8001bae:	4605      	mov	r5, r0
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	6023      	str	r3, [r4, #0]
 8001bb6:	f000 f847 	bl	8001c48 <_fstat>
 8001bba:	1c43      	adds	r3, r0, #1
 8001bbc:	d102      	bne.n	8001bc4 <_fstat_r+0x1c>
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	b103      	cbz	r3, 8001bc4 <_fstat_r+0x1c>
 8001bc2:	602b      	str	r3, [r5, #0]
 8001bc4:	bd38      	pop	{r3, r4, r5, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000e0 	.word	0x200000e0

08001bcc <_isatty_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4c06      	ldr	r4, [pc, #24]	; (8001be8 <_isatty_r+0x1c>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4605      	mov	r5, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	f000 f83e 	bl	8001c58 <_isatty>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_isatty_r+0x1a>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_isatty_r+0x1a>
 8001be4:	602b      	str	r3, [r5, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	200000e0 	.word	0x200000e0

08001bec <_lseek_r>:
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4c07      	ldr	r4, [pc, #28]	; (8001c0c <_lseek_r+0x20>)
 8001bf0:	4605      	mov	r5, r0
 8001bf2:	4608      	mov	r0, r1
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	6022      	str	r2, [r4, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f000 f834 	bl	8001c68 <_lseek>
 8001c00:	1c43      	adds	r3, r0, #1
 8001c02:	d102      	bne.n	8001c0a <_lseek_r+0x1e>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	b103      	cbz	r3, 8001c0a <_lseek_r+0x1e>
 8001c08:	602b      	str	r3, [r5, #0]
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
 8001c0c:	200000e0 	.word	0x200000e0

08001c10 <__malloc_lock>:
 8001c10:	4770      	bx	lr

08001c12 <__malloc_unlock>:
 8001c12:	4770      	bx	lr

08001c14 <_read_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4c07      	ldr	r4, [pc, #28]	; (8001c34 <_read_r+0x20>)
 8001c18:	4605      	mov	r5, r0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	6022      	str	r2, [r4, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f000 f828 	bl	8001c78 <_read>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_read_r+0x1e>
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_read_r+0x1e>
 8001c30:	602b      	str	r3, [r5, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	200000e0 	.word	0x200000e0

08001c38 <_close>:
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <_close+0xc>)
 8001c3a:	2258      	movs	r2, #88	; 0x58
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c42:	4770      	bx	lr
 8001c44:	200000e0 	.word	0x200000e0

08001c48 <_fstat>:
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <_fstat+0xc>)
 8001c4a:	2258      	movs	r2, #88	; 0x58
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c52:	4770      	bx	lr
 8001c54:	200000e0 	.word	0x200000e0

08001c58 <_isatty>:
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <_isatty+0xc>)
 8001c5a:	2258      	movs	r2, #88	; 0x58
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200000e0 	.word	0x200000e0

08001c68 <_lseek>:
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <_lseek+0xc>)
 8001c6a:	2258      	movs	r2, #88	; 0x58
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c72:	4770      	bx	lr
 8001c74:	200000e0 	.word	0x200000e0

08001c78 <_read>:
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <_read+0xc>)
 8001c7a:	2258      	movs	r2, #88	; 0x58
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c82:	4770      	bx	lr
 8001c84:	200000e0 	.word	0x200000e0

08001c88 <_sbrk>:
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <_sbrk+0x14>)
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	b909      	cbnz	r1, 8001c94 <_sbrk+0xc>
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <_sbrk+0x18>)
 8001c92:	6019      	str	r1, [r3, #0]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	4402      	add	r2, r0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	4770      	bx	lr
 8001c9c:	200000a8 	.word	0x200000a8
 8001ca0:	200000e8 	.word	0x200000e8

08001ca4 <_init>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr

08001cb0 <_fini>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr
